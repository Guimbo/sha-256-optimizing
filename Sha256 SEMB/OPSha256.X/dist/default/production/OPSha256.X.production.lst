

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 17 13:24:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  0066CC                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for calc_sha_256@F4125
    77  0066CC  E667               	dw	58983
    78  0066CE  6A09               	dw	27145
    79  0066D0  AE85               	dw	44677
    80  0066D2  BB67               	dw	47975
    81  0066D4  F372               	dw	62322
    82  0066D6  3C6E               	dw	15470
    83  0066D8  F53A               	dw	62778
    84  0066DA  A54F               	dw	42319
    85  0066DC  527F               	dw	21119
    86  0066DE  510E               	dw	20750
    87  0066E0  688C               	dw	26764
    88  0066E2  9B05               	dw	39685
    89  0066E4  D9AB               	dw	55723
    90  0066E6  1F83               	dw	8067
    91  0066E8  CD19               	dw	52505
    92  0066EA  5BE0               	dw	23520
    93                           
    94                           	psect	mediumconst
    95  007EB6                     __pmediumconst:
    96                           	opt stack 0
    97  007EB6  00                 	db	0
    98  007EB7                     _primes:
    99                           	opt stack 0
   100  007EB7  2F98               	dw	12184
   101  007EB9  428A               	dw	17034
   102  007EBB  4491               	dw	17553
   103  007EBD  7137               	dw	28983
   104  007EBF  FBCF               	dw	64463
   105  007EC1  B5C0               	dw	46528
   106  007EC3  DBA5               	dw	56229
   107  007EC5  E9B5               	dw	59829
   108  007EC7  C25B               	dw	49755
   109  007EC9  3956               	dw	14678
   110  007ECB  11F1               	dw	4593
   111  007ECD  59F1               	dw	23025
   112  007ECF  82A4               	dw	33444
   113  007ED1  923F               	dw	37439
   114  007ED3  5ED5               	dw	24277
   115  007ED5  AB1C               	dw	43804
   116  007ED7  AA98               	dw	43672
   117  007ED9  D807               	dw	55303
   118  007EDB  5B01               	dw	23297
   119  007EDD  1283               	dw	4739
   120  007EDF  85BE               	dw	34238
   121  007EE1  2431               	dw	9265
   122  007EE3  7DC3               	dw	32195
   123  007EE5  550C               	dw	21772
   124  007EE7  5D74               	dw	23924
   125  007EE9  72BE               	dw	29374
   126  007EEB  B1FE               	dw	45566
   127  007EED  80DE               	dw	32990
   128  007EEF  06A7               	dw	1703
   129  007EF1  9BDC               	dw	39900
   130  007EF3  F174               	dw	61812
   131  007EF5  C19B               	dw	49563
   132  007EF7  69C1               	dw	27073
   133  007EF9  E49B               	dw	58523
   134  007EFB  4786               	dw	18310
   135  007EFD  EFBE               	dw	61374
   136  007EFF  9DC6               	dw	40390
   137  007F01  0FC1               	dw	4033
   138  007F03  A1CC               	dw	41420
   139  007F05  240C               	dw	9228
   140  007F07  2C6F               	dw	11375
   141  007F09  2DE9               	dw	11753
   142  007F0B  84AA               	dw	33962
   143  007F0D  4A74               	dw	19060
   144  007F0F  A9DC               	dw	43484
   145  007F11  5CB0               	dw	23728
   146  007F13  88DA               	dw	35034
   147  007F15  76F9               	dw	30457
   148  007F17  5152               	dw	20818
   149  007F19  983E               	dw	38974
   150  007F1B  C66D               	dw	50797
   151  007F1D  A831               	dw	43057
   152  007F1F  27C8               	dw	10184
   153  007F21  B003               	dw	45059
   154  007F23  7FC7               	dw	32711
   155  007F25  BF59               	dw	48985
   156  007F27  0BF3               	dw	3059
   157  007F29  C6E0               	dw	50912
   158  007F2B  9147               	dw	37191
   159  007F2D  D5A7               	dw	54695
   160  007F2F  6351               	dw	25425
   161  007F31  06CA               	dw	1738
   162  007F33  2967               	dw	10599
   163  007F35  1429               	dw	5161
   164  007F37  0A85               	dw	2693
   165  007F39  27B7               	dw	10167
   166  007F3B  2138               	dw	8504
   167  007F3D  2E1B               	dw	11803
   168  007F3F  6DFC               	dw	28156
   169  007F41  4D2C               	dw	19756
   170  007F43  0D13               	dw	3347
   171  007F45  5338               	dw	21304
   172  007F47  7354               	dw	29524
   173  007F49  650A               	dw	25866
   174  007F4B  0ABB               	dw	2747
   175  007F4D  766A               	dw	30314
   176  007F4F  C92E               	dw	51502
   177  007F51  81C2               	dw	33218
   178  007F53  2C85               	dw	11397
   179  007F55  9272               	dw	37490
   180  007F57  E8A1               	dw	59553
   181  007F59  A2BF               	dw	41663
   182  007F5B  664B               	dw	26187
   183  007F5D  A81A               	dw	43034
   184  007F5F  8B70               	dw	35696
   185  007F61  C24B               	dw	49739
   186  007F63  51A3               	dw	20899
   187  007F65  C76C               	dw	51052
   188  007F67  E819               	dw	59417
   189  007F69  D192               	dw	53650
   190  007F6B  0624               	dw	1572
   191  007F6D  D699               	dw	54937
   192  007F6F  3585               	dw	13701
   193  007F71  F40E               	dw	62478
   194  007F73  A070               	dw	41072
   195  007F75  106A               	dw	4202
   196  007F77  C116               	dw	49430
   197  007F79  19A4               	dw	6564
   198  007F7B  6C08               	dw	27656
   199  007F7D  1E37               	dw	7735
   200  007F7F  774C               	dw	30540
   201  007F81  2748               	dw	10056
   202  007F83  BCB5               	dw	48309
   203  007F85  34B0               	dw	13488
   204  007F87  0CB3               	dw	3251
   205  007F89  391C               	dw	14620
   206  007F8B  AA4A               	dw	43594
   207  007F8D  4ED8               	dw	20184
   208  007F8F  CA4F               	dw	51791
   209  007F91  5B9C               	dw	23452
   210  007F93  6FF3               	dw	28659
   211  007F95  682E               	dw	26670
   212  007F97  82EE               	dw	33518
   213  007F99  748F               	dw	29839
   214  007F9B  636F               	dw	25455
   215  007F9D  78A5               	dw	30885
   216  007F9F  7814               	dw	30740
   217  007FA1  84C8               	dw	33992
   218  007FA3  0208               	dw	520
   219  007FA5  8CC7               	dw	36039
   220  007FA7  FFFA               	dw	65530
   221  007FA9  90BE               	dw	37054
   222  007FAB  6CEB               	dw	27883
   223  007FAD  A450               	dw	42064
   224  007FAF  A3F7               	dw	41975
   225  007FB1  BEF9               	dw	48889
   226  007FB3  78F2               	dw	30962
   227  007FB5  C671               	dw	50801
   228  007FB7                     __end_of_primes:
   229                           	opt stack 0
   230  007FB7                     _hexpowers:
   231                           	opt stack 0
   232  007FB7  0001               	dw	1
   233  007FB9  0010               	dw	16
   234  007FBB  0100               	dw	256
   235  007FBD  1000               	dw	4096
   236  007FBF                     __end_of_hexpowers:
   237                           	opt stack 0
   238  007FBF                     _string:
   239                           	opt stack 0
   240  007FBF  61                 	db	97
   241  007FC0  62                 	db	98
   242  007FC1  63                 	db	99
   243  007FC2  64                 	db	100
   244  007FC3  61                 	db	97
   245  007FC4  62                 	db	98
   246  007FC5  63                 	db	99
   247  007FC6  64                 	db	100
   248  007FC7  61                 	db	97
   249  007FC8  62                 	db	98
   250  007FC9  63                 	db	99
   251  007FCA  64                 	db	100
   252  007FCB  61                 	db	97
   253  007FCC  62                 	db	98
   254  007FCD  63                 	db	99
   255  007FCE  64                 	db	100
   256  007FCF                     __end_of_string:
   257                           	opt stack 0
   258  0000                     _TXREG	set	4013
   259  0000                     _RCSTA	set	4011
   260  0000                     _TXSTA	set	4012
   261  0000                     _SPBRG	set	4015
   262  0000                     _TXIF	set	31988
   263  0000                     _TRISC7	set	31911
   264  0000                     _TRISC6	set	31910
   265  007FCF                     STR_4:
   266  007FCF  30                 	db	48	;'0'
   267  007FD0  31                 	db	49	;'1'
   268  007FD1  32                 	db	50	;'2'
   269  007FD2  33                 	db	51	;'3'
   270  007FD3  34                 	db	52	;'4'
   271  007FD4  35                 	db	53	;'5'
   272  007FD5  36                 	db	54	;'6'
   273  007FD6  37                 	db	55	;'7'
   274  007FD7  38                 	db	56	;'8'
   275  007FD8  39                 	db	57	;'9'
   276  007FD9  61                 	db	97	;'a'
   277  007FDA  62                 	db	98	;'b'
   278  007FDB  63                 	db	99	;'c'
   279  007FDC  64                 	db	100	;'d'
   280  007FDD  65                 	db	101	;'e'
   281  007FDE  66                 	db	102	;'f'
   282  007FDF  00                 	db	0
   283  007FE0                     STR_2:
   284  007FE0  48                 	db	72	;'H'
   285  007FE1  61                 	db	97	;'a'
   286  007FE2  73                 	db	115	;'s'
   287  007FE3  68                 	db	104	;'h'
   288  007FE4  20                 	db	32
   289  007FE5  53                 	db	83	;'S'
   290  007FE6  74                 	db	116	;'t'
   291  007FE7  72                 	db	114	;'r'
   292  007FE8  69                 	db	105	;'i'
   293  007FE9  6E                 	db	110	;'n'
   294  007FEA  67                 	db	103	;'g'
   295  007FEB  3A                 	db	58	;':'
   296  007FEC  20                 	db	32
   297  007FED  00                 	db	0
   298  007FEE                     STR_3:
   299  007FEE  20                 	db	32
   300  007FEF  20                 	db	32
   301  007FF0  20                 	db	32
   302  007FF1  20                 	db	32
   303  007FF2  20                 	db	32
   304  007FF3  20                 	db	32
   305  007FF4  20                 	db	32
   306  007FF5  20                 	db	32
   307  007FF6  20                 	db	32
   308  007FF7  20                 	db	32
   309  007FF8  00                 	db	0
   310  007FF9                     STR_1:
   311  007FF9  25                 	db	37
   312  007FFA  30                 	db	48	;'0'
   313  007FFB  32                 	db	50	;'2'
   314  007FFC  78                 	db	120	;'x'
   315  007FFD  00                 	db	0
   316                           
   317                           ; #config settings
   318  007FFE  00                 	db	0	; dummy byte at the end
   319  0000                     
   320                           	psect	cinit
   321  00673E                     __pcinit:
   322                           	opt stack 0
   323  00673E                     start_initialization:
   324                           	opt stack 0
   325  00673E                     __initialization:
   326                           	opt stack 0
   327                           
   328                           ; Initialize objects allocated to COMRAM (32 bytes)
   329                           ; load TBLPTR registers with __pidataCOMRAM
   330  00673E  0ECC               	movlw	low __pidataCOMRAM
   331  006740  6EF6               	movwf	tblptrl,c
   332  006742  0E66               	movlw	high __pidataCOMRAM
   333  006744  6EF7               	movwf	tblptrh,c
   334  006746  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   335  006748  6EF8               	movwf	tblptru,c
   336  00674A  EE00  F040         	lfsr	0,__pdataCOMRAM
   337  00674E  EE10 F020          	lfsr	1,32
   338  006752                     copy_data0:
   339  006752  0009               	tblrd		*+
   340  006754  CFF5 FFEE          	movff	tablat,postinc0
   341  006758  50E5               	movf	postdec1,w,c
   342  00675A  50E1               	movf	fsr1l,w,c
   343  00675C  E1FA               	bnz	copy_data0
   344                           
   345                           ; Clear objects allocated to BANK2 (65 bytes)
   346  00675E  EE02  F083         	lfsr	0,__pbssBANK2
   347  006762  0E41               	movlw	65
   348  006764                     clear_0:
   349  006764  6AEE               	clrf	postinc0,c
   350  006766  06E8               	decf	wreg,f,c
   351  006768  E1FD               	bnz	clear_0
   352  00676A                     end_of_initialization:
   353                           	opt stack 0
   354  00676A                     __end_of__initialization:
   355                           	opt stack 0
   356  00676A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   357  00676C  6EF8               	movwf	tblptru,c
   358  00676E  0100               	movlb	0
   359  006770  EF36  F035         	goto	_main	;jump to C main() function
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           postdec1	equ	0xFE5
   367                           fsr1l	equ	0xFE1
   368                           
   369                           	psect	dataCOMRAM
   370  000040                     __pdataCOMRAM:
   371                           	opt stack 0
   372  000040                     calc_sha_256@F4125:
   373                           	opt stack 0
   374  000040                     	ds	32
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           postdec1	equ	0xFE5
   382                           fsr1l	equ	0xFE1
   383                           
   384                           	psect	bssBANK2
   385  000283                     __pbssBANK2:
   386                           	opt stack 0
   387  000283                     main@F4155:
   388                           	opt stack 0
   389  000283                     	ds	65
   390                           tblptru	equ	0xFF8
   391                           tblptrh	equ	0xFF7
   392                           tblptrl	equ	0xFF6
   393                           tablat	equ	0xFF5
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           postdec1	equ	0xFE5
   397                           fsr1l	equ	0xFE1
   398                           
   399                           	psect	cstackBANK2
   400  000200                     __pcstackBANK2:
   401                           	opt stack 0
   402  000200                     calc_sha_256@aux_hash:
   403                           	opt stack 0
   404                           
   405                           ; 32 bytes @ 0x0
   406  000200                     	ds	32
   407  000220                     main@hash_string:
   408                           	opt stack 0
   409                           
   410                           ; 65 bytes @ 0x20
   411  000220                     	ds	65
   412  000261                     main@hash:
   413                           	opt stack 0
   414                           
   415                           ; 32 bytes @ 0x61
   416  000261                     	ds	32
   417  000281                     main@pronteiro_string:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x81
   421  000281                     	ds	2
   422                           tblptru	equ	0xFF8
   423                           tblptrh	equ	0xFF7
   424                           tblptrl	equ	0xFF6
   425                           tablat	equ	0xFF5
   426                           postinc0	equ	0xFEE
   427                           wreg	equ	0xFE8
   428                           postdec1	equ	0xFE5
   429                           fsr1l	equ	0xFE1
   430                           
   431                           	psect	cstackBANK1
   432  000100                     __pcstackBANK1:
   433                           	opt stack 0
   434  000100                     calc_sha_256@word:
   435                           	opt stack 0
   436                           
   437                           ; 256 bytes @ 0x0
   438  000100                     	ds	256
   439                           tblptru	equ	0xFF8
   440                           tblptrh	equ	0xFF7
   441                           tblptrl	equ	0xFF6
   442                           tablat	equ	0xFF5
   443                           postinc0	equ	0xFEE
   444                           wreg	equ	0xFE8
   445                           postdec1	equ	0xFE5
   446                           fsr1l	equ	0xFE1
   447                           
   448                           	psect	cstackBANK0
   449  000060                     __pcstackBANK0:
   450                           	opt stack 0
   451  000060                     calc_sha_256@chunk:
   452                           	opt stack 0
   453                           
   454                           ; 64 bytes @ 0x0
   455  000060                     	ds	64
   456  0000A0                     calc_sha_256@h:
   457                           	opt stack 0
   458                           
   459                           ; 32 bytes @ 0x40
   460  0000A0                     	ds	32
   461  0000C0                     calc_sha_256@s0:
   462                           	opt stack 0
   463                           
   464                           ; 4 bytes @ 0x60
   465  0000C0                     	ds	4
   466  0000C4                     calc_sha_256@s1:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0x64
   470  0000C4                     	ds	4
   471  0000C8                     calc_sha_256@s1_110:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x68
   475  0000C8                     	ds	4
   476  0000CC                     calc_sha_256@ch:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0x6C
   480  0000CC                     	ds	4
   481  0000D0                     calc_sha_256@s0_113:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x70
   485  0000D0                     	ds	4
   486  0000D4                     calc_sha_256@maj:
   487                           	opt stack 0
   488                           
   489                           ; 4 bytes @ 0x74
   490  0000D4                     	ds	4
   491  0000D8                     calc_sha_256@temp2:
   492                           	opt stack 0
   493                           
   494                           ; 4 bytes @ 0x78
   495  0000D8                     	ds	4
   496  0000DC                     calc_sha_256@temp1:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x7C
   500  0000DC                     	ds	4
   501  0000E0                     calc_sha_256@pointer:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x80
   505  0000E0                     	ds	2
   506  0000E2                     calc_sha_256@state:
   507                           	opt stack 0
   508                           
   509                           ; 10 bytes @ 0x82
   510  0000E2                     	ds	10
   511  0000EC                     calc_sha_256@i:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x8C
   515  0000EC                     	ds	2
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	cstackCOMRAM
   526  000001                     __pcstackCOMRAM:
   527                           	opt stack 0
   528  000001                     ??_isdigit:
   529  000001                     ?___wmul:
   530                           	opt stack 0
   531  000001                     ?___lwdiv:
   532                           	opt stack 0
   533  000001                     ?___ftpack:
   534                           	opt stack 0
   535  000001                     ?_rotate_right:
   536                           	opt stack 0
   537  000001                     ?___fttol:
   538                           	opt stack 0
   539  000001                     USART_TxChar@out:
   540                           	opt stack 0
   541  000001                     init_buf_state@state:
   542                           	opt stack 0
   543  000001                     ___wmul@multiplier:
   544                           	opt stack 0
   545  000001                     ___lwdiv@dividend:
   546                           	opt stack 0
   547  000001                     memcpy@d1:
   548                           	opt stack 0
   549  000001                     memset@p1:
   550                           	opt stack 0
   551  000001                     ___ftpack@arg:
   552                           	opt stack 0
   553  000001                     ___fttol@f1:
   554                           	opt stack 0
   555  000001                     rotate_right@value:
   556                           	opt stack 0
   557                           
   558                           ; 4 bytes @ 0x0
   559  000001                     	ds	1
   560  000002                     _isdigit$385:
   561                           	opt stack 0
   562  000002                     USART_SendString@out:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x1
   566  000002                     	ds	1
   567  000003                     isdigit@c:
   568                           	opt stack 0
   569  000003                     init_buf_state@input:
   570                           	opt stack 0
   571  000003                     ___wmul@multiplicand:
   572                           	opt stack 0
   573  000003                     ___lwdiv@divisor:
   574                           	opt stack 0
   575  000003                     memcpy@s1:
   576                           	opt stack 0
   577  000003                     memset@c:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x2
   581  000003                     	ds	1
   582  000004                     ___ftpack@exp:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x3
   586  000004                     	ds	1
   587  000005                     ??___fttol:
   588  000005                     ___ftpack@sign:
   589                           	opt stack 0
   590  000005                     init_buf_state@length:
   591                           	opt stack 0
   592  000005                     rotate_right@count:
   593                           	opt stack 0
   594  000005                     ___wmul@product:
   595                           	opt stack 0
   596  000005                     ___lwdiv@quotient:
   597                           	opt stack 0
   598  000005                     memcpy@n:
   599                           	opt stack 0
   600  000005                     memset@n:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x4
   604  000005                     	ds	1
   605  000006                     ??___ftpack:
   606                           
   607                           ; 1 bytes @ 0x5
   608  000006                     	ds	1
   609  000007                     ??_rotate_right:
   610  000007                     ___lwdiv@counter:
   611                           	opt stack 0
   612  000007                     memcpy@d:
   613                           	opt stack 0
   614  000007                     memset@p:
   615                           	opt stack 0
   616                           
   617                           ; 2 bytes @ 0x6
   618  000007                     	ds	1
   619  000008                     ?_sprintf:
   620                           	opt stack 0
   621  000008                     sprintf@sp:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x7
   625  000008                     	ds	1
   626  000009                     ?___altoft:
   627                           	opt stack 0
   628  000009                     memcpy@s:
   629                           	opt stack 0
   630  000009                     ___altoft@c:
   631                           	opt stack 0
   632                           
   633                           ; 4 bytes @ 0x8
   634  000009                     	ds	1
   635  00000A                     ___fttol@sign1:
   636                           	opt stack 0
   637  00000A                     sprintf@f:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x9
   641  00000A                     	ds	1
   642  00000B                     memcpy@tmp:
   643                           	opt stack 0
   644  00000B                     ___fttol@lval:
   645                           	opt stack 0
   646                           
   647                           ; 4 bytes @ 0xA
   648  00000B                     	ds	1
   649  00000C                     ?_calc_chunk:
   650                           	opt stack 0
   651  00000C                     calc_chunk@chunk:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0xB
   655  00000C                     	ds	1
   656  00000D                     ??___altoft:
   657                           
   658                           ; 1 bytes @ 0xC
   659  00000D                     	ds	1
   660  00000E                     ??_sprintf:
   661  00000E                     calc_chunk@state:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0xD
   665  00000E                     	ds	1
   666  00000F                     ___fttol@exp1:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0xE
   670  00000F                     	ds	1
   671  000010                     ??_calc_chunk:
   672                           
   673                           ; 1 bytes @ 0xF
   674  000010                     	ds	1
   675  000011                     ___altoft@exp:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x10
   679  000011                     	ds	1
   680  000012                     ___altoft@sign:
   681                           	opt stack 0
   682  000012                     calc_chunk@left:
   683                           	opt stack 0
   684  000012                     sprintf@ap:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x11
   688  000012                     	ds	1
   689  000013                     ?___ftdiv:
   690                           	opt stack 0
   691  000013                     ___ftdiv@f1:
   692                           	opt stack 0
   693                           
   694                           ; 3 bytes @ 0x12
   695  000013                     	ds	1
   696  000014                     sprintf@idx:
   697                           	opt stack 0
   698  000014                     calc_chunk@length:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x13
   702  000014                     	ds	1
   703  000015                     sprintf@flag:
   704                           	opt stack 0
   705                           
   706                           ; 1 bytes @ 0x14
   707  000015                     	ds	1
   708  000016                     calc_chunk@space_in_chunk:
   709                           	opt stack 0
   710  000016                     sprintf@ccnt:
   711                           	opt stack 0
   712  000016                     ___ftdiv@f2:
   713                           	opt stack 0
   714                           
   715                           ; 3 bytes @ 0x15
   716  000016                     	ds	2
   717  000018                     calc_chunk@i:
   718                           	opt stack 0
   719  000018                     sprintf@val:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x17
   723  000018                     	ds	1
   724  000019                     ??___ftdiv:
   725                           
   726                           ; 1 bytes @ 0x18
   727  000019                     	ds	1
   728  00001A                     sprintf@prec:
   729                           	opt stack 0
   730  00001A                     calc_sha_256@hash:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x19
   734  00001A                     	ds	1
   735  00001B                     sprintf@width:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x1A
   739  00001B                     	ds	1
   740  00001C                     ___ftdiv@cntr:
   741                           	opt stack 0
   742  00001C                     calc_sha_256@input:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x1B
   746  00001C                     	ds	1
   747  00001D                     sprintf@c:
   748                           	opt stack 0
   749  00001D                     ___ftdiv@f3:
   750                           	opt stack 0
   751                           
   752                           ; 3 bytes @ 0x1C
   753  00001D                     	ds	1
   754  00001E                     calc_sha_256@length:
   755                           	opt stack 0
   756  00001E                     hash_to_string@string:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x1D
   760  00001E                     	ds	2
   761  000020                     ??_calc_sha_256:
   762  000020                     ___ftdiv@exp:
   763                           	opt stack 0
   764  000020                     hash_to_string@hash:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x1F
   768  000020                     	ds	1
   769  000021                     ___ftdiv@sign:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x20
   773  000021                     	ds	1
   774  000022                     ??_hash_to_string:
   775  000022                     ?___ftadd:
   776                           	opt stack 0
   777  000022                     ___ftadd@f1:
   778                           	opt stack 0
   779                           
   780                           ; 3 bytes @ 0x21
   781  000022                     	ds	1
   782  000023                     hash_to_string@i:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x22
   786  000023                     	ds	2
   787  000025                     ___ftadd@f2:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x24
   791  000025                     	ds	3
   792  000028                     ??___ftadd:
   793                           
   794                           ; 1 bytes @ 0x27
   795  000028                     	ds	3
   796  00002B                     ___ftadd@sign:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x2A
   800  00002B                     	ds	1
   801  00002C                     ___ftadd@exp2:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x2B
   805  00002C                     	ds	1
   806  00002D                     ___ftadd@exp1:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x2C
   810  00002D                     	ds	1
   811  00002E                     USART_Init@baud_rate:
   812                           	opt stack 0
   813                           
   814                           ; 4 bytes @ 0x2D
   815  00002E                     	ds	4
   816  000032                     USART_Init@temp:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x31
   820  000032                     	ds	12
   821  00003E                     calc_sha_256@j:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x3D
   825  00003E                     	ds	2
   826  000040                     tblptru	equ	0xFF8
   827                           tblptrh	equ	0xFF7
   828                           tblptrl	equ	0xFF6
   829                           tablat	equ	0xFF5
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           postdec1	equ	0xFE5
   833                           fsr1l	equ	0xFE1
   834                           
   835                           ; 1 bytes @ 0x3F
   836 ;;
   837 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   838 ;;
   839 ;; *************** function _main *****************
   840 ;; Defined at:
   841 ;;		line 366 in file "main.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  hash_string    65   32[BANK2 ] unsigned char [65]
   846 ;;  hash           32   97[BANK2 ] unsigned char [32]
   847 ;;  pronteiro_st    2  129[BANK2 ] PTR unsigned char 
   848 ;;		 -> string(16), 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   858 ;;      Params:         0       0       0       0       0       0       0       0       0
   859 ;;      Locals:         0       0       0      99       0       0       0       0       0
   860 ;;      Temps:          0       0       0       0       0       0       0       0       0
   861 ;;      Totals:         0       0       0      99       0       0       0       0       0
   862 ;;Total ram usage:       99 bytes
   863 ;; Hardware stack levels required when called:    3
   864 ;; This function calls:
   865 ;;		_USART_Init
   866 ;;		_USART_SendString
   867 ;;		_calc_sha_256
   868 ;;		_hash_to_string
   869 ;; This function is called by:
   870 ;;		Startup code after reset
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           	psect	text0
   875  006A6C                     __ptext0:
   876                           	opt stack 0
   877  006A6C                     _main:
   878                           	opt stack 28
   879                           
   880                           ;main.c: 369: char hash_string[65]={'\0'};
   881                           
   882                           ;incstack = 0
   883  006A6C  EE22  F083         	lfsr	2,main@F4155
   884  006A70  EE12  F020         	lfsr	1,main@hash_string
   885  006A74  0E40               	movlw	64
   886  006A76                     u1841:
   887  006A76  CFDB FFE3          	movff	plusw2,plusw1
   888  006A7A  06E8               	decf	wreg,f,c
   889  006A7C  E2FC               	bc	u1841
   890                           
   891                           ;main.c: 372: uint8_t hash[32];
   892                           ;main.c: 375: char *pronteiro_string;
   893                           ;main.c: 376: pronteiro_string = string;
   894  006A7E  0EBF               	movlw	low _string
   895  006A80  0102               	movlb	2	; () banked
   896  006A82  6F81               	movwf	main@pronteiro_string& (0+255),b
   897  006A84  0E7F               	movlw	high _string
   898  006A86  6F82               	movwf	(main@pronteiro_string+1)& (0+255),b
   899                           
   900                           ; BSR set to: 2
   901                           ;main.c: 378: USART_Init(9600);
   902  006A88  0E80               	movlw	128
   903  006A8A  6E2E               	movwf	USART_Init@baud_rate,c
   904  006A8C  0E25               	movlw	37
   905  006A8E  6E2F               	movwf	USART_Init@baud_rate+1,c
   906  006A90  0E00               	movlw	0
   907  006A92  6E30               	movwf	USART_Init@baud_rate+2,c
   908  006A94  0E00               	movlw	0
   909  006A96  6E31               	movwf	USART_Init@baud_rate+3,c
   910  006A98  ECF9  F034         	call	_USART_Init	;wreg free
   911  006A9C                     
   912                           ;main.c: 383: calc_sha_256(hash, pronteiro_string, 16);
   913  006A9C  0E61               	movlw	low main@hash
   914  006A9E  6E1A               	movwf	calc_sha_256@hash,c
   915  006AA0  0E02               	movlw	high main@hash
   916  006AA2  6E1B               	movwf	calc_sha_256@hash+1,c
   917  006AA4  C281  F01C         	movff	main@pronteiro_string,calc_sha_256@input
   918  006AA8  C282  F01D         	movff	main@pronteiro_string+1,calc_sha_256@input+1
   919  006AAC  0E00               	movlw	0
   920  006AAE  6E1F               	movwf	calc_sha_256@length+1,c
   921  006AB0  0E10               	movlw	16
   922  006AB2  6E1E               	movwf	calc_sha_256@length,c
   923  006AB4  ECD9  F039         	call	_calc_sha_256	;wreg free
   924                           
   925                           ;main.c: 386: hash_to_string(hash_string, hash);
   926  006AB8  0E20               	movlw	low main@hash_string
   927  006ABA  6E1E               	movwf	hash_to_string@string,c
   928  006ABC  0E02               	movlw	high main@hash_string
   929  006ABE  6E1F               	movwf	hash_to_string@string+1,c
   930  006AC0  0E61               	movlw	low main@hash
   931  006AC2  6E20               	movwf	hash_to_string@hash,c
   932  006AC4  0E02               	movlw	high main@hash
   933  006AC6  6E21               	movwf	hash_to_string@hash+1,c
   934  006AC8  ECDD  F033         	call	_hash_to_string	;wreg free
   935                           
   936                           ;main.c: 389: USART_SendString("Hash String: ");
   937  006ACC  0EE0               	movlw	low STR_2
   938  006ACE  6E02               	movwf	USART_SendString@out,c
   939  006AD0  0E7F               	movlw	high STR_2
   940  006AD2  6E03               	movwf	USART_SendString@out+1,c
   941  006AD4  EC05  F034         	call	_USART_SendString	;wreg free
   942                           
   943                           ;main.c: 390: USART_SendString(hash_string);
   944  006AD8  0E20               	movlw	low main@hash_string
   945  006ADA  6E02               	movwf	USART_SendString@out,c
   946  006ADC  0E02               	movlw	high main@hash_string
   947  006ADE  6E03               	movwf	USART_SendString@out+1,c
   948  006AE0  EC05  F034         	call	_USART_SendString	;wreg free
   949                           
   950                           ;main.c: 391: USART_SendString("          ");
   951  006AE4  0EEE               	movlw	low STR_3
   952  006AE6  6E02               	movwf	USART_SendString@out,c
   953  006AE8  0E7F               	movlw	high STR_3
   954  006AEA  6E03               	movwf	USART_SendString@out+1,c
   955  006AEC  EC05  F034         	call	_USART_SendString	;wreg free
   956  006AF0  D7D5               	goto	l94
   957  006AF2                     __end_of_main:
   958                           	opt stack 0
   959                           tblptru	equ	0xFF8
   960                           tblptrh	equ	0xFF7
   961                           tblptrl	equ	0xFF6
   962                           tablat	equ	0xFF5
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           postdec1	equ	0xFE5
   966                           plusw1	equ	0xFE3
   967                           fsr1l	equ	0xFE1
   968                           plusw2	equ	0xFDB
   969                           
   970 ;; *************** function _hash_to_string *****************
   971 ;; Defined at:
   972 ;;		line 349 in file "main.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;  string          2   29[COMRAM] PTR unsigned char 
   975 ;;		 -> main@hash_string(65), 
   976 ;;  hash            2   31[COMRAM] PTR const unsigned char 
   977 ;;		 -> main@hash(32), 
   978 ;; Auto vars:     Size  Location     Type
   979 ;;  i               2   34[COMRAM] unsigned int 
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      void 
   982 ;; Registers used:
   983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   989 ;;      Params:         4       0       0       0       0       0       0       0       0
   990 ;;      Locals:         2       0       0       0       0       0       0       0       0
   991 ;;      Temps:          1       0       0       0       0       0       0       0       0
   992 ;;      Totals:         7       0       0       0       0       0       0       0       0
   993 ;;Total ram usage:        7 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; Hardware stack levels required when called:    2
   996 ;; This function calls:
   997 ;;		_sprintf
   998 ;; This function is called by:
   999 ;;		_main
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text1
  1004  0067BA                     __ptext1:
  1005                           	opt stack 0
  1006  0067BA                     _hash_to_string:
  1007                           	opt stack 28
  1008                           
  1009                           ;main.c: 351: size_t i = 0;
  1010                           
  1011                           ;incstack = 0
  1012  0067BA  0E00               	movlw	0
  1013  0067BC  6E24               	movwf	hash_to_string@i+1,c
  1014  0067BE  0E00               	movlw	0
  1015  0067C0  6E23               	movwf	hash_to_string@i,c
  1016                           
  1017                           ;main.c: 352: while (i < 32) {
  1018  0067C2  D01B               	goto	l84
  1019  0067C4                     
  1020                           ;main.c: 353: string += sprintf(string, "%02x", hash[i]);
  1021  0067C4  C01E  F008         	movff	hash_to_string@string,sprintf@sp
  1022  0067C8  C01F  F009         	movff	hash_to_string@string+1,sprintf@sp+1
  1023  0067CC  0EF9               	movlw	low STR_1
  1024  0067CE  6E0A               	movwf	sprintf@f,c
  1025  0067D0  0E7F               	movlw	high STR_1
  1026  0067D2  6E0B               	movwf	sprintf@f+1,c
  1027  0067D4  5023               	movf	hash_to_string@i,w,c
  1028  0067D6  2420               	addwf	hash_to_string@hash,w,c
  1029  0067D8  6ED9               	movwf	fsr2l,c
  1030  0067DA  5024               	movf	hash_to_string@i+1,w,c
  1031  0067DC  2021               	addwfc	hash_to_string@hash+1,w,c
  1032  0067DE  6EDA               	movwf	fsr2h,c
  1033  0067E0  50DF               	movf	indf2,w,c
  1034  0067E2  6E22               	movwf	??_hash_to_string& (0+255),c
  1035  0067E4  5022               	movf	??_hash_to_string,w,c
  1036  0067E6  6E0C               	movwf	?_sprintf+4,c
  1037  0067E8  6A0D               	clrf	?_sprintf+5,c
  1038  0067EA  ECB5  F038         	call	_sprintf	;wreg free
  1039  0067EE  5008               	movf	?_sprintf,w,c
  1040  0067F0  261E               	addwf	hash_to_string@string,f,c
  1041  0067F2  5009               	movf	?_sprintf+1,w,c
  1042  0067F4  221F               	addwfc	hash_to_string@string+1,f,c
  1043                           
  1044                           ;main.c: 354: i++;
  1045  0067F6  4A23               	infsnz	hash_to_string@i,f,c
  1046  0067F8  2A24               	incf	hash_to_string@i+1,f,c
  1047  0067FA                     l84:
  1048  0067FA  5024               	movf	hash_to_string@i+1,w,c
  1049  0067FC  E105               	bnz	l87
  1050  0067FE  0E20               	movlw	32
  1051  006800  5C23               	subwf	hash_to_string@i,w,c
  1052  006802  B0D8               	btfsc	status,0,c
  1053  006804  0012               	return	
  1054  006806  D7DE               	goto	l85
  1055  006808                     l87:
  1056  006808  0012               	return		;funcret
  1057  00680A                     __end_of_hash_to_string:
  1058                           	opt stack 0
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           postinc0	equ	0xFEE
  1064                           wreg	equ	0xFE8
  1065                           postdec1	equ	0xFE5
  1066                           plusw1	equ	0xFE3
  1067                           fsr1l	equ	0xFE1
  1068                           indf2	equ	0xFDF
  1069                           plusw2	equ	0xFDB
  1070                           fsr2h	equ	0xFDA
  1071                           fsr2l	equ	0xFD9
  1072                           status	equ	0xFD8
  1073                           
  1074 ;; *************** function _sprintf *****************
  1075 ;; Defined at:
  1076 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;  sp              2    7[COMRAM] PTR unsigned char 
  1079 ;;		 -> main@hash_string(65), 
  1080 ;;  f               2    9[COMRAM] PTR const unsigned char 
  1081 ;;		 -> STR_1(5), 
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  idx             1   19[COMRAM] unsigned char 
  1084 ;;  tmpval          4    0        struct .
  1085 ;;  cp              3    0        PTR const unsigned char 
  1086 ;;  width           2   26[COMRAM] int 
  1087 ;;  val             2   23[COMRAM] unsigned int 
  1088 ;;  ccnt            2   21[COMRAM] int 
  1089 ;;  ap              2   17[COMRAM] PTR void [1]
  1090 ;;		 -> ?_sprintf(2), 
  1091 ;;  len             2    0        unsigned int 
  1092 ;;  c               1   28[COMRAM] char 
  1093 ;;  prec            1   25[COMRAM] char 
  1094 ;;  flag            1   20[COMRAM] unsigned char 
  1095 ;; Return value:  Size  Location     Type
  1096 ;;                  2    7[COMRAM] int 
  1097 ;; Registers used:
  1098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1104 ;;      Params:         6       0       0       0       0       0       0       0       0
  1105 ;;      Locals:        12       0       0       0       0       0       0       0       0
  1106 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1107 ;;      Totals:        22       0       0       0       0       0       0       0       0
  1108 ;;Total ram usage:       22 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; Hardware stack levels required when called:    1
  1111 ;; This function calls:
  1112 ;;		___lwdiv
  1113 ;;		___wmul
  1114 ;;		_isdigit
  1115 ;; This function is called by:
  1116 ;;		_hash_to_string
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           	psect	text2
  1121  00716A                     __ptext2:
  1122                           	opt stack 0
  1123  00716A                     _sprintf:
  1124                           	opt stack 28
  1125                           
  1126                           ;doprnt.c: 494: va_list ap;
  1127                           ;doprnt.c: 499: signed char c;
  1128                           ;doprnt.c: 501: int width;
  1129                           ;doprnt.c: 506: signed char prec;
  1130                           ;doprnt.c: 508: unsigned char flag;
  1131                           ;doprnt.c: 510: int ccnt = 0;
  1132                           
  1133                           ;incstack = 0
  1134  00716A  0E00               	movlw	0
  1135  00716C  6E17               	movwf	sprintf@ccnt+1,c
  1136  00716E  0E00               	movlw	0
  1137  007170  6E16               	movwf	sprintf@ccnt,c
  1138                           
  1139                           ;doprnt.c: 523: union {
  1140                           ;doprnt.c: 524: unsigned long vd;
  1141                           ;doprnt.c: 525: double integ;
  1142                           ;doprnt.c: 526: } tmpval;
  1143                           ;doprnt.c: 528: unsigned int val;
  1144                           ;doprnt.c: 529: unsigned len;
  1145                           ;doprnt.c: 530: const char * cp;
  1146                           ;doprnt.c: 533: *ap = __va_start();
  1147  007172  0E0C               	movlw	low (?_sprintf+4)
  1148  007174  6E12               	movwf	sprintf@ap,c
  1149  007176  0E00               	movlw	high (?_sprintf+4)
  1150  007178  6E13               	movwf	sprintf@ap+1,c
  1151                           
  1152                           ;doprnt.c: 536: while(c = *f++) {
  1153  00717A  D104               	goto	u1300
  1154  00717C                     
  1155                           ;doprnt.c: 538: if(c != '%')
  1156  00717C  0E25               	movlw	37
  1157  00717E  181D               	xorwf	sprintf@c,w,c
  1158  007180  B4D8               	btfsc	status,2,c
  1159  007182  D00B               	goto	l110
  1160                           
  1161                           ;doprnt.c: 540: {
  1162                           ;doprnt.c: 541: ((*sp++ = (c)),(++ccnt));
  1163  007184  C008  FFD9         	movff	sprintf@sp,fsr2l
  1164  007188  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1165  00718C  C01D  FFDF         	movff	sprintf@c,indf2
  1166  007190  4A08               	infsnz	sprintf@sp,f,c
  1167  007192  2A09               	incf	sprintf@sp+1,f,c
  1168  007194  4A16               	infsnz	sprintf@ccnt,f,c
  1169  007196  2A17               	incf	sprintf@ccnt+1,f,c
  1170                           
  1171                           ;doprnt.c: 542: continue;
  1172  007198  D0F5               	goto	u1300
  1173  00719A                     l110:
  1174                           
  1175                           ;doprnt.c: 543: }
  1176                           ;doprnt.c: 546: width = 0;
  1177  00719A  0E00               	movlw	0
  1178  00719C  6E1C               	movwf	sprintf@width+1,c
  1179  00719E  0E00               	movlw	0
  1180  0071A0  6E1B               	movwf	sprintf@width,c
  1181                           
  1182                           ;doprnt.c: 548: flag = 0;
  1183  0071A2  0E00               	movlw	0
  1184  0071A4  6E15               	movwf	sprintf@flag,c
  1185                           
  1186                           ;doprnt.c: 551: switch(*f) {
  1187                           
  1188                           ;doprnt.c: 550: for(;;) {
  1189  0071A6  D003               	goto	l112
  1190  0071A8                     
  1191                           ;doprnt.c: 580: flag |= 0x04;
  1192  0071A8  8415               	bsf	sprintf@flag,2,c
  1193                           
  1194                           ;doprnt.c: 581: f++;
  1195  0071AA  4A0A               	infsnz	sprintf@f,f,c
  1196  0071AC  2A0B               	incf	sprintf@f+1,f,c
  1197  0071AE                     l112:
  1198  0071AE  C00A  FFF6         	movff	sprintf@f,tblptrl
  1199  0071B2  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1200  0071B6                     	if	0	;tblptru may be non-zero
  1201  0071B6                     	endif
  1202  0071B6                     	if	0	;tblptru may be non-zero
  1203  0071B6                     	endif
  1204  0071B6  0008               	tblrd		*
  1205  0071B8  50F5               	movf	tablat,w,c
  1206                           
  1207                           ; Switch size 1, requested type "space"
  1208                           ; Number of cases is 1, Range of values is 48 to 48
  1209                           ; switch strategies available:
  1210                           ; Name         Instructions Cycles
  1211                           ; simple_byte            4     3 (average)
  1212                           ;	Chosen strategy is simple_byte
  1213  0071BA  0A30               	xorlw	48	; case 48
  1214  0071BC  B4D8               	btfsc	status,2,c
  1215  0071BE  D7F4               	goto	l113
  1216                           
  1217                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1218                           
  1219                           ;doprnt.c: 586: }
  1220                           
  1221                           ;doprnt.c: 585: break;
  1222  0071C0  C00A  FFF6         	movff	sprintf@f,tblptrl
  1223  0071C4  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1224  0071C8                     	if	0	;tblptru may be non-zero
  1225  0071C8                     	endif
  1226  0071C8                     	if	0	;tblptru may be non-zero
  1227  0071C8                     	endif
  1228  0071C8  0008               	tblrd		*
  1229  0071CA  50F5               	movf	tablat,w,c
  1230  0071CC  EC57  F033         	call	_isdigit
  1231  0071D0  A0D8               	btfss	status,0,c
  1232  0071D2  D032               	goto	l120
  1233                           
  1234                           ;doprnt.c: 598: width = 0;
  1235  0071D4  0E00               	movlw	0
  1236  0071D6  6E1C               	movwf	sprintf@width+1,c
  1237  0071D8  0E00               	movlw	0
  1238  0071DA  6E1B               	movwf	sprintf@width,c
  1239  0071DC                     
  1240                           ;doprnt.c: 600: width *= 10;
  1241  0071DC  C01B  F001         	movff	sprintf@width,___wmul@multiplier
  1242  0071E0  C01C  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1243  0071E4  0E00               	movlw	0
  1244  0071E6  6E04               	movwf	___wmul@multiplicand+1,c
  1245  0071E8  0E0A               	movlw	10
  1246  0071EA  6E03               	movwf	___wmul@multiplicand,c
  1247  0071EC  EC76  F033         	call	___wmul	;wreg free
  1248  0071F0  C001  F01B         	movff	?___wmul,sprintf@width
  1249  0071F4  C002  F01C         	movff	?___wmul+1,sprintf@width+1
  1250                           
  1251                           ;doprnt.c: 601: width += *f++ - '0';
  1252  0071F8  0ED0               	movlw	208
  1253  0071FA  6E0E               	movwf	??_sprintf& (0+255),c
  1254  0071FC  0EFF               	movlw	255
  1255  0071FE  6E0F               	movwf	(??_sprintf+1)& (0+255),c
  1256  007200  C00A  FFF6         	movff	sprintf@f,tblptrl
  1257  007204  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1258  007208                     	if	0	;tblptru may be non-zero
  1259  007208                     	endif
  1260  007208                     	if	0	;tblptru may be non-zero
  1261  007208                     	endif
  1262  007208  0008               	tblrd		*
  1263  00720A  50F5               	movf	tablat,w,c
  1264  00720C  6E10               	movwf	(??_sprintf+2)& (0+255),c
  1265  00720E  6A11               	clrf	(??_sprintf+3)& (0+255),c
  1266  007210  500E               	movf	??_sprintf,w,c
  1267  007212  2610               	addwf	??_sprintf+2,f,c
  1268  007214  500F               	movf	??_sprintf+1,w,c
  1269  007216  2211               	addwfc	??_sprintf+3,f,c
  1270  007218  5010               	movf	??_sprintf+2,w,c
  1271  00721A  261B               	addwf	sprintf@width,f,c
  1272  00721C  5011               	movf	??_sprintf+3,w,c
  1273  00721E  221C               	addwfc	sprintf@width+1,f,c
  1274  007220  4A0A               	infsnz	sprintf@f,f,c
  1275  007222  2A0B               	incf	sprintf@f+1,f,c
  1276                           
  1277                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1278  007224  C00A  FFF6         	movff	sprintf@f,tblptrl
  1279  007228  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1280  00722C                     	if	0	;tblptru may be non-zero
  1281  00722C                     	endif
  1282  00722C                     	if	0	;tblptru may be non-zero
  1283  00722C                     	endif
  1284  00722C  0008               	tblrd		*
  1285  00722E  50F5               	movf	tablat,w,c
  1286  007230  EC57  F033         	call	_isdigit
  1287  007234  B0D8               	btfsc	status,0,c
  1288  007236  D7D2               	goto	l118
  1289  007238                     l120:
  1290  007238  C00A  FFF6         	movff	sprintf@f,tblptrl
  1291  00723C  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1292  007240  4A0A               	infsnz	sprintf@f,f,c
  1293  007242  2A0B               	incf	sprintf@f+1,f,c
  1294  007244                     	if	0	;tblptru may be non-zero
  1295  007244                     	endif
  1296  007244                     	if	0	;tblptru may be non-zero
  1297  007244                     	endif
  1298  007244  0008               	tblrd		*
  1299  007246  CFF5 F01D          	movff	tablat,sprintf@c
  1300  00724A  501D               	movf	sprintf@c,w,c
  1301                           
  1302                           ; Switch size 1, requested type "space"
  1303                           ; Number of cases is 2, Range of values is 0 to 120
  1304                           ; switch strategies available:
  1305                           ; Name         Instructions Cycles
  1306                           ; simple_byte            7     4 (average)
  1307                           ;	Chosen strategy is simple_byte
  1308  00724C  0A00               	xorlw	0	; case 0
  1309  00724E  B4D8               	btfsc	status,2,c
  1310  007250  D0A5               	goto	u1310
  1311  007252  0A78               	xorlw	120	; case 120
  1312  007254  A4D8               	btfss	status,2,c
  1313  007256  D096               	goto	u1300
  1314                           
  1315                           ;doprnt.c: 1273: {
  1316                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1317  007258  C012  FFD9         	movff	sprintf@ap,fsr2l
  1318  00725C  C013  FFDA         	movff	sprintf@ap+1,fsr2h
  1319  007260  CFDE F018          	movff	postinc2,sprintf@val
  1320  007264  CFDD F019          	movff	postdec2,sprintf@val+1
  1321  007268  0E02               	movlw	2
  1322  00726A  2612               	addwf	sprintf@ap,f,c
  1323  00726C  0E00               	movlw	0
  1324  00726E  2213               	addwfc	sprintf@ap+1,f,c
  1325                           
  1326                           ;doprnt.c: 1287: }
  1327                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1328  007270  0E01               	movlw	1
  1329  007272  6E1D               	movwf	sprintf@c,c
  1330  007274                     l1618:
  1331  007274  0E04               	movlw	4
  1332  007276  181D               	xorwf	sprintf@c,w,c
  1333  007278  B4D8               	btfsc	status,2,c
  1334  00727A  D012               	goto	u1230
  1335                           
  1336                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1337  00727C  501D               	movf	sprintf@c,w,c
  1338  00727E  0D02               	mullw	2
  1339  007280  0EB7               	movlw	low _hexpowers
  1340  007282  24F3               	addwf	prodl,w,c
  1341  007284  6EF6               	movwf	tblptrl,c
  1342  007286  0E7F               	movlw	high _hexpowers
  1343  007288  20F4               	addwfc	prodh,w,c
  1344  00728A  6EF7               	movwf	tblptrh,c
  1345  00728C                     	if	0	;There are less than 3 active tblptr bytes
  1346  00728C                     	endif
  1347  00728C  0009               	tblrd		*+
  1348  00728E  50F5               	movf	tablat,w,c
  1349  007290  5C18               	subwf	sprintf@val,w,c
  1350  007292  0009               	tblrd		*+
  1351  007294  50F5               	movf	tablat,w,c
  1352  007296  5819               	subwfb	sprintf@val+1,w,c
  1353  007298  A0D8               	btfss	status,0,c
  1354  00729A  D002               	goto	u1230
  1355                           
  1356                           ;doprnt.c: 1318: break;
  1357  00729C  2A1D               	incf	sprintf@c,f,c
  1358  00729E  D7EA               	goto	l1618
  1359  0072A0                     u1230:
  1360                           
  1361                           ;doprnt.c: 1381: if(width > c)
  1362  0072A0  0E80               	movlw	128
  1363  0072A2  BE1D               	btfsc	sprintf@c,7,c
  1364  0072A4  0E7F               	movlw	127
  1365  0072A6  6E0E               	movwf	??_sprintf& (0+255),c
  1366  0072A8  501B               	movf	sprintf@width,w,c
  1367  0072AA  5C1D               	subwf	sprintf@c,w,c
  1368  0072AC  501C               	movf	sprintf@width+1,w,c
  1369  0072AE  0A80               	xorlw	128
  1370  0072B0  580E               	subwfb	??_sprintf& (0+255),w,c
  1371  0072B2  B0D8               	btfsc	status,0,c
  1372  0072B4  D007               	goto	l129
  1373                           
  1374                           ;doprnt.c: 1382: width -= c;
  1375  0072B6  501D               	movf	sprintf@c,w,c
  1376  0072B8  5E1B               	subwf	sprintf@width,f,c
  1377  0072BA  0E00               	movlw	0
  1378  0072BC  BE1D               	btfsc	sprintf@c,7,c
  1379  0072BE  0EFF               	movlw	255
  1380  0072C0  5A1C               	subwfb	sprintf@width+1,f,c
  1381  0072C2  D004               	goto	l130
  1382  0072C4                     l129:
  1383                           
  1384                           ;doprnt.c: 1383: else
  1385                           ;doprnt.c: 1384: width = 0;
  1386  0072C4  0E00               	movlw	0
  1387  0072C6  6E1C               	movwf	sprintf@width+1,c
  1388  0072C8  0E00               	movlw	0
  1389  0072CA  6E1B               	movwf	sprintf@width,c
  1390  0072CC                     l130:
  1391                           
  1392                           ;doprnt.c: 1387: if(flag & 0x04) {
  1393  0072CC  A415               	btfss	sprintf@flag,2,c
  1394  0072CE  D012               	goto	l131
  1395  0072D0                     
  1396                           ;doprnt.c: 1415: if(width)
  1397  0072D0  501B               	movf	sprintf@width,w,c
  1398  0072D2  101C               	iorwf	sprintf@width+1,w,c
  1399  0072D4  B4D8               	btfsc	status,2,c
  1400  0072D6  D023               	goto	u1290
  1401                           
  1402                           ;doprnt.c: 1417: ((*sp++ = ('0')),(++ccnt));
  1403                           
  1404                           ;doprnt.c: 1416: do
  1405  0072D8  C008  FFD9         	movff	sprintf@sp,fsr2l
  1406  0072DC  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1407  0072E0  0E30               	movlw	48
  1408  0072E2  6EDF               	movwf	indf2,c
  1409  0072E4  4A08               	infsnz	sprintf@sp,f,c
  1410  0072E6  2A09               	incf	sprintf@sp+1,f,c
  1411  0072E8  4A16               	infsnz	sprintf@ccnt,f,c
  1412  0072EA  2A17               	incf	sprintf@ccnt+1,f,c
  1413                           
  1414                           ;doprnt.c: 1418: while(--width);
  1415  0072EC  061B               	decf	sprintf@width,f,c
  1416  0072EE  A0D8               	btfss	status,0,c
  1417  0072F0  061C               	decf	sprintf@width+1,f,c
  1418  0072F2  D7EE               	goto	L1
  1419  0072F4                     l131:
  1420                           
  1421                           ;doprnt.c: 1422: {
  1422                           ;doprnt.c: 1424: if(width
  1423                           ;doprnt.c: 1428: )
  1424  0072F4  501B               	movf	sprintf@width,w,c
  1425  0072F6  101C               	iorwf	sprintf@width+1,w,c
  1426  0072F8  B4D8               	btfsc	status,2,c
  1427  0072FA  D011               	goto	u1290
  1428  0072FC                     u1280:
  1429                           
  1430                           ;doprnt.c: 1430: ((*sp++ = (' ')),(++ccnt));
  1431                           
  1432                           ;doprnt.c: 1429: do
  1433  0072FC  C008  FFD9         	movff	sprintf@sp,fsr2l
  1434  007300  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1435  007304  0E20               	movlw	32
  1436  007306  6EDF               	movwf	indf2,c
  1437  007308  4A08               	infsnz	sprintf@sp,f,c
  1438  00730A  2A09               	incf	sprintf@sp+1,f,c
  1439  00730C  4A16               	infsnz	sprintf@ccnt,f,c
  1440  00730E  2A17               	incf	sprintf@ccnt+1,f,c
  1441                           
  1442                           ;doprnt.c: 1431: while(--width);
  1443  007310  061B               	decf	sprintf@width,f,c
  1444  007312  A0D8               	btfss	status,0,c
  1445  007314  061C               	decf	sprintf@width+1,f,c
  1446  007316  501B               	movf	sprintf@width,w,c
  1447  007318  101C               	iorwf	sprintf@width+1,w,c
  1448  00731A  A4D8               	btfss	status,2,c
  1449  00731C  D7EF               	goto	u1280
  1450  00731E                     u1290:
  1451                           
  1452                           ;doprnt.c: 1469: }
  1453                           ;doprnt.c: 1472: prec = c;
  1454  00731E  C01D  F01A         	movff	sprintf@c,sprintf@prec
  1455                           
  1456                           ;doprnt.c: 1474: while(prec--) {
  1457  007322  D02C               	goto	l139
  1458  007324                     
  1459                           ;doprnt.c: 1478: {
  1460                           ;doprnt.c: 1499: {
  1461                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1462  007324  C018  F001         	movff	sprintf@val,___lwdiv@dividend
  1463  007328  C019  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1464  00732C  501A               	movf	sprintf@prec,w,c
  1465  00732E  0D02               	mullw	2
  1466  007330  0EB7               	movlw	low _hexpowers
  1467  007332  24F3               	addwf	prodl,w,c
  1468  007334  6EF6               	movwf	tblptrl,c
  1469  007336  0E7F               	movlw	high _hexpowers
  1470  007338  20F4               	addwfc	prodh,w,c
  1471  00733A  6EF7               	movwf	tblptrh,c
  1472  00733C                     	if	0	;There are less than 3 active tblptr bytes
  1473  00733C                     	endif
  1474  00733C  0009               	tblrd		*+
  1475  00733E  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1476  007342  000A               	tblrd		*-
  1477  007344  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1478  007348  EC2E  F034         	call	___lwdiv	;wreg free
  1479  00734C  5001               	movf	?___lwdiv,w,c
  1480  00734E  0B0F               	andlw	15
  1481  007350  6E14               	movwf	sprintf@idx,c
  1482                           
  1483                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1484  007352  5014               	movf	sprintf@idx,w,c
  1485  007354  0D01               	mullw	1
  1486  007356  0ECF               	movlw	low STR_4
  1487  007358  24F3               	addwf	prodl,w,c
  1488  00735A  6EF6               	movwf	tblptrl,c
  1489  00735C  0E7F               	movlw	high STR_4
  1490  00735E  20F4               	addwfc	prodh,w,c
  1491  007360  6EF7               	movwf	tblptrh,c
  1492  007362                     	if	0	;There are less than 3 active tblptr bytes
  1493  007362                     	endif
  1494  007362  0008               	tblrd		*
  1495  007364  CFF5 F01D          	movff	tablat,sprintf@c
  1496                           
  1497                           ;doprnt.c: 1508: }
  1498                           ;doprnt.c: 1523: }
  1499                           ;doprnt.c: 1524: ((*sp++ = (c)),(++ccnt));
  1500  007368  C008  FFD9         	movff	sprintf@sp,fsr2l
  1501  00736C  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1502  007370  C01D  FFDF         	movff	sprintf@c,indf2
  1503  007374  4A08               	infsnz	sprintf@sp,f,c
  1504  007376  2A09               	incf	sprintf@sp+1,f,c
  1505  007378  4A16               	infsnz	sprintf@ccnt,f,c
  1506  00737A  2A17               	incf	sprintf@ccnt+1,f,c
  1507  00737C                     l139:
  1508  00737C  061A               	decf	sprintf@prec,f,c
  1509  00737E  281A               	incf	sprintf@prec,w,c
  1510  007380  A4D8               	btfss	status,2,c
  1511  007382  D7D0               	goto	l140
  1512  007384                     u1300:
  1513  007384  C00A  FFF6         	movff	sprintf@f,tblptrl
  1514  007388  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1515  00738C  4A0A               	infsnz	sprintf@f,f,c
  1516  00738E  2A0B               	incf	sprintf@f+1,f,c
  1517  007390                     	if	0	;tblptru may be non-zero
  1518  007390                     	endif
  1519  007390                     	if	0	;tblptru may be non-zero
  1520  007390                     	endif
  1521  007390  0008               	tblrd		*
  1522  007392  CFF5 F01D          	movff	tablat,sprintf@c
  1523  007396  501D               	movf	sprintf@c,w,c
  1524  007398  A4D8               	btfss	status,2,c
  1525  00739A  D6F0               	goto	l109
  1526  00739C                     u1310:
  1527                           
  1528                           ;doprnt.c: 1538: *sp = 0;
  1529                           
  1530                           ;doprnt.c: 1525: }
  1531                           ;doprnt.c: 1533: }
  1532                           ;doprnt.c: 1535: alldone:
  1533  00739C  C008  FFD9         	movff	sprintf@sp,fsr2l
  1534  0073A0  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1535  0073A4  0E00               	movlw	0
  1536  0073A6  6EDF               	movwf	indf2,c
  1537                           
  1538                           ;doprnt.c: 1540: return ccnt;
  1539  0073A8  C016  F008         	movff	sprintf@ccnt,?_sprintf
  1540  0073AC  C017  F009         	movff	sprintf@ccnt+1,?_sprintf+1
  1541  0073B0  0012               	return	
  1542  0073B2                     __end_of_sprintf:
  1543                           	opt stack 0
  1544                           tblptru	equ	0xFF8
  1545                           tblptrh	equ	0xFF7
  1546                           tblptrl	equ	0xFF6
  1547                           tablat	equ	0xFF5
  1548                           prodh	equ	0xFF4
  1549                           prodl	equ	0xFF3
  1550                           postinc0	equ	0xFEE
  1551                           wreg	equ	0xFE8
  1552                           postdec1	equ	0xFE5
  1553                           plusw1	equ	0xFE3
  1554                           fsr1l	equ	0xFE1
  1555                           indf2	equ	0xFDF
  1556                           postinc2	equ	0xFDE
  1557                           postdec2	equ	0xFDD
  1558                           plusw2	equ	0xFDB
  1559                           fsr2h	equ	0xFDA
  1560                           fsr2l	equ	0xFD9
  1561                           status	equ	0xFD8
  1562                           
  1563 ;; *************** function _isdigit *****************
  1564 ;; Defined at:
  1565 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;  c               1    wreg     unsigned char 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  c               1    2[COMRAM] unsigned char 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;		None               void
  1572 ;; Registers used:
  1573 ;;		wreg, status,2, status,0
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1579 ;;      Params:         0       0       0       0       0       0       0       0       0
  1580 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1581 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1582 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1583 ;;Total ram usage:        3 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_sprintf
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           	psect	text3
  1593  0066AE                     __ptext3:
  1594                           	opt stack 0
  1595  0066AE                     _isdigit:
  1596                           	opt stack 28
  1597                           
  1598                           ;incstack = 0
  1599                           ;isdigit@c stored from wreg
  1600  0066AE  6E03               	movwf	isdigit@c,c
  1601  0066B0  0E00               	movlw	0
  1602  0066B2  6E02               	movwf	_isdigit$385,c
  1603  0066B4  0E3A               	movlw	58
  1604  0066B6  6003               	cpfslt	isdigit@c,c
  1605  0066B8  D005               	goto	l473
  1606  0066BA  0E2F               	movlw	47
  1607  0066BC  6403               	cpfsgt	isdigit@c,c
  1608  0066BE  D002               	goto	l473
  1609  0066C0  0E01               	movlw	1
  1610  0066C2  6E02               	movwf	_isdigit$385,c
  1611  0066C4                     l473:
  1612  0066C4  C002  F001         	movff	_isdigit$385,??_isdigit
  1613  0066C8  3001               	rrcf	??_isdigit,w,c
  1614  0066CA  0012               	return	
  1615  0066CC                     __end_of_isdigit:
  1616                           	opt stack 0
  1617                           tblptru	equ	0xFF8
  1618                           tblptrh	equ	0xFF7
  1619                           tblptrl	equ	0xFF6
  1620                           tablat	equ	0xFF5
  1621                           prodh	equ	0xFF4
  1622                           prodl	equ	0xFF3
  1623                           postinc0	equ	0xFEE
  1624                           wreg	equ	0xFE8
  1625                           postdec1	equ	0xFE5
  1626                           plusw1	equ	0xFE3
  1627                           fsr1l	equ	0xFE1
  1628                           indf2	equ	0xFDF
  1629                           postinc2	equ	0xFDE
  1630                           postdec2	equ	0xFDD
  1631                           plusw2	equ	0xFDB
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function ___wmul *****************
  1637 ;; Defined at:
  1638 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;  multiplier      2    0[COMRAM] unsigned int 
  1641 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  product         2    4[COMRAM] unsigned int 
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  2    0[COMRAM] unsigned int 
  1646 ;; Registers used:
  1647 ;;		wreg, status,2, status,0, prodl, prodh
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1653 ;;      Params:         4       0       0       0       0       0       0       0       0
  1654 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1656 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1657 ;;Total ram usage:        6 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_sprintf
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text4
  1667  0066EC                     __ptext4:
  1668                           	opt stack 0
  1669  0066EC                     ___wmul:
  1670                           	opt stack 28
  1671                           
  1672                           ;incstack = 0
  1673  0066EC  5001               	movf	___wmul@multiplier,w,c
  1674  0066EE  0203               	mulwf	___wmul@multiplicand,c
  1675  0066F0  CFF3 F005          	movff	prodl,___wmul@product
  1676  0066F4  CFF4 F006          	movff	prodh,___wmul@product+1
  1677  0066F8  5001               	movf	___wmul@multiplier,w,c
  1678  0066FA  0204               	mulwf	___wmul@multiplicand+1,c
  1679  0066FC  50F3               	movf	prodl,w,c
  1680  0066FE  2606               	addwf	___wmul@product+1,f,c
  1681  006700  5002               	movf	___wmul@multiplier+1,w,c
  1682  006702  0203               	mulwf	___wmul@multiplicand,c
  1683  006704  50F3               	movf	prodl,w,c
  1684  006706  2606               	addwf	___wmul@product+1,f,c
  1685  006708  C005  F001         	movff	___wmul@product,?___wmul
  1686  00670C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1687  006710  0012               	return	
  1688  006712                     __end_of___wmul:
  1689                           	opt stack 0
  1690                           tblptru	equ	0xFF8
  1691                           tblptrh	equ	0xFF7
  1692                           tblptrl	equ	0xFF6
  1693                           tablat	equ	0xFF5
  1694                           prodh	equ	0xFF4
  1695                           prodl	equ	0xFF3
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           plusw1	equ	0xFE3
  1700                           fsr1l	equ	0xFE1
  1701                           indf2	equ	0xFDF
  1702                           postinc2	equ	0xFDE
  1703                           postdec2	equ	0xFDD
  1704                           plusw2	equ	0xFDB
  1705                           fsr2h	equ	0xFDA
  1706                           fsr2l	equ	0xFD9
  1707                           status	equ	0xFD8
  1708                           
  1709 ;; *************** function ___lwdiv *****************
  1710 ;; Defined at:
  1711 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;  dividend        2    0[COMRAM] unsigned int 
  1714 ;;  divisor         2    2[COMRAM] unsigned int 
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;  quotient        2    4[COMRAM] unsigned int 
  1717 ;;  counter         1    6[COMRAM] unsigned char 
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  2    0[COMRAM] unsigned int 
  1720 ;; Registers used:
  1721 ;;		wreg, status,2, status,0
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1727 ;;      Params:         4       0       0       0       0       0       0       0       0
  1728 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1729 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1730 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1731 ;;Total ram usage:        7 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; This function calls:
  1734 ;;		Nothing
  1735 ;; This function is called by:
  1736 ;;		_sprintf
  1737 ;; This function uses a non-reentrant model
  1738 ;;
  1739                           
  1740                           	psect	text5
  1741  00685C                     __ptext5:
  1742                           	opt stack 0
  1743  00685C                     ___lwdiv:
  1744                           	opt stack 28
  1745                           
  1746                           ;incstack = 0
  1747  00685C  0E00               	movlw	0
  1748  00685E  6E06               	movwf	___lwdiv@quotient+1,c
  1749  006860  0E00               	movlw	0
  1750  006862  6E05               	movwf	___lwdiv@quotient,c
  1751  006864  5003               	movf	___lwdiv@divisor,w,c
  1752  006866  1004               	iorwf	___lwdiv@divisor+1,w,c
  1753  006868  B4D8               	btfsc	status,2,c
  1754  00686A  D01C               	goto	l557
  1755  00686C  0E01               	movlw	1
  1756  00686E  6E07               	movwf	___lwdiv@counter,c
  1757  006870  D004               	goto	l552
  1758  006872  90D8               	bcf	status,0,c
  1759  006874  3603               	rlcf	___lwdiv@divisor,f,c
  1760  006876  3604               	rlcf	___lwdiv@divisor+1,f,c
  1761  006878  2A07               	incf	___lwdiv@counter,f,c
  1762  00687A                     l552:
  1763  00687A  AE04               	btfss	___lwdiv@divisor+1,7,c
  1764  00687C  D7FA               	goto	l553
  1765  00687E                     u1060:
  1766  00687E  90D8               	bcf	status,0,c
  1767  006880  3605               	rlcf	___lwdiv@quotient,f,c
  1768  006882  3606               	rlcf	___lwdiv@quotient+1,f,c
  1769  006884  5003               	movf	___lwdiv@divisor,w,c
  1770  006886  5C01               	subwf	___lwdiv@dividend,w,c
  1771  006888  5004               	movf	___lwdiv@divisor+1,w,c
  1772  00688A  5802               	subwfb	___lwdiv@dividend+1,w,c
  1773  00688C  A0D8               	btfss	status,0,c
  1774  00688E  D005               	goto	l556
  1775  006890  5003               	movf	___lwdiv@divisor,w,c
  1776  006892  5E01               	subwf	___lwdiv@dividend,f,c
  1777  006894  5004               	movf	___lwdiv@divisor+1,w,c
  1778  006896  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1779  006898  8005               	bsf	___lwdiv@quotient,0,c
  1780  00689A                     l556:
  1781  00689A  90D8               	bcf	status,0,c
  1782  00689C  3204               	rrcf	___lwdiv@divisor+1,f,c
  1783  00689E  3203               	rrcf	___lwdiv@divisor,f,c
  1784  0068A0  2E07               	decfsz	___lwdiv@counter,f,c
  1785  0068A2  D7ED               	goto	u1060
  1786  0068A4                     l557:
  1787  0068A4  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1788  0068A8  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1789  0068AC  0012               	return		;funcret
  1790  0068AE                     __end_of___lwdiv:
  1791                           	opt stack 0
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           prodh	equ	0xFF4
  1797                           prodl	equ	0xFF3
  1798                           postinc0	equ	0xFEE
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           plusw1	equ	0xFE3
  1802                           fsr1l	equ	0xFE1
  1803                           indf2	equ	0xFDF
  1804                           postinc2	equ	0xFDE
  1805                           postdec2	equ	0xFDD
  1806                           plusw2	equ	0xFDB
  1807                           fsr2h	equ	0xFDA
  1808                           fsr2l	equ	0xFD9
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function _calc_sha_256 *****************
  1812 ;; Defined at:
  1813 ;;		line 260 in file "main.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  hash            2   25[COMRAM] PTR unsigned char 
  1816 ;;		 -> main@hash(32), 
  1817 ;;  input           2   27[COMRAM] PTR const unsigned char 
  1818 ;;		 -> string(16), 
  1819 ;;  length          2   29[COMRAM] unsigned int 
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;  temp1           4  124[BANK0 ] const unsigned long 
  1822 ;;  temp2           4  120[BANK0 ] const unsigned long 
  1823 ;;  maj             4  116[BANK0 ] const unsigned long 
  1824 ;;  s0              4  112[BANK0 ] const unsigned long 
  1825 ;;  ch              4  108[BANK0 ] const unsigned long 
  1826 ;;  s1              4  104[BANK0 ] const unsigned long 
  1827 ;;  s1              4  100[BANK0 ] const unsigned long 
  1828 ;;  s0              4   96[BANK0 ] const unsigned long 
  1829 ;;  word          256    0[BANK1 ] unsigned long [64]
  1830 ;;  aux_hash       32    0[BANK2 ] unsigned long [8]
  1831 ;;  pointer         2  128[BANK0 ] PTR const unsigned char 
  1832 ;;		 -> calc_sha_256@chunk(64), 
  1833 ;;  chunk          64    0[BANK0 ] unsigned char [64]
  1834 ;;  h              32   64[BANK0 ] unsigned long [8]
  1835 ;;  state          10  130[BANK0 ] struct buffer_state
  1836 ;;  i               2  140[BANK0 ] int 
  1837 ;;  j               2   61[COMRAM] int 
  1838 ;; Return value:  Size  Location     Type
  1839 ;;                  1    wreg      void 
  1840 ;; Registers used:
  1841 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1842 ;; Tracked objects:
  1843 ;;		On entry : 0/0
  1844 ;;		On exit  : 0/0
  1845 ;;		Unchanged: 0/0
  1846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1847 ;;      Params:         6       0       0       0       0       0       0       0       0
  1848 ;;      Locals:         2     142     256      32       0       0       0       0       0
  1849 ;;      Temps:         30       0       0       0       0       0       0       0       0
  1850 ;;      Totals:        38     142     256      32       0       0       0       0       0
  1851 ;;Total ram usage:      468 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; Hardware stack levels required when called:    2
  1854 ;; This function calls:
  1855 ;;		_calc_chunk
  1856 ;;		_init_buf_state
  1857 ;;		_memset
  1858 ;;		_rotate_right
  1859 ;; This function is called by:
  1860 ;;		_main
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text6
  1865  0073B2                     __ptext6:
  1866                           	opt stack 0
  1867  0073B2                     _calc_sha_256:
  1868                           	opt stack 28
  1869                           
  1870                           ;main.c: 264: uint32_t h[] = { 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527
      +                          f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 };
  1871                           
  1872                           ;incstack = 0
  1873  0073B2  EE20  F040         	lfsr	2,calc_sha_256@F4125
  1874  0073B6  EE10  F0A0         	lfsr	1,calc_sha_256@h
  1875  0073BA  0E1F               	movlw	31
  1876  0073BC                     u1711:
  1877  0073BC  CFDB FFE3          	movff	plusw2,plusw1
  1878  0073C0  06E8               	decf	wreg,f,c
  1879  0073C2  E2FC               	bc	u1711
  1880                           
  1881                           ;main.c: 265: int i;
  1882                           ;main.c: 266: int j;
  1883                           ;main.c: 269: uint8_t chunk[64];
  1884                           ;main.c: 271: struct buffer_state state;
  1885                           ;main.c: 273: init_buf_state(&state, input, length);
  1886  0073C4  0EE2               	movlw	low calc_sha_256@state
  1887  0073C6  6E01               	movwf	init_buf_state@state,c
  1888  0073C8  0E00               	movlw	high calc_sha_256@state
  1889  0073CA  6E02               	movwf	init_buf_state@state+1,c
  1890  0073CC  C01C  F003         	movff	calc_sha_256@input,init_buf_state@input
  1891  0073D0  C01D  F004         	movff	calc_sha_256@input+1,init_buf_state@input+1
  1892  0073D4  C01E  F005         	movff	calc_sha_256@length,init_buf_state@length
  1893  0073D8  C01F  F006         	movff	calc_sha_256@length+1,init_buf_state@length+1
  1894  0073DC  EC57  F034         	call	_init_buf_state	;wreg free
  1895                           
  1896                           ;main.c: 275: while (calc_chunk(chunk, &state)) {
  1897  0073E0  EF9D  F03E         	goto	u1780
  1898  0073E4                     
  1899                           ;main.c: 276: uint32_t aux_hash[8];
  1900                           ;main.c: 280: uint32_t word[64];
  1901                           ;main.c: 281: const uint8_t *pointer = chunk;
  1902  0073E4  0E60               	movlw	low calc_sha_256@chunk
  1903  0073E6  0100               	movlb	0	; () banked
  1904  0073E8  6FE0               	movwf	calc_sha_256@pointer& (0+255),b
  1905  0073EA  0E00               	movlw	high calc_sha_256@chunk
  1906  0073EC  6FE1               	movwf	(calc_sha_256@pointer+1)& (0+255),b
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;main.c: 283: memset(word, 0x00, sizeof word);
  1910  0073EE  0E00               	movlw	low calc_sha_256@word
  1911  0073F0  6E01               	movwf	memset@p1,c
  1912  0073F2  0E01               	movlw	high calc_sha_256@word
  1913  0073F4  6E02               	movwf	memset@p1+1,c
  1914  0073F6  0E00               	movlw	0
  1915  0073F8  6E04               	movwf	memset@c+1,c
  1916  0073FA  0E00               	movlw	0
  1917  0073FC  6E03               	movwf	memset@c,c
  1918  0073FE  0E01               	movlw	1
  1919  007400  6E06               	movwf	memset@n+1,c
  1920  007402  0E00               	movlw	0
  1921  007404  6E05               	movwf	memset@n,c
  1922  007406  EC89  F033         	call	_memset	;wreg free
  1923                           
  1924                           ;main.c: 284: i=0;
  1925  00740A  0E00               	movlw	0
  1926  00740C  0100               	movlb	0	; () banked
  1927  00740E  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  1928  007410  0E00               	movlw	0
  1929  007412  6FEC               	movwf	calc_sha_256@i& (0+255),b
  1930                           
  1931                           ;main.c: 285: while(i < 16){
  1932  007414  D07E               	goto	l62
  1933  007416                     
  1934                           ; BSR set to: 0
  1935                           ;main.c: 286: word[i] = (uint32_t) pointer[0] << 24 | (uint32_t) pointer[1] << 16 |
  1936                           ;main.c: 287: (uint32_t) pointer[2] << 8 | (uint32_t) pointer[3];
  1937                           
  1938                           ; BSR set to: 0
  1939  007416  EE20 F002          	lfsr	2,2
  1940  00741A  51E0               	movf	calc_sha_256@pointer& (0+255),w,b
  1941  00741C  26D9               	addwf	fsr2l,f,c
  1942  00741E  51E1               	movf	(calc_sha_256@pointer+1)& (0+255),w,b
  1943  007420  22DA               	addwfc	fsr2h,f,c
  1944  007422  50DF               	movf	indf2,w,c
  1945  007424  6E20               	movwf	??_calc_sha_256& (0+255),c
  1946  007426  C020  F021         	movff	??_calc_sha_256,??_calc_sha_256+1
  1947  00742A  6A22               	clrf	(??_calc_sha_256+2)& (0+255),c
  1948  00742C  6A23               	clrf	(??_calc_sha_256+3)& (0+255),c
  1949  00742E  6A24               	clrf	(??_calc_sha_256+4)& (0+255),c
  1950  007430  C023  F024         	movff	??_calc_sha_256+3,??_calc_sha_256+4
  1951  007434  C022  F023         	movff	??_calc_sha_256+2,??_calc_sha_256+3
  1952  007438  C021  F022         	movff	??_calc_sha_256+1,??_calc_sha_256+2
  1953  00743C  6A21               	clrf	??_calc_sha_256+1,c
  1954  00743E  EE20 F001          	lfsr	2,1
  1955  007442  51E0               	movf	calc_sha_256@pointer& (0+255),w,b
  1956  007444  26D9               	addwf	fsr2l,f,c
  1957  007446  51E1               	movf	(calc_sha_256@pointer+1)& (0+255),w,b
  1958  007448  22DA               	addwfc	fsr2h,f,c
  1959  00744A  50DF               	movf	indf2,w,c
  1960  00744C  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  1961  00744E  C025  F026         	movff	??_calc_sha_256+5,??_calc_sha_256+6
  1962  007452  6A27               	clrf	(??_calc_sha_256+7)& (0+255),c
  1963  007454  6A28               	clrf	(??_calc_sha_256+8)& (0+255),c
  1964  007456  6A29               	clrf	(??_calc_sha_256+9)& (0+255),c
  1965  007458  C027  F029         	movff	??_calc_sha_256+7,??_calc_sha_256+9
  1966  00745C  C026  F028         	movff	??_calc_sha_256+6,??_calc_sha_256+8
  1967  007460  6A27               	clrf	??_calc_sha_256+7,c
  1968  007462  6A26               	clrf	??_calc_sha_256+6,c
  1969  007464  C0E0  FFD9         	movff	calc_sha_256@pointer,fsr2l
  1970  007468  C0E1  FFDA         	movff	calc_sha_256@pointer+1,fsr2h
  1971  00746C  50DF               	movf	indf2,w,c
  1972  00746E  6E2A               	movwf	(??_calc_sha_256+10)& (0+255),c
  1973  007470  C02A  F02B         	movff	??_calc_sha_256+10,??_calc_sha_256+11
  1974  007474  6A2C               	clrf	(??_calc_sha_256+12)& (0+255),c
  1975  007476  6A2D               	clrf	(??_calc_sha_256+13)& (0+255),c
  1976  007478  6A2E               	clrf	(??_calc_sha_256+14)& (0+255),c
  1977  00747A  C02B  F02E         	movff	??_calc_sha_256+11,??_calc_sha_256+14
  1978  00747E  6A2D               	clrf	??_calc_sha_256+13,c
  1979  007480  6A2C               	clrf	??_calc_sha_256+12,c
  1980  007482  6A2B               	clrf	??_calc_sha_256+11,c
  1981  007484  5026               	movf	??_calc_sha_256+6,w,c
  1982  007486  102B               	iorwf	??_calc_sha_256+11,w,c
  1983  007488  6E2F               	movwf	(??_calc_sha_256+15)& (0+255),c
  1984  00748A  5027               	movf	??_calc_sha_256+7,w,c
  1985  00748C  102C               	iorwf	??_calc_sha_256+12,w,c
  1986  00748E  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  1987  007490  5028               	movf	??_calc_sha_256+8,w,c
  1988  007492  102D               	iorwf	??_calc_sha_256+13,w,c
  1989  007494  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  1990  007496  5029               	movf	??_calc_sha_256+9,w,c
  1991  007498  102E               	iorwf	??_calc_sha_256+14,w,c
  1992  00749A  6E32               	movwf	(??_calc_sha_256+18)& (0+255),c
  1993  00749C  5021               	movf	??_calc_sha_256+1,w,c
  1994  00749E  102F               	iorwf	??_calc_sha_256+15,w,c
  1995  0074A0  6E33               	movwf	(??_calc_sha_256+19)& (0+255),c
  1996  0074A2  5022               	movf	??_calc_sha_256+2,w,c
  1997  0074A4  1030               	iorwf	??_calc_sha_256+16,w,c
  1998  0074A6  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  1999  0074A8  5023               	movf	??_calc_sha_256+3,w,c
  2000  0074AA  1031               	iorwf	??_calc_sha_256+17,w,c
  2001  0074AC  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2002  0074AE  5024               	movf	??_calc_sha_256+4,w,c
  2003  0074B0  1032               	iorwf	??_calc_sha_256+18,w,c
  2004  0074B2  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2005  0074B4  EE20 F003          	lfsr	2,3
  2006  0074B8  51E0               	movf	calc_sha_256@pointer& (0+255),w,b
  2007  0074BA  26D9               	addwf	fsr2l,f,c
  2008  0074BC  51E1               	movf	(calc_sha_256@pointer+1)& (0+255),w,b
  2009  0074BE  22DA               	addwfc	fsr2h,f,c
  2010  0074C0  50DF               	movf	indf2,w,c
  2011  0074C2  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2012  0074C4  5037               	movf	??_calc_sha_256+23,w,c
  2013  0074C6  1033               	iorwf	??_calc_sha_256+19,w,c
  2014  0074C8  6E38               	movwf	(??_calc_sha_256+24)& (0+255),c
  2015  0074CA  5034               	movf	??_calc_sha_256+20,w,c
  2016  0074CC  6E39               	movwf	(??_calc_sha_256+25)& (0+255),c
  2017  0074CE  5035               	movf	??_calc_sha_256+21,w,c
  2018  0074D0  6E3A               	movwf	(??_calc_sha_256+26)& (0+255),c
  2019  0074D2  5036               	movf	??_calc_sha_256+22,w,c
  2020  0074D4  6E3B               	movwf	(??_calc_sha_256+27)& (0+255),c
  2021  0074D6  0E00               	movlw	low calc_sha_256@word
  2022  0074D8  6E3C               	movwf	(??_calc_sha_256+28)& (0+255),c
  2023  0074DA  0E01               	movlw	high calc_sha_256@word
  2024  0074DC  6E3D               	movwf	(??_calc_sha_256+29)& (0+255),c
  2025  0074DE  90D8               	bcf	status,0,c
  2026  0074E0  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2027  0074E2  6ED9               	movwf	fsr2l,c
  2028  0074E4  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2029  0074E6  6EDA               	movwf	fsr2h,c
  2030  0074E8  90D8               	bcf	status,0,c
  2031  0074EA  36D9               	rlcf	fsr2l,f,c
  2032  0074EC  36DA               	rlcf	fsr2h,f,c
  2033  0074EE  503C               	movf	??_calc_sha_256+28,w,c
  2034  0074F0  26D9               	addwf	fsr2l,f,c
  2035  0074F2  503D               	movf	??_calc_sha_256+29,w,c
  2036  0074F4  22DA               	addwfc	fsr2h,f,c
  2037  0074F6  C038  FFDE         	movff	??_calc_sha_256+24,postinc2
  2038  0074FA  C039  FFDE         	movff	??_calc_sha_256+25,postinc2
  2039  0074FE  C03A  FFDE         	movff	??_calc_sha_256+26,postinc2
  2040  007502  C03B  FFDE         	movff	??_calc_sha_256+27,postinc2
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;main.c: 288: pointer += 4;
  2044  007506  0E04               	movlw	4
  2045  007508  27E0               	addwf	calc_sha_256@pointer& (0+255),f,b
  2046  00750A  0E00               	movlw	0
  2047  00750C  23E1               	addwfc	(calc_sha_256@pointer+1)& (0+255),f,b
  2048                           
  2049                           ; BSR set to: 0
  2050                           ;main.c: 289: i++;
  2051  00750E  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  2052  007510  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  2053  007512                     l62:
  2054                           
  2055                           ; BSR set to: 0
  2056                           
  2057                           ; BSR set to: 0
  2058  007512  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2059  007514  D780               	goto	l63
  2060  007516  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2061  007518  E104               	bnz	l1890
  2062  00751A  0E10               	movlw	16
  2063  00751C  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  2064  00751E  A0D8               	btfss	status,0,c
  2065  007520  D77A               	goto	l63
  2066  007522                     l1890:
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;main.c: 290: }
  2070                           ;main.c: 293: i = 16;
  2071  007522  0E00               	movlw	0
  2072  007524  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  2073  007526  0E10               	movlw	16
  2074  007528  6FEC               	movwf	calc_sha_256@i& (0+255),b
  2075                           
  2076                           ;main.c: 294: while(i < 64){
  2077  00752A  D1AA               	goto	l65
  2078  00752C                     
  2079                           ; BSR set to: 0
  2080                           ;main.c: 295: const uint32_t s0 = rotate_right(word[i - 15], 7) ^ rotate_right(word[i - 
      +                          15], 18) ^ (word[i - 15] >> 3);
  2081                           
  2082                           ; BSR set to: 0
  2083  00752C  0EC4               	movlw	196
  2084  00752E  6E20               	movwf	??_calc_sha_256& (0+255),c
  2085  007530  0EFF               	movlw	255
  2086  007532  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2087  007534  C0EC  F022         	movff	calc_sha_256@i,??_calc_sha_256+2
  2088  007538  C0ED  F023         	movff	calc_sha_256@i+1,??_calc_sha_256+3
  2089  00753C  90D8               	bcf	status,0,c
  2090  00753E  3622               	rlcf	??_calc_sha_256+2,f,c
  2091  007540  3623               	rlcf	??_calc_sha_256+3,f,c
  2092  007542  90D8               	bcf	status,0,c
  2093  007544  3622               	rlcf	??_calc_sha_256+2,f,c
  2094  007546  3623               	rlcf	??_calc_sha_256+3,f,c
  2095  007548  5020               	movf	??_calc_sha_256,w,c
  2096  00754A  2622               	addwf	??_calc_sha_256+2,f,c
  2097  00754C  5021               	movf	??_calc_sha_256+1,w,c
  2098  00754E  2223               	addwfc	??_calc_sha_256+3,f,c
  2099  007550  0E00               	movlw	low calc_sha_256@word
  2100  007552  2422               	addwf	??_calc_sha_256+2,w,c
  2101  007554  6ED9               	movwf	fsr2l,c
  2102  007556  0E01               	movlw	high calc_sha_256@word
  2103  007558  2023               	addwfc	??_calc_sha_256+3,w,c
  2104  00755A  6EDA               	movwf	fsr2h,c
  2105  00755C  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  2106  007560  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  2107  007564  CFDE F026          	movff	postinc2,??_calc_sha_256+6
  2108  007568  CFDE F027          	movff	postinc2,??_calc_sha_256+7
  2109  00756C  0E04               	movlw	4
  2110  00756E  D005               	goto	u1730
  2111  007570                     u1735:
  2112  007570  90D8               	bcf	status,0,c
  2113  007572  3227               	rrcf	??_calc_sha_256+7,f,c
  2114  007574  3226               	rrcf	??_calc_sha_256+6,f,c
  2115  007576  3225               	rrcf	??_calc_sha_256+5,f,c
  2116  007578  3224               	rrcf	??_calc_sha_256+4,f,c
  2117  00757A                     u1730:
  2118  00757A  2EE8               	decfsz	wreg,f,c
  2119  00757C  D7F9               	goto	u1735
  2120  00757E  0EC4               	movlw	196
  2121  007580  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2122  007582  0EFF               	movlw	255
  2123  007584  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2124  007586  C0EC  F02A         	movff	calc_sha_256@i,??_calc_sha_256+10
  2125  00758A  C0ED  F02B         	movff	calc_sha_256@i+1,??_calc_sha_256+11
  2126  00758E  90D8               	bcf	status,0,c
  2127  007590  362A               	rlcf	??_calc_sha_256+10,f,c
  2128  007592  362B               	rlcf	??_calc_sha_256+11,f,c
  2129  007594  90D8               	bcf	status,0,c
  2130  007596  362A               	rlcf	??_calc_sha_256+10,f,c
  2131  007598  362B               	rlcf	??_calc_sha_256+11,f,c
  2132  00759A  5028               	movf	??_calc_sha_256+8,w,c
  2133  00759C  262A               	addwf	??_calc_sha_256+10,f,c
  2134  00759E  5029               	movf	??_calc_sha_256+9,w,c
  2135  0075A0  222B               	addwfc	??_calc_sha_256+11,f,c
  2136  0075A2  0E00               	movlw	low calc_sha_256@word
  2137  0075A4  242A               	addwf	??_calc_sha_256+10,w,c
  2138  0075A6  6ED9               	movwf	fsr2l,c
  2139  0075A8  0E01               	movlw	high calc_sha_256@word
  2140  0075AA  202B               	addwfc	??_calc_sha_256+11,w,c
  2141  0075AC  6EDA               	movwf	fsr2h,c
  2142  0075AE  CFDE F001          	movff	postinc2,rotate_right@value
  2143  0075B2  CFDE F002          	movff	postinc2,rotate_right@value+1
  2144  0075B6  CFDE F003          	movff	postinc2,rotate_right@value+2
  2145  0075BA  CFDE F004          	movff	postinc2,rotate_right@value+3
  2146  0075BE  0E00               	movlw	0
  2147  0075C0  6E06               	movwf	rotate_right@count+1,c
  2148  0075C2  0E07               	movlw	7
  2149  0075C4  6E05               	movwf	rotate_right@count,c
  2150  0075C6  EC88  F034         	call	_rotate_right	;wreg free
  2151  0075CA  C001  F02C         	movff	?_rotate_right,??_calc_sha_256+12
  2152  0075CE  C002  F02D         	movff	?_rotate_right+1,??_calc_sha_256+13
  2153  0075D2  C003  F02E         	movff	?_rotate_right+2,??_calc_sha_256+14
  2154  0075D6  C004  F02F         	movff	?_rotate_right+3,??_calc_sha_256+15
  2155  0075DA  0EC4               	movlw	196
  2156  0075DC  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2157  0075DE  0EFF               	movlw	255
  2158  0075E0  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2159  0075E2  C0EC  F032         	movff	calc_sha_256@i,??_calc_sha_256+18
  2160  0075E6  C0ED  F033         	movff	calc_sha_256@i+1,??_calc_sha_256+19
  2161  0075EA  90D8               	bcf	status,0,c
  2162  0075EC  3632               	rlcf	??_calc_sha_256+18,f,c
  2163  0075EE  3633               	rlcf	??_calc_sha_256+19,f,c
  2164  0075F0  90D8               	bcf	status,0,c
  2165  0075F2  3632               	rlcf	??_calc_sha_256+18,f,c
  2166  0075F4  3633               	rlcf	??_calc_sha_256+19,f,c
  2167  0075F6  5030               	movf	??_calc_sha_256+16,w,c
  2168  0075F8  2632               	addwf	??_calc_sha_256+18,f,c
  2169  0075FA  5031               	movf	??_calc_sha_256+17,w,c
  2170  0075FC  2233               	addwfc	??_calc_sha_256+19,f,c
  2171  0075FE  0E00               	movlw	low calc_sha_256@word
  2172  007600  2432               	addwf	??_calc_sha_256+18,w,c
  2173  007602  6ED9               	movwf	fsr2l,c
  2174  007604  0E01               	movlw	high calc_sha_256@word
  2175  007606  2033               	addwfc	??_calc_sha_256+19,w,c
  2176  007608  6EDA               	movwf	fsr2h,c
  2177  00760A  CFDE F001          	movff	postinc2,rotate_right@value
  2178  00760E  CFDE F002          	movff	postinc2,rotate_right@value+1
  2179  007612  CFDE F003          	movff	postinc2,rotate_right@value+2
  2180  007616  CFDE F004          	movff	postinc2,rotate_right@value+3
  2181  00761A  0E00               	movlw	0
  2182  00761C  6E06               	movwf	rotate_right@count+1,c
  2183  00761E  0E12               	movlw	18
  2184  007620  6E05               	movwf	rotate_right@count,c
  2185  007622  EC88  F034         	call	_rotate_right	;wreg free
  2186  007626  5001               	movf	?_rotate_right,w,c
  2187  007628  182C               	xorwf	??_calc_sha_256+12,w,c
  2188  00762A  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2189  00762C  5002               	movf	?_rotate_right+1,w,c
  2190  00762E  182D               	xorwf	??_calc_sha_256+13,w,c
  2191  007630  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2192  007632  5003               	movf	?_rotate_right+2,w,c
  2193  007634  182E               	xorwf	??_calc_sha_256+14,w,c
  2194  007636  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2195  007638  5004               	movf	?_rotate_right+3,w,c
  2196  00763A  182F               	xorwf	??_calc_sha_256+15,w,c
  2197  00763C  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2198  00763E  5024               	movf	??_calc_sha_256+4,w,c
  2199  007640  1834               	xorwf	??_calc_sha_256+20,w,c
  2200  007642  0100               	movlb	0	; () banked
  2201  007644  6FC0               	movwf	calc_sha_256@s0& (0+255),b
  2202  007646  5025               	movf	??_calc_sha_256+5,w,c
  2203  007648  1835               	xorwf	??_calc_sha_256+21,w,c
  2204  00764A  6FC1               	movwf	(calc_sha_256@s0+1)& (0+255),b
  2205  00764C  5026               	movf	??_calc_sha_256+6,w,c
  2206  00764E  1836               	xorwf	??_calc_sha_256+22,w,c
  2207  007650  6FC2               	movwf	(calc_sha_256@s0+2)& (0+255),b
  2208  007652  5027               	movf	??_calc_sha_256+7,w,c
  2209  007654  1837               	xorwf	??_calc_sha_256+23,w,c
  2210  007656  6FC3               	movwf	(calc_sha_256@s0+3)& (0+255),b
  2211                           
  2212                           ;main.c: 296: const uint32_t s1 = rotate_right(word[i - 2], 17) ^ rotate_right(word[i - 
      +                          2], 19) ^ (word[i - 2] >> 10);
  2213  007658  0EF8               	movlw	248
  2214  00765A  6E20               	movwf	??_calc_sha_256& (0+255),c
  2215  00765C  0EFF               	movlw	255
  2216  00765E  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2217  007660  C0EC  F022         	movff	calc_sha_256@i,??_calc_sha_256+2
  2218  007664  C0ED  F023         	movff	calc_sha_256@i+1,??_calc_sha_256+3
  2219  007668  90D8               	bcf	status,0,c
  2220  00766A  3622               	rlcf	??_calc_sha_256+2,f,c
  2221  00766C  3623               	rlcf	??_calc_sha_256+3,f,c
  2222  00766E  90D8               	bcf	status,0,c
  2223  007670  3622               	rlcf	??_calc_sha_256+2,f,c
  2224  007672  3623               	rlcf	??_calc_sha_256+3,f,c
  2225  007674  5020               	movf	??_calc_sha_256,w,c
  2226  007676  2622               	addwf	??_calc_sha_256+2,f,c
  2227  007678  5021               	movf	??_calc_sha_256+1,w,c
  2228  00767A  2223               	addwfc	??_calc_sha_256+3,f,c
  2229  00767C  0E00               	movlw	low calc_sha_256@word
  2230  00767E  2422               	addwf	??_calc_sha_256+2,w,c
  2231  007680  6ED9               	movwf	fsr2l,c
  2232  007682  0E01               	movlw	high calc_sha_256@word
  2233  007684  2023               	addwfc	??_calc_sha_256+3,w,c
  2234  007686  6EDA               	movwf	fsr2h,c
  2235  007688  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  2236  00768C  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  2237  007690  CFDE F026          	movff	postinc2,??_calc_sha_256+6
  2238  007694  CFDE F027          	movff	postinc2,??_calc_sha_256+7
  2239  007698  0E0B               	movlw	11
  2240  00769A  D005               	goto	u1740
  2241  00769C                     u1745:
  2242  00769C  90D8               	bcf	status,0,c
  2243  00769E  3227               	rrcf	??_calc_sha_256+7,f,c
  2244  0076A0  3226               	rrcf	??_calc_sha_256+6,f,c
  2245  0076A2  3225               	rrcf	??_calc_sha_256+5,f,c
  2246  0076A4  3224               	rrcf	??_calc_sha_256+4,f,c
  2247  0076A6                     u1740:
  2248  0076A6  2EE8               	decfsz	wreg,f,c
  2249  0076A8  D7F9               	goto	u1745
  2250  0076AA  0EF8               	movlw	248
  2251  0076AC  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2252  0076AE  0EFF               	movlw	255
  2253  0076B0  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2254  0076B2  C0EC  F02A         	movff	calc_sha_256@i,??_calc_sha_256+10
  2255  0076B6  C0ED  F02B         	movff	calc_sha_256@i+1,??_calc_sha_256+11
  2256  0076BA  90D8               	bcf	status,0,c
  2257  0076BC  362A               	rlcf	??_calc_sha_256+10,f,c
  2258  0076BE  362B               	rlcf	??_calc_sha_256+11,f,c
  2259  0076C0  90D8               	bcf	status,0,c
  2260  0076C2  362A               	rlcf	??_calc_sha_256+10,f,c
  2261  0076C4  362B               	rlcf	??_calc_sha_256+11,f,c
  2262  0076C6  5028               	movf	??_calc_sha_256+8,w,c
  2263  0076C8  262A               	addwf	??_calc_sha_256+10,f,c
  2264  0076CA  5029               	movf	??_calc_sha_256+9,w,c
  2265  0076CC  222B               	addwfc	??_calc_sha_256+11,f,c
  2266  0076CE  0E00               	movlw	low calc_sha_256@word
  2267  0076D0  242A               	addwf	??_calc_sha_256+10,w,c
  2268  0076D2  6ED9               	movwf	fsr2l,c
  2269  0076D4  0E01               	movlw	high calc_sha_256@word
  2270  0076D6  202B               	addwfc	??_calc_sha_256+11,w,c
  2271  0076D8  6EDA               	movwf	fsr2h,c
  2272  0076DA  CFDE F001          	movff	postinc2,rotate_right@value
  2273  0076DE  CFDE F002          	movff	postinc2,rotate_right@value+1
  2274  0076E2  CFDE F003          	movff	postinc2,rotate_right@value+2
  2275  0076E6  CFDE F004          	movff	postinc2,rotate_right@value+3
  2276  0076EA  0E00               	movlw	0
  2277  0076EC  6E06               	movwf	rotate_right@count+1,c
  2278  0076EE  0E11               	movlw	17
  2279  0076F0  6E05               	movwf	rotate_right@count,c
  2280  0076F2  EC88  F034         	call	_rotate_right	;wreg free
  2281  0076F6  C001  F02C         	movff	?_rotate_right,??_calc_sha_256+12
  2282  0076FA  C002  F02D         	movff	?_rotate_right+1,??_calc_sha_256+13
  2283  0076FE  C003  F02E         	movff	?_rotate_right+2,??_calc_sha_256+14
  2284  007702  C004  F02F         	movff	?_rotate_right+3,??_calc_sha_256+15
  2285  007706  0EF8               	movlw	248
  2286  007708  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2287  00770A  0EFF               	movlw	255
  2288  00770C  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2289  00770E  C0EC  F032         	movff	calc_sha_256@i,??_calc_sha_256+18
  2290  007712  C0ED  F033         	movff	calc_sha_256@i+1,??_calc_sha_256+19
  2291  007716  90D8               	bcf	status,0,c
  2292  007718  3632               	rlcf	??_calc_sha_256+18,f,c
  2293  00771A  3633               	rlcf	??_calc_sha_256+19,f,c
  2294  00771C  90D8               	bcf	status,0,c
  2295  00771E  3632               	rlcf	??_calc_sha_256+18,f,c
  2296  007720  3633               	rlcf	??_calc_sha_256+19,f,c
  2297  007722  5030               	movf	??_calc_sha_256+16,w,c
  2298  007724  2632               	addwf	??_calc_sha_256+18,f,c
  2299  007726  5031               	movf	??_calc_sha_256+17,w,c
  2300  007728  2233               	addwfc	??_calc_sha_256+19,f,c
  2301  00772A  0E00               	movlw	low calc_sha_256@word
  2302  00772C  2432               	addwf	??_calc_sha_256+18,w,c
  2303  00772E  6ED9               	movwf	fsr2l,c
  2304  007730  0E01               	movlw	high calc_sha_256@word
  2305  007732  2033               	addwfc	??_calc_sha_256+19,w,c
  2306  007734  6EDA               	movwf	fsr2h,c
  2307  007736  CFDE F001          	movff	postinc2,rotate_right@value
  2308  00773A  CFDE F002          	movff	postinc2,rotate_right@value+1
  2309  00773E  CFDE F003          	movff	postinc2,rotate_right@value+2
  2310  007742  CFDE F004          	movff	postinc2,rotate_right@value+3
  2311  007746  0E00               	movlw	0
  2312  007748  6E06               	movwf	rotate_right@count+1,c
  2313  00774A  0E13               	movlw	19
  2314  00774C  6E05               	movwf	rotate_right@count,c
  2315  00774E  EC88  F034         	call	_rotate_right	;wreg free
  2316  007752  5001               	movf	?_rotate_right,w,c
  2317  007754  182C               	xorwf	??_calc_sha_256+12,w,c
  2318  007756  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2319  007758  5002               	movf	?_rotate_right+1,w,c
  2320  00775A  182D               	xorwf	??_calc_sha_256+13,w,c
  2321  00775C  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2322  00775E  5003               	movf	?_rotate_right+2,w,c
  2323  007760  182E               	xorwf	??_calc_sha_256+14,w,c
  2324  007762  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2325  007764  5004               	movf	?_rotate_right+3,w,c
  2326  007766  182F               	xorwf	??_calc_sha_256+15,w,c
  2327  007768  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2328  00776A  5024               	movf	??_calc_sha_256+4,w,c
  2329  00776C  1834               	xorwf	??_calc_sha_256+20,w,c
  2330  00776E  0100               	movlb	0	; () banked
  2331  007770  6FC4               	movwf	calc_sha_256@s1& (0+255),b
  2332  007772  5025               	movf	??_calc_sha_256+5,w,c
  2333  007774  1835               	xorwf	??_calc_sha_256+21,w,c
  2334  007776  6FC5               	movwf	(calc_sha_256@s1+1)& (0+255),b
  2335  007778  5026               	movf	??_calc_sha_256+6,w,c
  2336  00777A  1836               	xorwf	??_calc_sha_256+22,w,c
  2337  00777C  6FC6               	movwf	(calc_sha_256@s1+2)& (0+255),b
  2338  00777E  5027               	movf	??_calc_sha_256+7,w,c
  2339  007780  1837               	xorwf	??_calc_sha_256+23,w,c
  2340  007782  6FC7               	movwf	(calc_sha_256@s1+3)& (0+255),b
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 297: word[i] = word[i - 16] + s0 + word[i - 7] + s1;
  2344  007784  0EE4               	movlw	228
  2345  007786  6E20               	movwf	??_calc_sha_256& (0+255),c
  2346  007788  0EFF               	movlw	255
  2347  00778A  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2348  00778C  C0EC  F022         	movff	calc_sha_256@i,??_calc_sha_256+2
  2349  007790  C0ED  F023         	movff	calc_sha_256@i+1,??_calc_sha_256+3
  2350  007794  90D8               	bcf	status,0,c
  2351  007796  3622               	rlcf	??_calc_sha_256+2,f,c
  2352  007798  3623               	rlcf	??_calc_sha_256+3,f,c
  2353  00779A  90D8               	bcf	status,0,c
  2354  00779C  3622               	rlcf	??_calc_sha_256+2,f,c
  2355  00779E  3623               	rlcf	??_calc_sha_256+3,f,c
  2356  0077A0  5020               	movf	??_calc_sha_256,w,c
  2357  0077A2  2622               	addwf	??_calc_sha_256+2,f,c
  2358  0077A4  5021               	movf	??_calc_sha_256+1,w,c
  2359  0077A6  2223               	addwfc	??_calc_sha_256+3,f,c
  2360  0077A8  0E00               	movlw	low calc_sha_256@word
  2361  0077AA  2422               	addwf	??_calc_sha_256+2,w,c
  2362  0077AC  6ED9               	movwf	fsr2l,c
  2363  0077AE  0E01               	movlw	high calc_sha_256@word
  2364  0077B0  2023               	addwfc	??_calc_sha_256+3,w,c
  2365  0077B2  6EDA               	movwf	fsr2h,c
  2366  0077B4  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  2367  0077B8  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  2368  0077BC  CFDE F026          	movff	postinc2,??_calc_sha_256+6
  2369  0077C0  CFDE F027          	movff	postinc2,??_calc_sha_256+7
  2370  0077C4  0EC0               	movlw	192
  2371  0077C6  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2372  0077C8  0EFF               	movlw	255
  2373  0077CA  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2374  0077CC  C0EC  F02A         	movff	calc_sha_256@i,??_calc_sha_256+10
  2375  0077D0  C0ED  F02B         	movff	calc_sha_256@i+1,??_calc_sha_256+11
  2376  0077D4  90D8               	bcf	status,0,c
  2377  0077D6  362A               	rlcf	??_calc_sha_256+10,f,c
  2378  0077D8  362B               	rlcf	??_calc_sha_256+11,f,c
  2379  0077DA  90D8               	bcf	status,0,c
  2380  0077DC  362A               	rlcf	??_calc_sha_256+10,f,c
  2381  0077DE  362B               	rlcf	??_calc_sha_256+11,f,c
  2382  0077E0  5028               	movf	??_calc_sha_256+8,w,c
  2383  0077E2  262A               	addwf	??_calc_sha_256+10,f,c
  2384  0077E4  5029               	movf	??_calc_sha_256+9,w,c
  2385  0077E6  222B               	addwfc	??_calc_sha_256+11,f,c
  2386  0077E8  0E00               	movlw	low calc_sha_256@word
  2387  0077EA  242A               	addwf	??_calc_sha_256+10,w,c
  2388  0077EC  6ED9               	movwf	fsr2l,c
  2389  0077EE  0E01               	movlw	high calc_sha_256@word
  2390  0077F0  202B               	addwfc	??_calc_sha_256+11,w,c
  2391  0077F2  6EDA               	movwf	fsr2h,c
  2392  0077F4  CFDE F02C          	movff	postinc2,??_calc_sha_256+12
  2393  0077F8  CFDE F02D          	movff	postinc2,??_calc_sha_256+13
  2394  0077FC  CFDE F02E          	movff	postinc2,??_calc_sha_256+14
  2395  007800  CFDE F02F          	movff	postinc2,??_calc_sha_256+15
  2396  007804  5024               	movf	??_calc_sha_256+4,w,c
  2397  007806  242C               	addwf	??_calc_sha_256+12,w,c
  2398  007808  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2399  00780A  5025               	movf	??_calc_sha_256+5,w,c
  2400  00780C  202D               	addwfc	??_calc_sha_256+13,w,c
  2401  00780E  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2402  007810  5026               	movf	??_calc_sha_256+6,w,c
  2403  007812  202E               	addwfc	??_calc_sha_256+14,w,c
  2404  007814  6E32               	movwf	(??_calc_sha_256+18)& (0+255),c
  2405  007816  5027               	movf	??_calc_sha_256+7,w,c
  2406  007818  202F               	addwfc	??_calc_sha_256+15,w,c
  2407  00781A  6E33               	movwf	(??_calc_sha_256+19)& (0+255),c
  2408  00781C  51C0               	movf	calc_sha_256@s0& (0+255),w,b
  2409  00781E  2430               	addwf	??_calc_sha_256+16,w,c
  2410  007820  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2411  007822  51C1               	movf	(calc_sha_256@s0+1)& (0+255),w,b
  2412  007824  2031               	addwfc	??_calc_sha_256+17,w,c
  2413  007826  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2414  007828  51C2               	movf	(calc_sha_256@s0+2)& (0+255),w,b
  2415  00782A  2032               	addwfc	??_calc_sha_256+18,w,c
  2416  00782C  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2417  00782E  51C3               	movf	(calc_sha_256@s0+3)& (0+255),w,b
  2418  007830  2033               	addwfc	??_calc_sha_256+19,w,c
  2419  007832  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2420  007834  51C4               	movf	calc_sha_256@s1& (0+255),w,b
  2421  007836  2434               	addwf	??_calc_sha_256+20,w,c
  2422  007838  6E38               	movwf	(??_calc_sha_256+24)& (0+255),c
  2423  00783A  51C5               	movf	(calc_sha_256@s1+1)& (0+255),w,b
  2424  00783C  2035               	addwfc	??_calc_sha_256+21,w,c
  2425  00783E  6E39               	movwf	(??_calc_sha_256+25)& (0+255),c
  2426  007840  51C6               	movf	(calc_sha_256@s1+2)& (0+255),w,b
  2427  007842  2036               	addwfc	??_calc_sha_256+22,w,c
  2428  007844  6E3A               	movwf	(??_calc_sha_256+26)& (0+255),c
  2429  007846  51C7               	movf	(calc_sha_256@s1+3)& (0+255),w,b
  2430  007848  2037               	addwfc	??_calc_sha_256+23,w,c
  2431  00784A  6E3B               	movwf	(??_calc_sha_256+27)& (0+255),c
  2432  00784C  0E00               	movlw	low calc_sha_256@word
  2433  00784E  6E3C               	movwf	(??_calc_sha_256+28)& (0+255),c
  2434  007850  0E01               	movlw	high calc_sha_256@word
  2435  007852  6E3D               	movwf	(??_calc_sha_256+29)& (0+255),c
  2436  007854  90D8               	bcf	status,0,c
  2437  007856  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2438  007858  6ED9               	movwf	fsr2l,c
  2439  00785A  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2440  00785C  6EDA               	movwf	fsr2h,c
  2441  00785E  90D8               	bcf	status,0,c
  2442  007860  36D9               	rlcf	fsr2l,f,c
  2443  007862  36DA               	rlcf	fsr2h,f,c
  2444  007864  503C               	movf	??_calc_sha_256+28,w,c
  2445  007866  26D9               	addwf	fsr2l,f,c
  2446  007868  503D               	movf	??_calc_sha_256+29,w,c
  2447  00786A  22DA               	addwfc	fsr2h,f,c
  2448  00786C  C038  FFDE         	movff	??_calc_sha_256+24,postinc2
  2449  007870  C039  FFDE         	movff	??_calc_sha_256+25,postinc2
  2450  007874  C03A  FFDE         	movff	??_calc_sha_256+26,postinc2
  2451  007878  C03B  FFDE         	movff	??_calc_sha_256+27,postinc2
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;main.c: 298: i++;
  2455  00787C  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  2456  00787E  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  2457  007880                     l65:
  2458                           
  2459                           ; BSR set to: 0
  2460                           
  2461                           ; BSR set to: 0
  2462  007880  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2463  007882  D654               	goto	l66
  2464  007884  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2465  007886  E104               	bnz	l1900
  2466  007888  0E40               	movlw	64
  2467  00788A  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  2468  00788C  A0D8               	btfss	status,0,c
  2469  00788E  D64E               	goto	l66
  2470  007890                     l1900:
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;main.c: 299: }
  2474                           ;main.c: 302: i = 0;
  2475  007890  0E00               	movlw	0
  2476  007892  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  2477  007894  0E00               	movlw	0
  2478  007896  6FEC               	movwf	calc_sha_256@i& (0+255),b
  2479                           
  2480                           ;main.c: 303: while(i < 8){
  2481  007898  D02A               	goto	l68
  2482  00789A                     
  2483                           ; BSR set to: 0
  2484                           ;main.c: 304: aux_hash[i] = h[i];
  2485                           
  2486                           ; BSR set to: 0
  2487  00789A  0EA0               	movlw	low calc_sha_256@h
  2488  00789C  6E20               	movwf	??_calc_sha_256& (0+255),c
  2489  00789E  0E00               	movlw	high calc_sha_256@h
  2490  0078A0  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2491  0078A2  90D8               	bcf	status,0,c
  2492  0078A4  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2493  0078A6  6ED9               	movwf	fsr2l,c
  2494  0078A8  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2495  0078AA  6EDA               	movwf	fsr2h,c
  2496  0078AC  90D8               	bcf	status,0,c
  2497  0078AE  36D9               	rlcf	fsr2l,f,c
  2498  0078B0  36DA               	rlcf	fsr2h,f,c
  2499  0078B2  5020               	movf	??_calc_sha_256,w,c
  2500  0078B4  26D9               	addwf	fsr2l,f,c
  2501  0078B6  5021               	movf	??_calc_sha_256+1,w,c
  2502  0078B8  22DA               	addwfc	fsr2h,f,c
  2503  0078BA  0E00               	movlw	low calc_sha_256@aux_hash
  2504  0078BC  6E22               	movwf	(??_calc_sha_256+2)& (0+255),c
  2505  0078BE  0E02               	movlw	high calc_sha_256@aux_hash
  2506  0078C0  6E23               	movwf	(??_calc_sha_256+3)& (0+255),c
  2507  0078C2  90D8               	bcf	status,0,c
  2508  0078C4  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2509  0078C6  6EE1               	movwf	fsr1l,c
  2510  0078C8  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2511  0078CA  6EE2               	movwf	fsr1h,c
  2512  0078CC  90D8               	bcf	status,0,c
  2513  0078CE  36E1               	rlcf	fsr1l,f,c
  2514  0078D0  36E2               	rlcf	fsr1h,f,c
  2515  0078D2  5022               	movf	??_calc_sha_256+2,w,c
  2516  0078D4  26E1               	addwf	fsr1l,f,c
  2517  0078D6  5023               	movf	??_calc_sha_256+3,w,c
  2518  0078D8  22E2               	addwfc	fsr1h,f,c
  2519  0078DA  CFDE FFE6          	movff	postinc2,postinc1
  2520  0078DE  CFDE FFE6          	movff	postinc2,postinc1
  2521  0078E2  CFDE FFE6          	movff	postinc2,postinc1
  2522  0078E6  CFDE FFE6          	movff	postinc2,postinc1
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;main.c: 305: i++;
  2526  0078EA  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  2527  0078EC  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  2528  0078EE                     l68:
  2529                           
  2530                           ; BSR set to: 0
  2531                           
  2532                           ; BSR set to: 0
  2533  0078EE  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2534  0078F0  D7D4               	goto	l69
  2535  0078F2  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2536  0078F4  E104               	bnz	l1908
  2537  0078F6  0E08               	movlw	8
  2538  0078F8  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  2539  0078FA  A0D8               	btfss	status,0,c
  2540  0078FC  D7CE               	goto	l69
  2541  0078FE                     l1908:
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;main.c: 306: }
  2545                           ;main.c: 309: i = 0;
  2546  0078FE  0E00               	movlw	0
  2547  007900  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  2548  007902  0E00               	movlw	0
  2549  007904  6FEC               	movwf	calc_sha_256@i& (0+255),b
  2550                           
  2551                           ;main.c: 310: while(i < 64) {
  2552  007906  D1D2               	goto	l71
  2553  007908                     
  2554                           ; BSR set to: 0
  2555                           ;main.c: 311: const uint32_t s1 = rotate_right(aux_hash[4], 6) ^ rotate_right(aux_hash[4
      +                          ], 11) ^ rotate_right(aux_hash[4], 25);
  2556                           
  2557                           ; BSR set to: 0
  2558  007908  C210  F001         	movff	calc_sha_256@aux_hash+16,rotate_right@value
  2559  00790C  C211  F002         	movff	calc_sha_256@aux_hash+17,rotate_right@value+1
  2560  007910  C212  F003         	movff	calc_sha_256@aux_hash+18,rotate_right@value+2
  2561  007914  C213  F004         	movff	calc_sha_256@aux_hash+19,rotate_right@value+3
  2562  007918  0E00               	movlw	0
  2563  00791A  6E06               	movwf	rotate_right@count+1,c
  2564  00791C  0E06               	movlw	6
  2565  00791E  6E05               	movwf	rotate_right@count,c
  2566  007920  EC88  F034         	call	_rotate_right	;wreg free
  2567  007924  C001  F020         	movff	?_rotate_right,??_calc_sha_256
  2568  007928  C002  F021         	movff	?_rotate_right+1,??_calc_sha_256+1
  2569  00792C  C003  F022         	movff	?_rotate_right+2,??_calc_sha_256+2
  2570  007930  C004  F023         	movff	?_rotate_right+3,??_calc_sha_256+3
  2571  007934  C210  F001         	movff	calc_sha_256@aux_hash+16,rotate_right@value
  2572  007938  C211  F002         	movff	calc_sha_256@aux_hash+17,rotate_right@value+1
  2573  00793C  C212  F003         	movff	calc_sha_256@aux_hash+18,rotate_right@value+2
  2574  007940  C213  F004         	movff	calc_sha_256@aux_hash+19,rotate_right@value+3
  2575  007944  0E00               	movlw	0
  2576  007946  6E06               	movwf	rotate_right@count+1,c
  2577  007948  0E0B               	movlw	11
  2578  00794A  6E05               	movwf	rotate_right@count,c
  2579  00794C  EC88  F034         	call	_rotate_right	;wreg free
  2580  007950  5001               	movf	?_rotate_right,w,c
  2581  007952  1820               	xorwf	??_calc_sha_256,w,c
  2582  007954  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  2583  007956  5002               	movf	?_rotate_right+1,w,c
  2584  007958  1821               	xorwf	??_calc_sha_256+1,w,c
  2585  00795A  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  2586  00795C  5003               	movf	?_rotate_right+2,w,c
  2587  00795E  1822               	xorwf	??_calc_sha_256+2,w,c
  2588  007960  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  2589  007962  5004               	movf	?_rotate_right+3,w,c
  2590  007964  1823               	xorwf	??_calc_sha_256+3,w,c
  2591  007966  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  2592  007968  C210  F001         	movff	calc_sha_256@aux_hash+16,rotate_right@value
  2593  00796C  C211  F002         	movff	calc_sha_256@aux_hash+17,rotate_right@value+1
  2594  007970  C212  F003         	movff	calc_sha_256@aux_hash+18,rotate_right@value+2
  2595  007974  C213  F004         	movff	calc_sha_256@aux_hash+19,rotate_right@value+3
  2596  007978  0E00               	movlw	0
  2597  00797A  6E06               	movwf	rotate_right@count+1,c
  2598  00797C  0E19               	movlw	25
  2599  00797E  6E05               	movwf	rotate_right@count,c
  2600  007980  EC88  F034         	call	_rotate_right	;wreg free
  2601  007984  5001               	movf	?_rotate_right,w,c
  2602  007986  1824               	xorwf	??_calc_sha_256+4,w,c
  2603  007988  0100               	movlb	0	; () banked
  2604  00798A  6FC8               	movwf	calc_sha_256@s1_110& (0+255),b
  2605  00798C  5002               	movf	?_rotate_right+1,w,c
  2606  00798E  1825               	xorwf	??_calc_sha_256+5,w,c
  2607  007990  6FC9               	movwf	(calc_sha_256@s1_110+1)& (0+255),b
  2608  007992  5003               	movf	?_rotate_right+2,w,c
  2609  007994  1826               	xorwf	??_calc_sha_256+6,w,c
  2610  007996  6FCA               	movwf	(calc_sha_256@s1_110+2)& (0+255),b
  2611  007998  5004               	movf	?_rotate_right+3,w,c
  2612  00799A  1827               	xorwf	??_calc_sha_256+7,w,c
  2613  00799C  6FCB               	movwf	(calc_sha_256@s1_110+3)& (0+255),b
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 312: const uint32_t ch = (aux_hash[4] & aux_hash[5]) ^ (~aux_hash[4] & aux_hash
      +                          [6]);
  2617  00799E  C210  F020         	movff	calc_sha_256@aux_hash+16,??_calc_sha_256
  2618  0079A2  C211  F021         	movff	calc_sha_256@aux_hash+17,??_calc_sha_256+1
  2619  0079A6  C212  F022         	movff	calc_sha_256@aux_hash+18,??_calc_sha_256+2
  2620  0079AA  C213  F023         	movff	calc_sha_256@aux_hash+19,??_calc_sha_256+3
  2621  0079AE  1E20               	comf	??_calc_sha_256,f,c
  2622  0079B0  1E21               	comf	??_calc_sha_256+1,f,c
  2623  0079B2  1E22               	comf	??_calc_sha_256+2,f,c
  2624  0079B4  1E23               	comf	??_calc_sha_256+3,f,c
  2625  0079B6  0102               	movlb	2	; () banked
  2626  0079B8  5118               	movf	(calc_sha_256@aux_hash+24)& (0+255),w,b
  2627  0079BA  1420               	andwf	??_calc_sha_256,w,c
  2628  0079BC  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  2629  0079BE  5119               	movf	(calc_sha_256@aux_hash+25)& (0+255),w,b
  2630  0079C0  1421               	andwf	??_calc_sha_256+1,w,c
  2631  0079C2  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  2632  0079C4  511A               	movf	(calc_sha_256@aux_hash+26)& (0+255),w,b
  2633  0079C6  1422               	andwf	??_calc_sha_256+2,w,c
  2634  0079C8  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  2635  0079CA  511B               	movf	(calc_sha_256@aux_hash+27)& (0+255),w,b
  2636  0079CC  1423               	andwf	??_calc_sha_256+3,w,c
  2637  0079CE  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  2638  0079D0  5114               	movf	(calc_sha_256@aux_hash+20)& (0+255),w,b
  2639  0079D2  1510               	andwf	(calc_sha_256@aux_hash+16)& (0+255),w,b
  2640  0079D4  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2641  0079D6  5115               	movf	(calc_sha_256@aux_hash+21)& (0+255),w,b
  2642  0079D8  1511               	andwf	(calc_sha_256@aux_hash+17)& (0+255),w,b
  2643  0079DA  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2644  0079DC  5116               	movf	(calc_sha_256@aux_hash+22)& (0+255),w,b
  2645  0079DE  1512               	andwf	(calc_sha_256@aux_hash+18)& (0+255),w,b
  2646  0079E0  6E2A               	movwf	(??_calc_sha_256+10)& (0+255),c
  2647  0079E2  5117               	movf	(calc_sha_256@aux_hash+23)& (0+255),w,b
  2648  0079E4  1513               	andwf	(calc_sha_256@aux_hash+19)& (0+255),w,b
  2649  0079E6  6E2B               	movwf	(??_calc_sha_256+11)& (0+255),c
  2650  0079E8  5024               	movf	??_calc_sha_256+4,w,c
  2651  0079EA  1828               	xorwf	??_calc_sha_256+8,w,c
  2652  0079EC  0100               	movlb	0	; () banked
  2653  0079EE  6FCC               	movwf	calc_sha_256@ch& (0+255),b
  2654  0079F0  5025               	movf	??_calc_sha_256+5,w,c
  2655  0079F2  1829               	xorwf	??_calc_sha_256+9,w,c
  2656  0079F4  6FCD               	movwf	(calc_sha_256@ch+1)& (0+255),b
  2657  0079F6  5026               	movf	??_calc_sha_256+6,w,c
  2658  0079F8  182A               	xorwf	??_calc_sha_256+10,w,c
  2659  0079FA  6FCE               	movwf	(calc_sha_256@ch+2)& (0+255),b
  2660  0079FC  5027               	movf	??_calc_sha_256+7,w,c
  2661  0079FE  182B               	xorwf	??_calc_sha_256+11,w,c
  2662  007A00  6FCF               	movwf	(calc_sha_256@ch+3)& (0+255),b
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;main.c: 313: const uint32_t temp1 = aux_hash[7] + s1 + ch + primes[i] + word[i];
  2666  007A02  0E00               	movlw	low calc_sha_256@word
  2667  007A04  6E20               	movwf	??_calc_sha_256& (0+255),c
  2668  007A06  0E01               	movlw	high calc_sha_256@word
  2669  007A08  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2670  007A0A  90D8               	bcf	status,0,c
  2671  007A0C  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2672  007A0E  6ED9               	movwf	fsr2l,c
  2673  007A10  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2674  007A12  6EDA               	movwf	fsr2h,c
  2675  007A14  90D8               	bcf	status,0,c
  2676  007A16  36D9               	rlcf	fsr2l,f,c
  2677  007A18  36DA               	rlcf	fsr2h,f,c
  2678  007A1A  5020               	movf	??_calc_sha_256,w,c
  2679  007A1C  26D9               	addwf	fsr2l,f,c
  2680  007A1E  5021               	movf	??_calc_sha_256+1,w,c
  2681  007A20  22DA               	addwfc	fsr2h,f,c
  2682  007A22  CFDE F022          	movff	postinc2,??_calc_sha_256+2
  2683  007A26  CFDE F023          	movff	postinc2,??_calc_sha_256+3
  2684  007A2A  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  2685  007A2E  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  2686  007A32  C0EC  F026         	movff	calc_sha_256@i,??_calc_sha_256+6
  2687  007A36  C0ED  F027         	movff	calc_sha_256@i+1,??_calc_sha_256+7
  2688  007A3A  90D8               	bcf	status,0,c
  2689  007A3C  3626               	rlcf	??_calc_sha_256+6,f,c
  2690  007A3E  3627               	rlcf	??_calc_sha_256+7,f,c
  2691  007A40  90D8               	bcf	status,0,c
  2692  007A42  3626               	rlcf	??_calc_sha_256+6,f,c
  2693  007A44  3627               	rlcf	??_calc_sha_256+7,f,c
  2694  007A46  0EB7               	movlw	low _primes
  2695  007A48  2426               	addwf	??_calc_sha_256+6,w,c
  2696  007A4A  6EF6               	movwf	tblptrl,c
  2697  007A4C  0E7E               	movlw	high _primes
  2698  007A4E  2027               	addwfc	??_calc_sha_256+7,w,c
  2699  007A50  6EF7               	movwf	tblptrh,c
  2700  007A52                     	if	0	;There are less than 3 active tblptr bytes
  2701  007A52                     	endif
  2702  007A52  0009               	tblrd		*+
  2703  007A54  CFF5 F028          	movff	tablat,??_calc_sha_256+8
  2704  007A58  0009               	tblrd		*+
  2705  007A5A  CFF5 F029          	movff	tablat,??_calc_sha_256+9
  2706  007A5E  0009               	tblrd		*+
  2707  007A60  CFF5 F02A          	movff	tablat,??_calc_sha_256+10
  2708  007A64  0009               	tblrd		*+
  2709  007A66  CFF5 F02B          	movff	tablat,??_calc_sha_256+11
  2710  007A6A  5028               	movf	??_calc_sha_256+8,w,c
  2711  007A6C  0102               	movlb	2	; () banked
  2712  007A6E  251C               	addwf	(calc_sha_256@aux_hash+28)& (0+255),w,b
  2713  007A70  6E2C               	movwf	(??_calc_sha_256+12)& (0+255),c
  2714  007A72  5029               	movf	??_calc_sha_256+9,w,c
  2715  007A74  211D               	addwfc	(calc_sha_256@aux_hash+29)& (0+255),w,b
  2716  007A76  6E2D               	movwf	(??_calc_sha_256+13)& (0+255),c
  2717  007A78  502A               	movf	??_calc_sha_256+10,w,c
  2718  007A7A  211E               	addwfc	(calc_sha_256@aux_hash+30)& (0+255),w,b
  2719  007A7C  6E2E               	movwf	(??_calc_sha_256+14)& (0+255),c
  2720  007A7E  502B               	movf	??_calc_sha_256+11,w,c
  2721  007A80  211F               	addwfc	(calc_sha_256@aux_hash+31)& (0+255),w,b
  2722  007A82  6E2F               	movwf	(??_calc_sha_256+15)& (0+255),c
  2723  007A84  5022               	movf	??_calc_sha_256+2,w,c
  2724  007A86  242C               	addwf	??_calc_sha_256+12,w,c
  2725  007A88  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2726  007A8A  5023               	movf	??_calc_sha_256+3,w,c
  2727  007A8C  202D               	addwfc	??_calc_sha_256+13,w,c
  2728  007A8E  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2729  007A90  5024               	movf	??_calc_sha_256+4,w,c
  2730  007A92  202E               	addwfc	??_calc_sha_256+14,w,c
  2731  007A94  6E32               	movwf	(??_calc_sha_256+18)& (0+255),c
  2732  007A96  5025               	movf	??_calc_sha_256+5,w,c
  2733  007A98  202F               	addwfc	??_calc_sha_256+15,w,c
  2734  007A9A  6E33               	movwf	(??_calc_sha_256+19)& (0+255),c
  2735  007A9C  0100               	movlb	0	; () banked
  2736  007A9E  51C8               	movf	calc_sha_256@s1_110& (0+255),w,b
  2737  007AA0  2430               	addwf	??_calc_sha_256+16,w,c
  2738  007AA2  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2739  007AA4  51C9               	movf	(calc_sha_256@s1_110+1)& (0+255),w,b
  2740  007AA6  2031               	addwfc	??_calc_sha_256+17,w,c
  2741  007AA8  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2742  007AAA  51CA               	movf	(calc_sha_256@s1_110+2)& (0+255),w,b
  2743  007AAC  2032               	addwfc	??_calc_sha_256+18,w,c
  2744  007AAE  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2745  007AB0  51CB               	movf	(calc_sha_256@s1_110+3)& (0+255),w,b
  2746  007AB2  2033               	addwfc	??_calc_sha_256+19,w,c
  2747  007AB4  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2748  007AB6  51CC               	movf	calc_sha_256@ch& (0+255),w,b
  2749  007AB8  2434               	addwf	??_calc_sha_256+20,w,c
  2750  007ABA  6FDC               	movwf	calc_sha_256@temp1& (0+255),b
  2751  007ABC  51CD               	movf	(calc_sha_256@ch+1)& (0+255),w,b
  2752  007ABE  2035               	addwfc	??_calc_sha_256+21,w,c
  2753  007AC0  6FDD               	movwf	(calc_sha_256@temp1+1)& (0+255),b
  2754  007AC2  51CE               	movf	(calc_sha_256@ch+2)& (0+255),w,b
  2755  007AC4  2036               	addwfc	??_calc_sha_256+22,w,c
  2756  007AC6  6FDE               	movwf	(calc_sha_256@temp1+2)& (0+255),b
  2757  007AC8  51CF               	movf	(calc_sha_256@ch+3)& (0+255),w,b
  2758  007ACA  2037               	addwfc	??_calc_sha_256+23,w,c
  2759  007ACC  6FDF               	movwf	(calc_sha_256@temp1+3)& (0+255),b
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;main.c: 314: const uint32_t s0 = rotate_right(aux_hash[0], 2) ^ rotate_right(aux_hash[0
      +                          ], 13) ^ rotate_right(aux_hash[0], 22);
  2763  007ACE  C200  F001         	movff	calc_sha_256@aux_hash,rotate_right@value
  2764  007AD2  C201  F002         	movff	calc_sha_256@aux_hash+1,rotate_right@value+1
  2765  007AD6  C202  F003         	movff	calc_sha_256@aux_hash+2,rotate_right@value+2
  2766  007ADA  C203  F004         	movff	calc_sha_256@aux_hash+3,rotate_right@value+3
  2767  007ADE  0E00               	movlw	0
  2768  007AE0  6E06               	movwf	rotate_right@count+1,c
  2769  007AE2  0E02               	movlw	2
  2770  007AE4  6E05               	movwf	rotate_right@count,c
  2771  007AE6  EC88  F034         	call	_rotate_right	;wreg free
  2772  007AEA  C001  F020         	movff	?_rotate_right,??_calc_sha_256
  2773  007AEE  C002  F021         	movff	?_rotate_right+1,??_calc_sha_256+1
  2774  007AF2  C003  F022         	movff	?_rotate_right+2,??_calc_sha_256+2
  2775  007AF6  C004  F023         	movff	?_rotate_right+3,??_calc_sha_256+3
  2776  007AFA  C200  F001         	movff	calc_sha_256@aux_hash,rotate_right@value
  2777  007AFE  C201  F002         	movff	calc_sha_256@aux_hash+1,rotate_right@value+1
  2778  007B02  C202  F003         	movff	calc_sha_256@aux_hash+2,rotate_right@value+2
  2779  007B06  C203  F004         	movff	calc_sha_256@aux_hash+3,rotate_right@value+3
  2780  007B0A  0E00               	movlw	0
  2781  007B0C  6E06               	movwf	rotate_right@count+1,c
  2782  007B0E  0E0D               	movlw	13
  2783  007B10  6E05               	movwf	rotate_right@count,c
  2784  007B12  EC88  F034         	call	_rotate_right	;wreg free
  2785  007B16  5001               	movf	?_rotate_right,w,c
  2786  007B18  1820               	xorwf	??_calc_sha_256,w,c
  2787  007B1A  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  2788  007B1C  5002               	movf	?_rotate_right+1,w,c
  2789  007B1E  1821               	xorwf	??_calc_sha_256+1,w,c
  2790  007B20  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  2791  007B22  5003               	movf	?_rotate_right+2,w,c
  2792  007B24  1822               	xorwf	??_calc_sha_256+2,w,c
  2793  007B26  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  2794  007B28  5004               	movf	?_rotate_right+3,w,c
  2795  007B2A  1823               	xorwf	??_calc_sha_256+3,w,c
  2796  007B2C  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  2797  007B2E  C200  F001         	movff	calc_sha_256@aux_hash,rotate_right@value
  2798  007B32  C201  F002         	movff	calc_sha_256@aux_hash+1,rotate_right@value+1
  2799  007B36  C202  F003         	movff	calc_sha_256@aux_hash+2,rotate_right@value+2
  2800  007B3A  C203  F004         	movff	calc_sha_256@aux_hash+3,rotate_right@value+3
  2801  007B3E  0E00               	movlw	0
  2802  007B40  6E06               	movwf	rotate_right@count+1,c
  2803  007B42  0E16               	movlw	22
  2804  007B44  6E05               	movwf	rotate_right@count,c
  2805  007B46  EC88  F034         	call	_rotate_right	;wreg free
  2806  007B4A  5001               	movf	?_rotate_right,w,c
  2807  007B4C  1824               	xorwf	??_calc_sha_256+4,w,c
  2808  007B4E  0100               	movlb	0	; () banked
  2809  007B50  6FD0               	movwf	calc_sha_256@s0_113& (0+255),b
  2810  007B52  5002               	movf	?_rotate_right+1,w,c
  2811  007B54  1825               	xorwf	??_calc_sha_256+5,w,c
  2812  007B56  6FD1               	movwf	(calc_sha_256@s0_113+1)& (0+255),b
  2813  007B58  5003               	movf	?_rotate_right+2,w,c
  2814  007B5A  1826               	xorwf	??_calc_sha_256+6,w,c
  2815  007B5C  6FD2               	movwf	(calc_sha_256@s0_113+2)& (0+255),b
  2816  007B5E  5004               	movf	?_rotate_right+3,w,c
  2817  007B60  1827               	xorwf	??_calc_sha_256+7,w,c
  2818  007B62  6FD3               	movwf	(calc_sha_256@s0_113+3)& (0+255),b
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;main.c: 315: const uint32_t maj = (aux_hash[0] & aux_hash[1]) ^ (aux_hash[0] & aux_hash
      +                          [2]) ^ (aux_hash[1] & aux_hash[2]);
  2822  007B64  0102               	movlb	2	; () banked
  2823  007B66  5108               	movf	(calc_sha_256@aux_hash+8)& (0+255),w,b
  2824  007B68  1504               	andwf	(calc_sha_256@aux_hash+4)& (0+255),w,b
  2825  007B6A  6E20               	movwf	??_calc_sha_256& (0+255),c
  2826  007B6C  5109               	movf	(calc_sha_256@aux_hash+9)& (0+255),w,b
  2827  007B6E  1505               	andwf	(calc_sha_256@aux_hash+5)& (0+255),w,b
  2828  007B70  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2829  007B72  510A               	movf	(calc_sha_256@aux_hash+10)& (0+255),w,b
  2830  007B74  1506               	andwf	(calc_sha_256@aux_hash+6)& (0+255),w,b
  2831  007B76  6E22               	movwf	(??_calc_sha_256+2)& (0+255),c
  2832  007B78  510B               	movf	(calc_sha_256@aux_hash+11)& (0+255),w,b
  2833  007B7A  1507               	andwf	(calc_sha_256@aux_hash+7)& (0+255),w,b
  2834  007B7C  6E23               	movwf	(??_calc_sha_256+3)& (0+255),c
  2835  007B7E  5100               	movf	calc_sha_256@aux_hash& (0+255),w,b
  2836  007B80  1508               	andwf	(calc_sha_256@aux_hash+8)& (0+255),w,b
  2837  007B82  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  2838  007B84  5101               	movf	(calc_sha_256@aux_hash+1)& (0+255),w,b
  2839  007B86  1509               	andwf	(calc_sha_256@aux_hash+9)& (0+255),w,b
  2840  007B88  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  2841  007B8A  5102               	movf	(calc_sha_256@aux_hash+2)& (0+255),w,b
  2842  007B8C  150A               	andwf	(calc_sha_256@aux_hash+10)& (0+255),w,b
  2843  007B8E  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  2844  007B90  5103               	movf	(calc_sha_256@aux_hash+3)& (0+255),w,b
  2845  007B92  150B               	andwf	(calc_sha_256@aux_hash+11)& (0+255),w,b
  2846  007B94  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  2847  007B96  5100               	movf	calc_sha_256@aux_hash& (0+255),w,b
  2848  007B98  1504               	andwf	(calc_sha_256@aux_hash+4)& (0+255),w,b
  2849  007B9A  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2850  007B9C  5101               	movf	(calc_sha_256@aux_hash+1)& (0+255),w,b
  2851  007B9E  1505               	andwf	(calc_sha_256@aux_hash+5)& (0+255),w,b
  2852  007BA0  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2853  007BA2  5102               	movf	(calc_sha_256@aux_hash+2)& (0+255),w,b
  2854  007BA4  1506               	andwf	(calc_sha_256@aux_hash+6)& (0+255),w,b
  2855  007BA6  6E2A               	movwf	(??_calc_sha_256+10)& (0+255),c
  2856  007BA8  5103               	movf	(calc_sha_256@aux_hash+3)& (0+255),w,b
  2857  007BAA  1507               	andwf	(calc_sha_256@aux_hash+7)& (0+255),w,b
  2858  007BAC  6E2B               	movwf	(??_calc_sha_256+11)& (0+255),c
  2859  007BAE  5024               	movf	??_calc_sha_256+4,w,c
  2860  007BB0  1828               	xorwf	??_calc_sha_256+8,w,c
  2861  007BB2  6E2C               	movwf	(??_calc_sha_256+12)& (0+255),c
  2862  007BB4  5025               	movf	??_calc_sha_256+5,w,c
  2863  007BB6  1829               	xorwf	??_calc_sha_256+9,w,c
  2864  007BB8  6E2D               	movwf	(??_calc_sha_256+13)& (0+255),c
  2865  007BBA  5026               	movf	??_calc_sha_256+6,w,c
  2866  007BBC  182A               	xorwf	??_calc_sha_256+10,w,c
  2867  007BBE  6E2E               	movwf	(??_calc_sha_256+14)& (0+255),c
  2868  007BC0  5027               	movf	??_calc_sha_256+7,w,c
  2869  007BC2  182B               	xorwf	??_calc_sha_256+11,w,c
  2870  007BC4  6E2F               	movwf	(??_calc_sha_256+15)& (0+255),c
  2871  007BC6  5020               	movf	??_calc_sha_256,w,c
  2872  007BC8  182C               	xorwf	??_calc_sha_256+12,w,c
  2873  007BCA  0100               	movlb	0	; () banked
  2874  007BCC  6FD4               	movwf	calc_sha_256@maj& (0+255),b
  2875  007BCE  5021               	movf	??_calc_sha_256+1,w,c
  2876  007BD0  182D               	xorwf	??_calc_sha_256+13,w,c
  2877  007BD2  6FD5               	movwf	(calc_sha_256@maj+1)& (0+255),b
  2878  007BD4  5022               	movf	??_calc_sha_256+2,w,c
  2879  007BD6  182E               	xorwf	??_calc_sha_256+14,w,c
  2880  007BD8  6FD6               	movwf	(calc_sha_256@maj+2)& (0+255),b
  2881  007BDA  5023               	movf	??_calc_sha_256+3,w,c
  2882  007BDC  182F               	xorwf	??_calc_sha_256+15,w,c
  2883  007BDE  6FD7               	movwf	(calc_sha_256@maj+3)& (0+255),b
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 316: const uint32_t temp2 = s0 + maj;
  2887  007BE0  51D4               	movf	calc_sha_256@maj& (0+255),w,b
  2888  007BE2  25D0               	addwf	calc_sha_256@s0_113& (0+255),w,b
  2889  007BE4  6FD8               	movwf	calc_sha_256@temp2& (0+255),b
  2890  007BE6  51D5               	movf	(calc_sha_256@maj+1)& (0+255),w,b
  2891  007BE8  21D1               	addwfc	(calc_sha_256@s0_113+1)& (0+255),w,b
  2892  007BEA  6FD9               	movwf	(calc_sha_256@temp2+1)& (0+255),b
  2893  007BEC  51D6               	movf	(calc_sha_256@maj+2)& (0+255),w,b
  2894  007BEE  21D2               	addwfc	(calc_sha_256@s0_113+2)& (0+255),w,b
  2895  007BF0  6FDA               	movwf	(calc_sha_256@temp2+2)& (0+255),b
  2896  007BF2  51D7               	movf	(calc_sha_256@maj+3)& (0+255),w,b
  2897  007BF4  21D3               	addwfc	(calc_sha_256@s0_113+3)& (0+255),w,b
  2898  007BF6  6FDB               	movwf	(calc_sha_256@temp2+3)& (0+255),b
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;main.c: 318: aux_hash[7] = aux_hash[6];
  2902  007BF8  C218  F21C         	movff	calc_sha_256@aux_hash+24,calc_sha_256@aux_hash+28
  2903  007BFC  C219  F21D         	movff	calc_sha_256@aux_hash+25,calc_sha_256@aux_hash+29
  2904  007C00  C21A  F21E         	movff	calc_sha_256@aux_hash+26,calc_sha_256@aux_hash+30
  2905  007C04  C21B  F21F         	movff	calc_sha_256@aux_hash+27,calc_sha_256@aux_hash+31
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;main.c: 319: aux_hash[6] = aux_hash[5];
  2909  007C08  C214  F218         	movff	calc_sha_256@aux_hash+20,calc_sha_256@aux_hash+24
  2910  007C0C  C215  F219         	movff	calc_sha_256@aux_hash+21,calc_sha_256@aux_hash+25
  2911  007C10  C216  F21A         	movff	calc_sha_256@aux_hash+22,calc_sha_256@aux_hash+26
  2912  007C14  C217  F21B         	movff	calc_sha_256@aux_hash+23,calc_sha_256@aux_hash+27
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;main.c: 320: aux_hash[5] = aux_hash[4];
  2916  007C18  C210  F214         	movff	calc_sha_256@aux_hash+16,calc_sha_256@aux_hash+20
  2917  007C1C  C211  F215         	movff	calc_sha_256@aux_hash+17,calc_sha_256@aux_hash+21
  2918  007C20  C212  F216         	movff	calc_sha_256@aux_hash+18,calc_sha_256@aux_hash+22
  2919  007C24  C213  F217         	movff	calc_sha_256@aux_hash+19,calc_sha_256@aux_hash+23
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;main.c: 321: aux_hash[4] = aux_hash[3] + temp1;
  2923  007C28  51DC               	movf	calc_sha_256@temp1& (0+255),w,b
  2924  007C2A  0102               	movlb	2	; () banked
  2925  007C2C  250C               	addwf	(calc_sha_256@aux_hash+12)& (0+255),w,b
  2926  007C2E  6F10               	movwf	(calc_sha_256@aux_hash+16)& (0+255),b
  2927  007C30  0100               	movlb	0	; () banked
  2928  007C32  51DD               	movf	(calc_sha_256@temp1+1)& (0+255),w,b
  2929  007C34  0102               	movlb	2	; () banked
  2930  007C36  210D               	addwfc	(calc_sha_256@aux_hash+13)& (0+255),w,b
  2931  007C38  6F11               	movwf	(calc_sha_256@aux_hash+17)& (0+255),b
  2932  007C3A  0100               	movlb	0	; () banked
  2933  007C3C  51DE               	movf	(calc_sha_256@temp1+2)& (0+255),w,b
  2934  007C3E  0102               	movlb	2	; () banked
  2935  007C40  210E               	addwfc	(calc_sha_256@aux_hash+14)& (0+255),w,b
  2936  007C42  6F12               	movwf	(calc_sha_256@aux_hash+18)& (0+255),b
  2937  007C44  0100               	movlb	0	; () banked
  2938  007C46  51DF               	movf	(calc_sha_256@temp1+3)& (0+255),w,b
  2939  007C48  0102               	movlb	2	; () banked
  2940  007C4A  210F               	addwfc	(calc_sha_256@aux_hash+15)& (0+255),w,b
  2941  007C4C  6F13               	movwf	(calc_sha_256@aux_hash+19)& (0+255),b
  2942                           
  2943                           ; BSR set to: 2
  2944                           ;main.c: 322: aux_hash[3] = aux_hash[2];
  2945  007C4E  C208  F20C         	movff	calc_sha_256@aux_hash+8,calc_sha_256@aux_hash+12
  2946  007C52  C209  F20D         	movff	calc_sha_256@aux_hash+9,calc_sha_256@aux_hash+13
  2947  007C56  C20A  F20E         	movff	calc_sha_256@aux_hash+10,calc_sha_256@aux_hash+14
  2948  007C5A  C20B  F20F         	movff	calc_sha_256@aux_hash+11,calc_sha_256@aux_hash+15
  2949                           
  2950                           ; BSR set to: 2
  2951                           ;main.c: 323: aux_hash[2] = aux_hash[1];
  2952  007C5E  C204  F208         	movff	calc_sha_256@aux_hash+4,calc_sha_256@aux_hash+8
  2953  007C62  C205  F209         	movff	calc_sha_256@aux_hash+5,calc_sha_256@aux_hash+9
  2954  007C66  C206  F20A         	movff	calc_sha_256@aux_hash+6,calc_sha_256@aux_hash+10
  2955  007C6A  C207  F20B         	movff	calc_sha_256@aux_hash+7,calc_sha_256@aux_hash+11
  2956                           
  2957                           ; BSR set to: 2
  2958                           ;main.c: 324: aux_hash[1] = aux_hash[0];
  2959  007C6E  C200  F204         	movff	calc_sha_256@aux_hash,calc_sha_256@aux_hash+4
  2960  007C72  C201  F205         	movff	calc_sha_256@aux_hash+1,calc_sha_256@aux_hash+5
  2961  007C76  C202  F206         	movff	calc_sha_256@aux_hash+2,calc_sha_256@aux_hash+6
  2962  007C7A  C203  F207         	movff	calc_sha_256@aux_hash+3,calc_sha_256@aux_hash+7
  2963                           
  2964                           ; BSR set to: 2
  2965                           ;main.c: 325: aux_hash[0] = temp1 + temp2;
  2966  007C7E  0100               	movlb	0	; () banked
  2967  007C80  51D8               	movf	calc_sha_256@temp2& (0+255),w,b
  2968  007C82  25DC               	addwf	calc_sha_256@temp1& (0+255),w,b
  2969  007C84  0102               	movlb	2	; () banked
  2970  007C86  6F00               	movwf	calc_sha_256@aux_hash& (0+255),b
  2971  007C88  0100               	movlb	0	; () banked
  2972  007C8A  51D9               	movf	(calc_sha_256@temp2+1)& (0+255),w,b
  2973  007C8C  21DD               	addwfc	(calc_sha_256@temp1+1)& (0+255),w,b
  2974  007C8E  0102               	movlb	2	; () banked
  2975  007C90  6F01               	movwf	(calc_sha_256@aux_hash+1)& (0+255),b
  2976  007C92  0100               	movlb	0	; () banked
  2977  007C94  51DA               	movf	(calc_sha_256@temp2+2)& (0+255),w,b
  2978  007C96  21DE               	addwfc	(calc_sha_256@temp1+2)& (0+255),w,b
  2979  007C98  0102               	movlb	2	; () banked
  2980  007C9A  6F02               	movwf	(calc_sha_256@aux_hash+2)& (0+255),b
  2981  007C9C  0100               	movlb	0	; () banked
  2982  007C9E  51DB               	movf	(calc_sha_256@temp2+3)& (0+255),w,b
  2983  007CA0  21DF               	addwfc	(calc_sha_256@temp1+3)& (0+255),w,b
  2984  007CA2  0102               	movlb	2	; () banked
  2985  007CA4  6F03               	movwf	(calc_sha_256@aux_hash+3)& (0+255),b
  2986                           
  2987                           ; BSR set to: 2
  2988                           ;main.c: 326: i++;
  2989  007CA6  0100               	movlb	0	; () banked
  2990  007CA8  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  2991  007CAA  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  2992  007CAC                     l71:
  2993                           
  2994                           ; BSR set to: 0
  2995                           
  2996                           ; BSR set to: 0
  2997  007CAC  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2998  007CAE  D62C               	goto	l72
  2999  007CB0  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3000  007CB2  E104               	bnz	l1942
  3001  007CB4  0E40               	movlw	64
  3002  007CB6  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  3003  007CB8  A0D8               	btfss	status,0,c
  3004  007CBA  D626               	goto	l72
  3005  007CBC                     l1942:
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;main.c: 327: }
  3009                           ;main.c: 330: i = 0;
  3010  007CBC  0E00               	movlw	0
  3011  007CBE  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  3012  007CC0  0E00               	movlw	0
  3013  007CC2  6FEC               	movwf	calc_sha_256@i& (0+255),b
  3014                           
  3015                           ;main.c: 331: while(i < 8){
  3016  007CC4  D032               	goto	l74
  3017  007CC6                     
  3018                           ; BSR set to: 0
  3019                           ;main.c: 332: h[i] += aux_hash[i];
  3020                           
  3021                           ; BSR set to: 0
  3022  007CC6  0E00               	movlw	low calc_sha_256@aux_hash
  3023  007CC8  6E20               	movwf	??_calc_sha_256& (0+255),c
  3024  007CCA  0E02               	movlw	high calc_sha_256@aux_hash
  3025  007CCC  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3026  007CCE  90D8               	bcf	status,0,c
  3027  007CD0  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3028  007CD2  6ED9               	movwf	fsr2l,c
  3029  007CD4  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3030  007CD6  6EDA               	movwf	fsr2h,c
  3031  007CD8  90D8               	bcf	status,0,c
  3032  007CDA  36D9               	rlcf	fsr2l,f,c
  3033  007CDC  36DA               	rlcf	fsr2h,f,c
  3034  007CDE  5020               	movf	??_calc_sha_256,w,c
  3035  007CE0  26D9               	addwf	fsr2l,f,c
  3036  007CE2  5021               	movf	??_calc_sha_256+1,w,c
  3037  007CE4  22DA               	addwfc	fsr2h,f,c
  3038  007CE6  CFDE F022          	movff	postinc2,??_calc_sha_256+2
  3039  007CEA  CFDE F023          	movff	postinc2,??_calc_sha_256+3
  3040  007CEE  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  3041  007CF2  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  3042  007CF6  0EA0               	movlw	low calc_sha_256@h
  3043  007CF8  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  3044  007CFA  0E00               	movlw	high calc_sha_256@h
  3045  007CFC  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  3046  007CFE  90D8               	bcf	status,0,c
  3047  007D00  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3048  007D02  6ED9               	movwf	fsr2l,c
  3049  007D04  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3050  007D06  6EDA               	movwf	fsr2h,c
  3051  007D08  90D8               	bcf	status,0,c
  3052  007D0A  36D9               	rlcf	fsr2l,f,c
  3053  007D0C  36DA               	rlcf	fsr2h,f,c
  3054  007D0E  5026               	movf	??_calc_sha_256+6,w,c
  3055  007D10  26D9               	addwf	fsr2l,f,c
  3056  007D12  5027               	movf	??_calc_sha_256+7,w,c
  3057  007D14  22DA               	addwfc	fsr2h,f,c
  3058  007D16  5022               	movf	??_calc_sha_256+2,w,c
  3059  007D18  26DE               	addwf	postinc2,f,c
  3060  007D1A  5023               	movf	??_calc_sha_256+3,w,c
  3061  007D1C  22DE               	addwfc	postinc2,f,c
  3062  007D1E  5024               	movf	??_calc_sha_256+4,w,c
  3063  007D20  22DE               	addwfc	postinc2,f,c
  3064  007D22  5025               	movf	??_calc_sha_256+5,w,c
  3065  007D24  22DE               	addwfc	postinc2,f,c
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;main.c: 333: i++;
  3069  007D26  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  3070  007D28  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  3071  007D2A                     l74:
  3072                           
  3073                           ; BSR set to: 0
  3074                           
  3075                           ; BSR set to: 0
  3076  007D2A  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3077  007D2C  D7CC               	goto	l75
  3078  007D2E  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3079  007D30  E104               	bnz	l1950
  3080  007D32  0E08               	movlw	8
  3081  007D34  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  3082  007D36  A0D8               	btfss	status,0,c
  3083  007D38  D7C6               	goto	l75
  3084  007D3A                     u1780:
  3085  007D3A                     l1950:
  3086  007D3A  0E60               	movlw	low calc_sha_256@chunk
  3087  007D3C  6E0C               	movwf	calc_chunk@chunk,c
  3088  007D3E  0E00               	movlw	high calc_sha_256@chunk
  3089  007D40  6E0D               	movwf	calc_chunk@chunk+1,c
  3090  007D42  0EE2               	movlw	low calc_sha_256@state
  3091  007D44  6E0E               	movwf	calc_chunk@state,c
  3092  007D46  0E00               	movlw	high calc_sha_256@state
  3093  007D48  6E0F               	movwf	calc_chunk@state+1,c
  3094  007D4A  EC93  F037         	call	_calc_chunk	;wreg free
  3095  007D4E  500C               	movf	?_calc_chunk,w,c
  3096  007D50  100D               	iorwf	?_calc_chunk+1,w,c
  3097  007D52  A4D8               	btfss	status,2,c
  3098  007D54  EFF2  F039         	goto	l61
  3099                           
  3100                           ;main.c: 334: }
  3101                           ;main.c: 335: }
  3102                           ;main.c: 338: i = 0, j = 0;
  3103  007D58  0E00               	movlw	0
  3104  007D5A  0100               	movlb	0	; () banked
  3105  007D5C  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  3106  007D5E  0E00               	movlw	0
  3107  007D60  6FEC               	movwf	calc_sha_256@i& (0+255),b
  3108  007D62  0E00               	movlw	0
  3109  007D64  6E3F               	movwf	calc_sha_256@j+1,c
  3110  007D66  0E00               	movlw	0
  3111  007D68  6E3E               	movwf	calc_sha_256@j,c
  3112                           
  3113                           ;main.c: 339: while(i < 8){
  3114  007D6A  D09B               	goto	l78
  3115  007D6C                     
  3116                           ; BSR set to: 0
  3117                           ;main.c: 340: hash[j++] = (uint8_t) (h[i] >> 24);
  3118                           
  3119                           ; BSR set to: 0
  3120  007D6C  503E               	movf	calc_sha_256@j,w,c
  3121  007D6E  241A               	addwf	calc_sha_256@hash,w,c
  3122  007D70  6ED9               	movwf	fsr2l,c
  3123  007D72  503F               	movf	calc_sha_256@j+1,w,c
  3124  007D74  201B               	addwfc	calc_sha_256@hash+1,w,c
  3125  007D76  6EDA               	movwf	fsr2h,c
  3126  007D78  0EA0               	movlw	low calc_sha_256@h
  3127  007D7A  6E20               	movwf	??_calc_sha_256& (0+255),c
  3128  007D7C  0E00               	movlw	high calc_sha_256@h
  3129  007D7E  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3130  007D80  90D8               	bcf	status,0,c
  3131  007D82  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3132  007D84  6EE1               	movwf	fsr1l,c
  3133  007D86  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3134  007D88  6EE2               	movwf	fsr1h,c
  3135  007D8A  90D8               	bcf	status,0,c
  3136  007D8C  36E1               	rlcf	fsr1l,f,c
  3137  007D8E  36E2               	rlcf	fsr1h,f,c
  3138  007D90  5020               	movf	??_calc_sha_256,w,c
  3139  007D92  26E1               	addwf	fsr1l,f,c
  3140  007D94  5021               	movf	??_calc_sha_256+1,w,c
  3141  007D96  22E2               	addwfc	fsr1h,f,c
  3142  007D98  CFE6 F022          	movff	postinc1,??_calc_sha_256+2
  3143  007D9C  CFE6 F023          	movff	postinc1,??_calc_sha_256+3
  3144  007DA0  CFE6 F024          	movff	postinc1,??_calc_sha_256+4
  3145  007DA4  CFE6 F025          	movff	postinc1,??_calc_sha_256+5
  3146  007DA8  0E19               	movlw	25
  3147  007DAA  D005               	goto	u1800
  3148  007DAC                     u1805:
  3149  007DAC  90D8               	bcf	status,0,c
  3150  007DAE  3225               	rrcf	??_calc_sha_256+5,f,c
  3151  007DB0  3224               	rrcf	??_calc_sha_256+4,f,c
  3152  007DB2  3223               	rrcf	??_calc_sha_256+3,f,c
  3153  007DB4  3222               	rrcf	??_calc_sha_256+2,f,c
  3154  007DB6                     u1800:
  3155  007DB6  2EE8               	decfsz	wreg,f,c
  3156  007DB8  D7F9               	goto	u1805
  3157  007DBA  5022               	movf	??_calc_sha_256+2,w,c
  3158  007DBC  6EDF               	movwf	indf2,c
  3159                           
  3160                           ; BSR set to: 0
  3161  007DBE  4A3E               	infsnz	calc_sha_256@j,f,c
  3162  007DC0  2A3F               	incf	calc_sha_256@j+1,f,c
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;main.c: 341: hash[j++] = (uint8_t) (h[i] >> 16);
  3166  007DC2  503E               	movf	calc_sha_256@j,w,c
  3167  007DC4  241A               	addwf	calc_sha_256@hash,w,c
  3168  007DC6  6ED9               	movwf	fsr2l,c
  3169  007DC8  503F               	movf	calc_sha_256@j+1,w,c
  3170  007DCA  201B               	addwfc	calc_sha_256@hash+1,w,c
  3171  007DCC  6EDA               	movwf	fsr2h,c
  3172  007DCE  0EA0               	movlw	low calc_sha_256@h
  3173  007DD0  6E20               	movwf	??_calc_sha_256& (0+255),c
  3174  007DD2  0E00               	movlw	high calc_sha_256@h
  3175  007DD4  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3176  007DD6  90D8               	bcf	status,0,c
  3177  007DD8  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3178  007DDA  6EE1               	movwf	fsr1l,c
  3179  007DDC  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3180  007DDE  6EE2               	movwf	fsr1h,c
  3181  007DE0  90D8               	bcf	status,0,c
  3182  007DE2  36E1               	rlcf	fsr1l,f,c
  3183  007DE4  36E2               	rlcf	fsr1h,f,c
  3184  007DE6  5020               	movf	??_calc_sha_256,w,c
  3185  007DE8  26E1               	addwf	fsr1l,f,c
  3186  007DEA  5021               	movf	??_calc_sha_256+1,w,c
  3187  007DEC  22E2               	addwfc	fsr1h,f,c
  3188  007DEE  CFE6 F022          	movff	postinc1,??_calc_sha_256+2
  3189  007DF2  CFE6 F023          	movff	postinc1,??_calc_sha_256+3
  3190  007DF6  CFE6 F024          	movff	postinc1,??_calc_sha_256+4
  3191  007DFA  CFE6 F025          	movff	postinc1,??_calc_sha_256+5
  3192  007DFE  0E11               	movlw	17
  3193  007E00  D005               	goto	u1810
  3194  007E02                     u1815:
  3195  007E02  90D8               	bcf	status,0,c
  3196  007E04  3225               	rrcf	??_calc_sha_256+5,f,c
  3197  007E06  3224               	rrcf	??_calc_sha_256+4,f,c
  3198  007E08  3223               	rrcf	??_calc_sha_256+3,f,c
  3199  007E0A  3222               	rrcf	??_calc_sha_256+2,f,c
  3200  007E0C                     u1810:
  3201  007E0C  2EE8               	decfsz	wreg,f,c
  3202  007E0E  D7F9               	goto	u1815
  3203  007E10  5022               	movf	??_calc_sha_256+2,w,c
  3204  007E12  6EDF               	movwf	indf2,c
  3205  007E14  4A3E               	infsnz	calc_sha_256@j,f,c
  3206  007E16  2A3F               	incf	calc_sha_256@j+1,f,c
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;main.c: 342: hash[j++] = (uint8_t) (h[i] >> 8);
  3210  007E18  503E               	movf	calc_sha_256@j,w,c
  3211  007E1A  241A               	addwf	calc_sha_256@hash,w,c
  3212  007E1C  6ED9               	movwf	fsr2l,c
  3213  007E1E  503F               	movf	calc_sha_256@j+1,w,c
  3214  007E20  201B               	addwfc	calc_sha_256@hash+1,w,c
  3215  007E22  6EDA               	movwf	fsr2h,c
  3216  007E24  0EA0               	movlw	low calc_sha_256@h
  3217  007E26  6E20               	movwf	??_calc_sha_256& (0+255),c
  3218  007E28  0E00               	movlw	high calc_sha_256@h
  3219  007E2A  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3220  007E2C  90D8               	bcf	status,0,c
  3221  007E2E  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3222  007E30  6EE1               	movwf	fsr1l,c
  3223  007E32  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3224  007E34  6EE2               	movwf	fsr1h,c
  3225  007E36  90D8               	bcf	status,0,c
  3226  007E38  36E1               	rlcf	fsr1l,f,c
  3227  007E3A  36E2               	rlcf	fsr1h,f,c
  3228  007E3C  5020               	movf	??_calc_sha_256,w,c
  3229  007E3E  26E1               	addwf	fsr1l,f,c
  3230  007E40  5021               	movf	??_calc_sha_256+1,w,c
  3231  007E42  22E2               	addwfc	fsr1h,f,c
  3232  007E44  CFE6 F022          	movff	postinc1,??_calc_sha_256+2
  3233  007E48  CFE6 F023          	movff	postinc1,??_calc_sha_256+3
  3234  007E4C  CFE6 F024          	movff	postinc1,??_calc_sha_256+4
  3235  007E50  CFE6 F025          	movff	postinc1,??_calc_sha_256+5
  3236  007E54  C023  F022         	movff	??_calc_sha_256+3,??_calc_sha_256+2
  3237  007E58  C024  F023         	movff	??_calc_sha_256+4,??_calc_sha_256+3
  3238  007E5C  C025  F024         	movff	??_calc_sha_256+5,??_calc_sha_256+4
  3239  007E60  6A25               	clrf	??_calc_sha_256+5,c
  3240  007E62  5022               	movf	??_calc_sha_256+2,w,c
  3241  007E64  6EDF               	movwf	indf2,c
  3242                           
  3243                           ; BSR set to: 0
  3244  007E66  4A3E               	infsnz	calc_sha_256@j,f,c
  3245  007E68  2A3F               	incf	calc_sha_256@j+1,f,c
  3246                           
  3247                           ;main.c: 343: hash[j++] = (uint8_t) h[i];
  3248  007E6A  0EA0               	movlw	low calc_sha_256@h
  3249  007E6C  6E20               	movwf	??_calc_sha_256& (0+255),c
  3250  007E6E  0E00               	movlw	high calc_sha_256@h
  3251  007E70  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3252  007E72  90D8               	bcf	status,0,c
  3253  007E74  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3254  007E76  6ED9               	movwf	fsr2l,c
  3255  007E78  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3256  007E7A  6EDA               	movwf	fsr2h,c
  3257  007E7C  90D8               	bcf	status,0,c
  3258  007E7E  36D9               	rlcf	fsr2l,f,c
  3259  007E80  36DA               	rlcf	fsr2h,f,c
  3260  007E82  5020               	movf	??_calc_sha_256,w,c
  3261  007E84  26D9               	addwf	fsr2l,f,c
  3262  007E86  5021               	movf	??_calc_sha_256+1,w,c
  3263  007E88  22DA               	addwfc	fsr2h,f,c
  3264  007E8A  503E               	movf	calc_sha_256@j,w,c
  3265  007E8C  241A               	addwf	calc_sha_256@hash,w,c
  3266  007E8E  6EE1               	movwf	fsr1l,c
  3267  007E90  503F               	movf	calc_sha_256@j+1,w,c
  3268  007E92  201B               	addwfc	calc_sha_256@hash+1,w,c
  3269  007E94  6EE2               	movwf	fsr1h,c
  3270  007E96  CFDF FFE7          	movff	indf2,indf1
  3271                           
  3272                           ; BSR set to: 0
  3273  007E9A  4A3E               	infsnz	calc_sha_256@j,f,c
  3274  007E9C  2A3F               	incf	calc_sha_256@j+1,f,c
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;main.c: 344: i++;
  3278  007E9E  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  3279  007EA0  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  3280  007EA2                     l78:
  3281                           
  3282                           ; BSR set to: 0
  3283                           
  3284                           ; BSR set to: 0
  3285  007EA2  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3286  007EA4  D763               	goto	l79
  3287  007EA6  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3288  007EA8  E105               	bnz	l81
  3289  007EAA  0E08               	movlw	8
  3290  007EAC  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  3291  007EAE  B0D8               	btfsc	status,0,c
  3292  007EB0  0012               	return	
  3293  007EB2  D75C               	goto	l79
  3294  007EB4                     l81:
  3295                           
  3296                           ; BSR set to: 0
  3297  007EB4  0012               	return		;funcret
  3298  007EB6                     __end_of_calc_sha_256:
  3299                           	opt stack 0
  3300                           tblptru	equ	0xFF8
  3301                           tblptrh	equ	0xFF7
  3302                           tblptrl	equ	0xFF6
  3303                           tablat	equ	0xFF5
  3304                           prodh	equ	0xFF4
  3305                           prodl	equ	0xFF3
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           indf1	equ	0xFE7
  3309                           postinc1	equ	0xFE6
  3310                           postdec1	equ	0xFE5
  3311                           plusw1	equ	0xFE3
  3312                           fsr1h	equ	0xFE2
  3313                           fsr1l	equ	0xFE1
  3314                           indf2	equ	0xFDF
  3315                           postinc2	equ	0xFDE
  3316                           postdec2	equ	0xFDD
  3317                           plusw2	equ	0xFDB
  3318                           fsr2h	equ	0xFDA
  3319                           fsr2l	equ	0xFD9
  3320                           status	equ	0xFD8
  3321                           
  3322 ;; *************** function _rotate_right *****************
  3323 ;; Defined at:
  3324 ;;		line 193 in file "main.c"
  3325 ;; Parameters:    Size  Location     Type
  3326 ;;  value           4    0[COMRAM] unsigned long 
  3327 ;;  count           2    4[COMRAM] unsigned int 
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;		None
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  4    0[COMRAM] unsigned long 
  3332 ;; Registers used:
  3333 ;;		wreg, status,2, status,0
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3339 ;;      Params:         6       0       0       0       0       0       0       0       0
  3340 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3341 ;;      Temps:          9       0       0       0       0       0       0       0       0
  3342 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3343 ;;Total ram usage:       15 bytes
  3344 ;; Hardware stack levels used:    1
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_calc_sha_256
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text7
  3353  006910                     __ptext7:
  3354                           	opt stack 0
  3355  006910                     _rotate_right:
  3356                           	opt stack 29
  3357                           
  3358                           ;main.c: 194: return value >> count | value << (32 - count);
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;incstack = 0
  3362  006910  5005               	movf	rotate_right@count,w,c
  3363  006912  0800               	sublw	0
  3364  006914  6E07               	movwf	??_rotate_right& (0+255),c
  3365  006916  0E20               	movlw	32
  3366  006918  2607               	addwf	??_rotate_right,f,c
  3367  00691A  C001  F008         	movff	rotate_right@value,??_rotate_right+1
  3368  00691E  C002  F009         	movff	rotate_right@value+1,??_rotate_right+2
  3369  006922  C003  F00A         	movff	rotate_right@value+2,??_rotate_right+3
  3370  006926  C004  F00B         	movff	rotate_right@value+3,??_rotate_right+4
  3371  00692A  2A07               	incf	??_rotate_right,f,c
  3372  00692C  D005               	goto	u1090
  3373  00692E                     u1095:
  3374  00692E  90D8               	bcf	status,0,c
  3375  006930  3608               	rlcf	??_rotate_right+1,f,c
  3376  006932  3609               	rlcf	??_rotate_right+2,f,c
  3377  006934  360A               	rlcf	??_rotate_right+3,f,c
  3378  006936  360B               	rlcf	??_rotate_right+4,f,c
  3379  006938                     u1090:
  3380  006938  2E07               	decfsz	??_rotate_right,f,c
  3381  00693A  D7F9               	goto	u1095
  3382  00693C  5005               	movf	rotate_right@count,w,c
  3383  00693E  C001  F00C         	movff	rotate_right@value,??_rotate_right+5
  3384  006942  C002  F00D         	movff	rotate_right@value+1,??_rotate_right+6
  3385  006946  C003  F00E         	movff	rotate_right@value+2,??_rotate_right+7
  3386  00694A  C004  F00F         	movff	rotate_right@value+3,??_rotate_right+8
  3387  00694E  2AE8               	incf	wreg,f,c
  3388  006950  D005               	goto	u1100
  3389  006952                     u1105:
  3390  006952  90D8               	bcf	status,0,c
  3391  006954  320F               	rrcf	??_rotate_right+8,f,c
  3392  006956  320E               	rrcf	??_rotate_right+7,f,c
  3393  006958  320D               	rrcf	??_rotate_right+6,f,c
  3394  00695A  320C               	rrcf	??_rotate_right+5,f,c
  3395  00695C                     u1100:
  3396  00695C  2EE8               	decfsz	wreg,f,c
  3397  00695E  D7F9               	goto	u1105
  3398  006960  5008               	movf	??_rotate_right+1,w,c
  3399  006962  100C               	iorwf	??_rotate_right+5,w,c
  3400  006964  6E01               	movwf	?_rotate_right,c
  3401  006966  5009               	movf	??_rotate_right+2,w,c
  3402  006968  100D               	iorwf	??_rotate_right+6,w,c
  3403  00696A  6E02               	movwf	?_rotate_right+1,c
  3404  00696C  500A               	movf	??_rotate_right+3,w,c
  3405  00696E  100E               	iorwf	??_rotate_right+7,w,c
  3406  006970  6E03               	movwf	?_rotate_right+2,c
  3407  006972  500B               	movf	??_rotate_right+4,w,c
  3408  006974  100F               	iorwf	??_rotate_right+8,w,c
  3409  006976  6E04               	movwf	?_rotate_right+3,c
  3410  006978  0012               	return	
  3411  00697A                     __end_of_rotate_right:
  3412                           	opt stack 0
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           postinc0	equ	0xFEE
  3420                           wreg	equ	0xFE8
  3421                           indf1	equ	0xFE7
  3422                           postinc1	equ	0xFE6
  3423                           postdec1	equ	0xFE5
  3424                           plusw1	equ	0xFE3
  3425                           fsr1h	equ	0xFE2
  3426                           fsr1l	equ	0xFE1
  3427                           indf2	equ	0xFDF
  3428                           postinc2	equ	0xFDE
  3429                           postdec2	equ	0xFDD
  3430                           plusw2	equ	0xFDB
  3431                           fsr2h	equ	0xFDA
  3432                           fsr2l	equ	0xFD9
  3433                           status	equ	0xFD8
  3434                           
  3435 ;; *************** function _init_buf_state *****************
  3436 ;; Defined at:
  3437 ;;		line 184 in file "main.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;  state           2    0[COMRAM] PTR struct buffer_state
  3440 ;;		 -> calc_sha_256@state(10), 
  3441 ;;  input           2    2[COMRAM] PTR const void 
  3442 ;;		 -> string(16), 
  3443 ;;  length          2    4[COMRAM] unsigned int 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;		None
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3455 ;;      Params:         6       0       0       0       0       0       0       0       0
  3456 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3458 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3459 ;;Total ram usage:        6 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; This function calls:
  3462 ;;		Nothing
  3463 ;; This function is called by:
  3464 ;;		_calc_sha_256
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text8
  3469  0068AE                     __ptext8:
  3470                           	opt stack 0
  3471  0068AE                     _init_buf_state:
  3472                           	opt stack 29
  3473                           
  3474                           ;main.c: 185: state->pointer = input;
  3475                           
  3476                           ;incstack = 0
  3477  0068AE  C001  FFD9         	movff	init_buf_state@state,fsr2l
  3478  0068B2  C002  FFDA         	movff	init_buf_state@state+1,fsr2h
  3479  0068B6  C003  FFDE         	movff	init_buf_state@input,postinc2
  3480  0068BA  C004  FFDD         	movff	init_buf_state@input+1,postdec2
  3481                           
  3482                           ;main.c: 186: state->length = length;
  3483  0068BE  EE20 F002          	lfsr	2,2
  3484  0068C2  5001               	movf	init_buf_state@state,w,c
  3485  0068C4  26D9               	addwf	fsr2l,f,c
  3486  0068C6  5002               	movf	init_buf_state@state+1,w,c
  3487  0068C8  22DA               	addwfc	fsr2h,f,c
  3488  0068CA  C005  FFDE         	movff	init_buf_state@length,postinc2
  3489  0068CE  C006  FFDD         	movff	init_buf_state@length+1,postdec2
  3490                           
  3491                           ;main.c: 187: state->total_len = length;
  3492  0068D2  EE20 F004          	lfsr	2,4
  3493  0068D6  5001               	movf	init_buf_state@state,w,c
  3494  0068D8  26D9               	addwf	fsr2l,f,c
  3495  0068DA  5002               	movf	init_buf_state@state+1,w,c
  3496  0068DC  22DA               	addwfc	fsr2h,f,c
  3497  0068DE  C005  FFDE         	movff	init_buf_state@length,postinc2
  3498  0068E2  C006  FFDD         	movff	init_buf_state@length+1,postdec2
  3499                           
  3500                           ;main.c: 188: state->single_one_delivered = 0;
  3501  0068E6  EE20 F006          	lfsr	2,6
  3502  0068EA  5001               	movf	init_buf_state@state,w,c
  3503  0068EC  26D9               	addwf	fsr2l,f,c
  3504  0068EE  5002               	movf	init_buf_state@state+1,w,c
  3505  0068F0  22DA               	addwfc	fsr2h,f,c
  3506  0068F2  0E00               	movlw	0
  3507  0068F4  6EDE               	movwf	postinc2,c
  3508  0068F6  0E00               	movlw	0
  3509  0068F8  6EDD               	movwf	postdec2,c
  3510                           
  3511                           ;main.c: 189: state->total_len_delivered = 0;
  3512  0068FA  EE20 F008          	lfsr	2,8
  3513  0068FE  5001               	movf	init_buf_state@state,w,c
  3514  006900  26D9               	addwf	fsr2l,f,c
  3515  006902  5002               	movf	init_buf_state@state+1,w,c
  3516  006904  22DA               	addwfc	fsr2h,f,c
  3517  006906  0E00               	movlw	0
  3518  006908  6EDE               	movwf	postinc2,c
  3519  00690A  0E00               	movlw	0
  3520  00690C  6EDD               	movwf	postdec2,c
  3521  00690E  0012               	return		;funcret
  3522  006910                     __end_of_init_buf_state:
  3523                           	opt stack 0
  3524                           tblptru	equ	0xFF8
  3525                           tblptrh	equ	0xFF7
  3526                           tblptrl	equ	0xFF6
  3527                           tablat	equ	0xFF5
  3528                           prodh	equ	0xFF4
  3529                           prodl	equ	0xFF3
  3530                           postinc0	equ	0xFEE
  3531                           wreg	equ	0xFE8
  3532                           indf1	equ	0xFE7
  3533                           postinc1	equ	0xFE6
  3534                           postdec1	equ	0xFE5
  3535                           plusw1	equ	0xFE3
  3536                           fsr1h	equ	0xFE2
  3537                           fsr1l	equ	0xFE1
  3538                           indf2	equ	0xFDF
  3539                           postinc2	equ	0xFDE
  3540                           postdec2	equ	0xFDD
  3541                           plusw2	equ	0xFDB
  3542                           fsr2h	equ	0xFDA
  3543                           fsr2l	equ	0xFD9
  3544                           status	equ	0xFD8
  3545                           
  3546 ;; *************** function _calc_chunk *****************
  3547 ;; Defined at:
  3548 ;;		line 198 in file "main.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;  chunk           2   11[COMRAM] PTR unsigned char 
  3551 ;;		 -> calc_sha_256@chunk(64), 
  3552 ;;  state           2   13[COMRAM] PTR struct buffer_state
  3553 ;;		 -> calc_sha_256@state(10), 
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;  i               2   23[COMRAM] int 
  3556 ;;  length          2   19[COMRAM] unsigned int 
  3557 ;;  left            2   17[COMRAM] const unsigned int 
  3558 ;;  space_in_chu    2   21[COMRAM] unsigned int 
  3559 ;; Return value:  Size  Location     Type
  3560 ;;                  2   11[COMRAM] int 
  3561 ;; Registers used:
  3562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3563 ;; Tracked objects:
  3564 ;;		On entry : 0/0
  3565 ;;		On exit  : 0/0
  3566 ;;		Unchanged: 0/0
  3567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3568 ;;      Params:         4       0       0       0       0       0       0       0       0
  3569 ;;      Locals:         8       0       0       0       0       0       0       0       0
  3570 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3571 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3572 ;;Total ram usage:       14 bytes
  3573 ;; Hardware stack levels used:    1
  3574 ;; Hardware stack levels required when called:    1
  3575 ;; This function calls:
  3576 ;;		_memcpy
  3577 ;;		_memset
  3578 ;; This function is called by:
  3579 ;;		_calc_sha_256
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text9
  3584  006F26                     __ptext9:
  3585                           	opt stack 0
  3586  006F26                     _calc_chunk:
  3587                           	opt stack 28
  3588                           
  3589                           ;main.c: 199: size_t space_in_chunk;
  3590                           ;main.c: 202: if (state->total_len_delivered) {
  3591                           
  3592                           ;incstack = 0
  3593  006F26  EE20 F008          	lfsr	2,8
  3594  006F2A  500E               	movf	calc_chunk@state,w,c
  3595  006F2C  26D9               	addwf	fsr2l,f,c
  3596  006F2E  500F               	movf	calc_chunk@state+1,w,c
  3597  006F30  22DA               	addwfc	fsr2h,f,c
  3598  006F32  50DE               	movf	postinc2,w,c
  3599  006F34  10DE               	iorwf	postinc2,w,c
  3600  006F36  B4D8               	btfsc	status,2,c
  3601  006F38  D005               	goto	l48
  3602                           
  3603                           ;main.c: 203: return 0;
  3604  006F3A  0E00               	movlw	0
  3605  006F3C  6E0D               	movwf	?_calc_chunk+1,c
  3606  006F3E  0E00               	movlw	0
  3607  006F40  6E0C               	movwf	?_calc_chunk,c
  3608  006F42  0012               	return	
  3609  006F44                     l48:
  3610                           
  3611                           ;main.c: 204: }
  3612                           ;main.c: 207: if (state->length >= 64) {
  3613  006F44  EE20 F002          	lfsr	2,2
  3614  006F48  500E               	movf	calc_chunk@state,w,c
  3615  006F4A  26D9               	addwf	fsr2l,f,c
  3616  006F4C  500F               	movf	calc_chunk@state+1,w,c
  3617  006F4E  22DA               	addwfc	fsr2h,f,c
  3618  006F50  0E01               	movlw	1
  3619  006F52  50DB               	movf	plusw2,w,c
  3620  006F54  E104               	bnz	u1120
  3621  006F56  0E40               	movlw	64
  3622  006F58  5CDE               	subwf	postinc2,w,c
  3623  006F5A  A0D8               	btfss	status,0,c
  3624  006F5C  D029               	goto	l50
  3625  006F5E                     u1120:
  3626                           
  3627                           ;main.c: 208: memcpy(chunk, state->pointer, 64);
  3628  006F5E  C00C  F001         	movff	calc_chunk@chunk,memcpy@d1
  3629  006F62  C00D  F002         	movff	calc_chunk@chunk+1,memcpy@d1+1
  3630  006F66  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  3631  006F6A  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  3632  006F6E  CFDE F003          	movff	postinc2,memcpy@s1
  3633  006F72  CFDD F004          	movff	postdec2,memcpy@s1+1
  3634  006F76  0E00               	movlw	0
  3635  006F78  6E06               	movwf	memcpy@n+1,c
  3636  006F7A  0E40               	movlw	64
  3637  006F7C  6E05               	movwf	memcpy@n,c
  3638  006F7E  ECBA  F033         	call	_memcpy	;wreg free
  3639                           
  3640                           ;main.c: 209: state->pointer += 64;
  3641  006F82  0E40               	movlw	64
  3642  006F84  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  3643  006F88  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  3644  006F8C  26DE               	addwf	postinc2,f,c
  3645  006F8E  0E00               	movlw	0
  3646  006F90  22DD               	addwfc	postdec2,f,c
  3647                           
  3648                           ;main.c: 210: state->length -= 64;
  3649  006F92  EE20 F002          	lfsr	2,2
  3650  006F96  500E               	movf	calc_chunk@state,w,c
  3651  006F98  26D9               	addwf	fsr2l,f,c
  3652  006F9A  500F               	movf	calc_chunk@state+1,w,c
  3653  006F9C  22DA               	addwfc	fsr2h,f,c
  3654  006F9E  0E40               	movlw	64
  3655  006FA0  5EDE               	subwf	postinc2,f,c
  3656  006FA2  0E00               	movlw	0
  3657  006FA4  5ADD               	subwfb	postdec2,f,c
  3658                           
  3659                           ;main.c: 211: return 1;
  3660  006FA6  0E00               	movlw	0
  3661  006FA8  6E0D               	movwf	?_calc_chunk+1,c
  3662  006FAA  0E01               	movlw	1
  3663  006FAC  6E0C               	movwf	?_calc_chunk,c
  3664  006FAE  0012               	return	
  3665  006FB0                     l50:
  3666                           
  3667                           ;main.c: 212: }
  3668                           ;main.c: 215: memcpy(chunk, state->pointer, state->length);
  3669  006FB0  C00C  F001         	movff	calc_chunk@chunk,memcpy@d1
  3670  006FB4  C00D  F002         	movff	calc_chunk@chunk+1,memcpy@d1+1
  3671  006FB8  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  3672  006FBC  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  3673  006FC0  CFDE F003          	movff	postinc2,memcpy@s1
  3674  006FC4  CFDD F004          	movff	postdec2,memcpy@s1+1
  3675  006FC8  EE20 F002          	lfsr	2,2
  3676  006FCC  500E               	movf	calc_chunk@state,w,c
  3677  006FCE  26D9               	addwf	fsr2l,f,c
  3678  006FD0  500F               	movf	calc_chunk@state+1,w,c
  3679  006FD2  22DA               	addwfc	fsr2h,f,c
  3680  006FD4  CFDE F005          	movff	postinc2,memcpy@n
  3681  006FD8  CFDD F006          	movff	postdec2,memcpy@n+1
  3682  006FDC  ECBA  F033         	call	_memcpy	;wreg free
  3683                           
  3684                           ;main.c: 216: chunk += state->length;
  3685  006FE0  EE20 F002          	lfsr	2,2
  3686  006FE4  500E               	movf	calc_chunk@state,w,c
  3687  006FE6  26D9               	addwf	fsr2l,f,c
  3688  006FE8  500F               	movf	calc_chunk@state+1,w,c
  3689  006FEA  22DA               	addwfc	fsr2h,f,c
  3690  006FEC  50DE               	movf	postinc2,w,c
  3691  006FEE  260C               	addwf	calc_chunk@chunk,f,c
  3692  006FF0  50DD               	movf	postdec2,w,c
  3693  006FF2  220D               	addwfc	calc_chunk@chunk+1,f,c
  3694                           
  3695                           ;main.c: 217: space_in_chunk = 64 - state->length;
  3696  006FF4  EE20 F002          	lfsr	2,2
  3697  006FF8  500E               	movf	calc_chunk@state,w,c
  3698  006FFA  26D9               	addwf	fsr2l,f,c
  3699  006FFC  500F               	movf	calc_chunk@state+1,w,c
  3700  006FFE  22DA               	addwfc	fsr2h,f,c
  3701  007000  CFDE F010          	movff	postinc2,??_calc_chunk
  3702  007004  CFDD F011          	movff	postdec2,??_calc_chunk+1
  3703  007008  1E10               	comf	??_calc_chunk,f,c
  3704  00700A  1E11               	comf	??_calc_chunk+1,f,c
  3705  00700C  4A10               	infsnz	??_calc_chunk,f,c
  3706  00700E  2A11               	incf	??_calc_chunk+1,f,c
  3707  007010  0E40               	movlw	64
  3708  007012  2410               	addwf	??_calc_chunk,w,c
  3709  007014  6E16               	movwf	calc_chunk@space_in_chunk,c
  3710  007016  0E00               	movlw	0
  3711  007018  2011               	addwfc	??_calc_chunk+1,w,c
  3712  00701A  6E17               	movwf	calc_chunk@space_in_chunk+1,c
  3713                           
  3714                           ;main.c: 218: state->pointer += state->length;
  3715  00701C  EE20 F002          	lfsr	2,2
  3716  007020  500E               	movf	calc_chunk@state,w,c
  3717  007022  26D9               	addwf	fsr2l,f,c
  3718  007024  500F               	movf	calc_chunk@state+1,w,c
  3719  007026  22DA               	addwfc	fsr2h,f,c
  3720  007028  CFDE F010          	movff	postinc2,??_calc_chunk
  3721  00702C  CFDD F011          	movff	postdec2,??_calc_chunk+1
  3722  007030  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  3723  007034  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  3724  007038  5010               	movf	??_calc_chunk,w,c
  3725  00703A  26DE               	addwf	postinc2,f,c
  3726  00703C  5011               	movf	??_calc_chunk+1,w,c
  3727  00703E  22DD               	addwfc	postdec2,f,c
  3728                           
  3729                           ;main.c: 219: state->length = 0;
  3730  007040  EE20 F002          	lfsr	2,2
  3731  007044  500E               	movf	calc_chunk@state,w,c
  3732  007046  26D9               	addwf	fsr2l,f,c
  3733  007048  500F               	movf	calc_chunk@state+1,w,c
  3734  00704A  22DA               	addwfc	fsr2h,f,c
  3735  00704C  0E00               	movlw	0
  3736  00704E  6EDE               	movwf	postinc2,c
  3737  007050  0E00               	movlw	0
  3738  007052  6EDD               	movwf	postdec2,c
  3739                           
  3740                           ;main.c: 222: if (!state->single_one_delivered) {
  3741  007054  EE20 F006          	lfsr	2,6
  3742  007058  500E               	movf	calc_chunk@state,w,c
  3743  00705A  26D9               	addwf	fsr2l,f,c
  3744  00705C  500F               	movf	calc_chunk@state+1,w,c
  3745  00705E  22DA               	addwfc	fsr2h,f,c
  3746  007060  50DE               	movf	postinc2,w,c
  3747  007062  10DE               	iorwf	postinc2,w,c
  3748  007064  A4D8               	btfss	status,2,c
  3749  007066  D015               	goto	l51
  3750                           
  3751                           ;main.c: 223: *chunk++ = 0x80;
  3752  007068  C00C  FFD9         	movff	calc_chunk@chunk,fsr2l
  3753  00706C  C00D  FFDA         	movff	calc_chunk@chunk+1,fsr2h
  3754  007070  0E80               	movlw	128
  3755  007072  6EDF               	movwf	indf2,c
  3756  007074  4A0C               	infsnz	calc_chunk@chunk,f,c
  3757  007076  2A0D               	incf	calc_chunk@chunk+1,f,c
  3758                           
  3759                           ;main.c: 224: space_in_chunk -= 1;
  3760  007078  0616               	decf	calc_chunk@space_in_chunk,f,c
  3761  00707A  A0D8               	btfss	status,0,c
  3762  00707C  0617               	decf	calc_chunk@space_in_chunk+1,f,c
  3763                           
  3764                           ;main.c: 225: state->single_one_delivered = 1;
  3765  00707E  EE20 F006          	lfsr	2,6
  3766  007082  500E               	movf	calc_chunk@state,w,c
  3767  007084  26D9               	addwf	fsr2l,f,c
  3768  007086  500F               	movf	calc_chunk@state+1,w,c
  3769  007088  22DA               	addwfc	fsr2h,f,c
  3770  00708A  0E01               	movlw	1
  3771  00708C  6EDE               	movwf	postinc2,c
  3772  00708E  0E00               	movlw	0
  3773  007090  6EDD               	movwf	postdec2,c
  3774  007092                     l51:
  3775                           
  3776                           ;main.c: 226: }
  3777                           ;main.c: 233: if (space_in_chunk >= 8) {
  3778  007092  5017               	movf	calc_chunk@space_in_chunk+1,w,c
  3779  007094  E104               	bnz	u1140
  3780  007096  0E08               	movlw	8
  3781  007098  5C16               	subwf	calc_chunk@space_in_chunk,w,c
  3782  00709A  A0D8               	btfss	status,0,c
  3783  00709C  D053               	goto	l52
  3784  00709E                     u1140:
  3785                           
  3786                           ;main.c: 234: const size_t left = space_in_chunk - 8;
  3787  00709E  0EF8               	movlw	248
  3788  0070A0  2416               	addwf	calc_chunk@space_in_chunk,w,c
  3789  0070A2  6E12               	movwf	calc_chunk@left,c
  3790  0070A4  0EFF               	movlw	255
  3791  0070A6  2017               	addwfc	calc_chunk@space_in_chunk+1,w,c
  3792  0070A8  6E13               	movwf	calc_chunk@left+1,c
  3793                           
  3794                           ;main.c: 235: size_t length = state->total_len;
  3795  0070AA  EE20 F004          	lfsr	2,4
  3796  0070AE  500E               	movf	calc_chunk@state,w,c
  3797  0070B0  26D9               	addwf	fsr2l,f,c
  3798  0070B2  500F               	movf	calc_chunk@state+1,w,c
  3799  0070B4  22DA               	addwfc	fsr2h,f,c
  3800  0070B6  CFDE F014          	movff	postinc2,calc_chunk@length
  3801  0070BA  CFDD F015          	movff	postdec2,calc_chunk@length+1
  3802                           
  3803                           ;main.c: 236: int i;
  3804                           ;main.c: 237: memset(chunk, 0x00, left);
  3805  0070BE  C00C  F001         	movff	calc_chunk@chunk,memset@p1
  3806  0070C2  C00D  F002         	movff	calc_chunk@chunk+1,memset@p1+1
  3807  0070C6  0E00               	movlw	0
  3808  0070C8  6E04               	movwf	memset@c+1,c
  3809  0070CA  0E00               	movlw	0
  3810  0070CC  6E03               	movwf	memset@c,c
  3811  0070CE  C012  F005         	movff	calc_chunk@left,memset@n
  3812  0070D2  C013  F006         	movff	calc_chunk@left+1,memset@n+1
  3813  0070D6  EC89  F033         	call	_memset	;wreg free
  3814                           
  3815                           ;main.c: 238: chunk += left;
  3816  0070DA  5012               	movf	calc_chunk@left,w,c
  3817  0070DC  260C               	addwf	calc_chunk@chunk,f,c
  3818  0070DE  5013               	movf	calc_chunk@left+1,w,c
  3819  0070E0  220D               	addwfc	calc_chunk@chunk+1,f,c
  3820                           
  3821                           ;main.c: 241: chunk[7] = (uint8_t) (length << 3);
  3822  0070E2  EE20 F007          	lfsr	2,7
  3823  0070E6  500C               	movf	calc_chunk@chunk,w,c
  3824  0070E8  26D9               	addwf	fsr2l,f,c
  3825  0070EA  500D               	movf	calc_chunk@chunk+1,w,c
  3826  0070EC  22DA               	addwfc	fsr2h,f,c
  3827  0070EE  3814               	swapf	calc_chunk@length,w,c
  3828  0070F0  42E8               	rrncf	wreg,f,c
  3829  0070F2  0BF8               	andlw	248
  3830  0070F4  6EDF               	movwf	indf2,c
  3831                           
  3832                           ;main.c: 242: length >>= 5;
  3833  0070F6  0E05               	movlw	5
  3834  0070F8  6E10               	movwf	??_calc_chunk& (0+255),c
  3835  0070FA                     u1155:
  3836  0070FA  90D8               	bcf	status,0,c
  3837  0070FC  3215               	rrcf	calc_chunk@length+1,f,c
  3838  0070FE  3214               	rrcf	calc_chunk@length,f,c
  3839  007100  2E10               	decfsz	??_calc_chunk& (0+255),f,c
  3840  007102  D7FB               	goto	u1155
  3841                           
  3842                           ;main.c: 243: for (i = 6; i >= 0; i--) {
  3843  007104  0E00               	movlw	0
  3844  007106  6E19               	movwf	calc_chunk@i+1,c
  3845  007108  0E06               	movlw	6
  3846  00710A  6E18               	movwf	calc_chunk@i,c
  3847  00710C                     l1556:
  3848  00710C  BE19               	btfsc	calc_chunk@i+1,7,c
  3849  00710E  D00F               	goto	u1170
  3850                           
  3851                           ;main.c: 244: chunk[i] = (uint8_t) length;
  3852  007110  5018               	movf	calc_chunk@i,w,c
  3853  007112  240C               	addwf	calc_chunk@chunk,w,c
  3854  007114  6ED9               	movwf	fsr2l,c
  3855  007116  5019               	movf	calc_chunk@i+1,w,c
  3856  007118  200D               	addwfc	calc_chunk@chunk+1,w,c
  3857  00711A  6EDA               	movwf	fsr2h,c
  3858  00711C  C014  FFDF         	movff	calc_chunk@length,indf2
  3859                           
  3860                           ;main.c: 245: length >>= 8;
  3861  007120  5015               	movf	calc_chunk@length+1,w,c
  3862  007122  6E14               	movwf	calc_chunk@length,c
  3863  007124  6A15               	clrf	calc_chunk@length+1,c
  3864  007126  0618               	decf	calc_chunk@i,f,c
  3865  007128  A0D8               	btfss	status,0,c
  3866  00712A  0619               	decf	calc_chunk@i+1,f,c
  3867  00712C  D7EF               	goto	l1556
  3868  00712E                     u1170:
  3869                           
  3870                           ;main.c: 246: }
  3871                           ;main.c: 247: state->total_len_delivered = 1;
  3872  00712E  EE20 F008          	lfsr	2,8
  3873  007132  500E               	movf	calc_chunk@state,w,c
  3874  007134  26D9               	addwf	fsr2l,f,c
  3875  007136  500F               	movf	calc_chunk@state+1,w,c
  3876  007138  22DA               	addwfc	fsr2h,f,c
  3877  00713A  0E01               	movlw	1
  3878  00713C  6EDE               	movwf	postinc2,c
  3879  00713E  0E00               	movlw	0
  3880  007140  6EDD               	movwf	postdec2,c
  3881                           
  3882                           ;main.c: 248: } else {
  3883  007142  D00E               	goto	l55
  3884  007144                     l52:
  3885                           
  3886                           ;main.c: 250: memset(chunk, 0x00, space_in_chunk);
  3887  007144  C00C  F001         	movff	calc_chunk@chunk,memset@p1
  3888  007148  C00D  F002         	movff	calc_chunk@chunk+1,memset@p1+1
  3889  00714C  0E00               	movlw	0
  3890  00714E  6E04               	movwf	memset@c+1,c
  3891  007150  0E00               	movlw	0
  3892  007152  6E03               	movwf	memset@c,c
  3893  007154  C016  F005         	movff	calc_chunk@space_in_chunk,memset@n
  3894  007158  C017  F006         	movff	calc_chunk@space_in_chunk+1,memset@n+1
  3895  00715C  EC89  F033         	call	_memset	;wreg free
  3896  007160                     l55:
  3897                           
  3898                           ;main.c: 251: }
  3899                           ;main.c: 253: return 1;
  3900  007160  0E00               	movlw	0
  3901  007162  6E0D               	movwf	?_calc_chunk+1,c
  3902  007164  0E01               	movlw	1
  3903  007166  6E0C               	movwf	?_calc_chunk,c
  3904  007168  0012               	return	
  3905  00716A                     __end_of_calc_chunk:
  3906                           	opt stack 0
  3907                           tblptru	equ	0xFF8
  3908                           tblptrh	equ	0xFF7
  3909                           tblptrl	equ	0xFF6
  3910                           tablat	equ	0xFF5
  3911                           prodh	equ	0xFF4
  3912                           prodl	equ	0xFF3
  3913                           postinc0	equ	0xFEE
  3914                           wreg	equ	0xFE8
  3915                           indf1	equ	0xFE7
  3916                           postinc1	equ	0xFE6
  3917                           postdec1	equ	0xFE5
  3918                           plusw1	equ	0xFE3
  3919                           fsr1h	equ	0xFE2
  3920                           fsr1l	equ	0xFE1
  3921                           indf2	equ	0xFDF
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           plusw2	equ	0xFDB
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8
  3928                           
  3929 ;; *************** function _memset *****************
  3930 ;; Defined at:
  3931 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  p1              2    0[COMRAM] PTR void 
  3934 ;;		 -> calc_sha_256@word(256), calc_sha_256@chunk(64), 
  3935 ;;  c               2    2[COMRAM] int 
  3936 ;;  n               2    4[COMRAM] unsigned int 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  p               2    6[COMRAM] PTR unsigned char 
  3939 ;;		 -> calc_sha_256@word(256), calc_sha_256@chunk(64), 
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  2    0[COMRAM] PTR void 
  3942 ;; Registers used:
  3943 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3949 ;;      Params:         6       0       0       0       0       0       0       0       0
  3950 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3952 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3953 ;;Total ram usage:        8 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; This function calls:
  3956 ;;		Nothing
  3957 ;; This function is called by:
  3958 ;;		_calc_chunk
  3959 ;;		_calc_sha_256
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text10
  3964  006712                     __ptext10:
  3965                           	opt stack 0
  3966  006712                     _memset:
  3967                           	opt stack 29
  3968                           
  3969                           ;incstack = 0
  3970  006712  C001  F007         	movff	memset@p1,memset@p
  3971  006716  C002  F008         	movff	memset@p1+1,memset@p+1
  3972  00671A  D008               	goto	l582
  3973  00671C                     l1402:
  3974  00671C  C007  FFD9         	movff	memset@p,fsr2l
  3975  006720  C008  FFDA         	movff	memset@p+1,fsr2h
  3976  006724  C003  FFDF         	movff	memset@c,indf2
  3977  006728  4A07               	infsnz	memset@p,f,c
  3978  00672A  2A08               	incf	memset@p+1,f,c
  3979  00672C                     l582:
  3980  00672C  0605               	decf	memset@n,f,c
  3981  00672E  A0D8               	btfss	status,0,c
  3982  006730  0606               	decf	memset@n+1,f,c
  3983  006732  2805               	incf	memset@n,w,c
  3984  006734  E1F3               	bnz	l1402
  3985  006736  2806               	incf	memset@n+1,w,c
  3986  006738  B4D8               	btfsc	status,2,c
  3987  00673A  0012               	return	
  3988  00673C  D7EF               	goto	l583
  3989  00673E                     __end_of_memset:
  3990                           	opt stack 0
  3991                           tblptru	equ	0xFF8
  3992                           tblptrh	equ	0xFF7
  3993                           tblptrl	equ	0xFF6
  3994                           tablat	equ	0xFF5
  3995                           prodh	equ	0xFF4
  3996                           prodl	equ	0xFF3
  3997                           postinc0	equ	0xFEE
  3998                           wreg	equ	0xFE8
  3999                           indf1	equ	0xFE7
  4000                           postinc1	equ	0xFE6
  4001                           postdec1	equ	0xFE5
  4002                           plusw1	equ	0xFE3
  4003                           fsr1h	equ	0xFE2
  4004                           fsr1l	equ	0xFE1
  4005                           indf2	equ	0xFDF
  4006                           postinc2	equ	0xFDE
  4007                           postdec2	equ	0xFDD
  4008                           plusw2	equ	0xFDB
  4009                           fsr2h	equ	0xFDA
  4010                           fsr2l	equ	0xFD9
  4011                           status	equ	0xFD8
  4012                           
  4013 ;; *************** function _memcpy *****************
  4014 ;; Defined at:
  4015 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memcpy.c"
  4016 ;; Parameters:    Size  Location     Type
  4017 ;;  d1              2    0[COMRAM] PTR void 
  4018 ;;		 -> calc_sha_256@chunk(64), 
  4019 ;;  s1              2    2[COMRAM] PTR const void 
  4020 ;;		 -> string(16), 
  4021 ;;  n               2    4[COMRAM] unsigned int 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  s               2    8[COMRAM] PTR const unsigned char 
  4024 ;;		 -> string(16), 
  4025 ;;  d               2    6[COMRAM] PTR unsigned char 
  4026 ;;		 -> calc_sha_256@chunk(64), 
  4027 ;;  tmp             1   10[COMRAM] unsigned char 
  4028 ;; Return value:  Size  Location     Type
  4029 ;;                  2    0[COMRAM] PTR void 
  4030 ;; Registers used:
  4031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4032 ;; Tracked objects:
  4033 ;;		On entry : 0/0
  4034 ;;		On exit  : 0/0
  4035 ;;		Unchanged: 0/0
  4036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4037 ;;      Params:         6       0       0       0       0       0       0       0       0
  4038 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4039 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4040 ;;      Totals:        11       0       0       0       0       0       0       0       0
  4041 ;;Total ram usage:       11 bytes
  4042 ;; Hardware stack levels used:    1
  4043 ;; This function calls:
  4044 ;;		Nothing
  4045 ;; This function is called by:
  4046 ;;		_calc_chunk
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           	psect	text11
  4051  006774                     __ptext11:
  4052                           	opt stack 0
  4053  006774                     _memcpy:
  4054                           	opt stack 28
  4055                           
  4056                           ;incstack = 0
  4057  006774  C003  F009         	movff	memcpy@s1,memcpy@s
  4058  006778  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  4059  00677C  C001  F007         	movff	memcpy@d1,memcpy@d
  4060  006780  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  4061  006784  D011               	goto	l576
  4062  006786                     l1390:
  4063  006786  C009  FFF6         	movff	memcpy@s,tblptrl
  4064  00678A  C00A  FFF7         	movff	memcpy@s+1,tblptrh
  4065  00678E                     	if	0	;tblptru may be non-zero
  4066  00678E                     	endif
  4067  00678E                     	if	0	;tblptru may be non-zero
  4068  00678E                     	endif
  4069  00678E  0008               	tblrd		*
  4070  006790  CFF5 F00B          	movff	tablat,memcpy@tmp
  4071  006794  4A09               	infsnz	memcpy@s,f,c
  4072  006796  2A0A               	incf	memcpy@s+1,f,c
  4073  006798  C007  FFD9         	movff	memcpy@d,fsr2l
  4074  00679C  C008  FFDA         	movff	memcpy@d+1,fsr2h
  4075  0067A0  C00B  FFDF         	movff	memcpy@tmp,indf2
  4076  0067A4  4A07               	infsnz	memcpy@d,f,c
  4077  0067A6  2A08               	incf	memcpy@d+1,f,c
  4078  0067A8                     l576:
  4079  0067A8  0605               	decf	memcpy@n,f,c
  4080  0067AA  A0D8               	btfss	status,0,c
  4081  0067AC  0606               	decf	memcpy@n+1,f,c
  4082  0067AE  2805               	incf	memcpy@n,w,c
  4083  0067B0  E1EA               	bnz	l1390
  4084  0067B2  2806               	incf	memcpy@n+1,w,c
  4085  0067B4  B4D8               	btfsc	status,2,c
  4086  0067B6  0012               	return	
  4087  0067B8  D7E6               	goto	l577
  4088  0067BA                     __end_of_memcpy:
  4089                           	opt stack 0
  4090                           tblptru	equ	0xFF8
  4091                           tblptrh	equ	0xFF7
  4092                           tblptrl	equ	0xFF6
  4093                           tablat	equ	0xFF5
  4094                           prodh	equ	0xFF4
  4095                           prodl	equ	0xFF3
  4096                           postinc0	equ	0xFEE
  4097                           wreg	equ	0xFE8
  4098                           indf1	equ	0xFE7
  4099                           postinc1	equ	0xFE6
  4100                           postdec1	equ	0xFE5
  4101                           plusw1	equ	0xFE3
  4102                           fsr1h	equ	0xFE2
  4103                           fsr1l	equ	0xFE1
  4104                           indf2	equ	0xFDF
  4105                           postinc2	equ	0xFDE
  4106                           postdec2	equ	0xFDD
  4107                           plusw2	equ	0xFDB
  4108                           fsr2h	equ	0xFDA
  4109                           fsr2l	equ	0xFD9
  4110                           status	equ	0xFD8
  4111                           
  4112 ;; *************** function _USART_SendString *****************
  4113 ;; Defined at:
  4114 ;;		line 146 in file "main.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  out             2    1[COMRAM] PTR const unsigned char 
  4117 ;;		 -> STR_3(11), STR_2(14), main@hash_string(65), 
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4129 ;;      Params:         2       0       0       0       0       0       0       0       0
  4130 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4131 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4132 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4133 ;;Total ram usage:        2 bytes
  4134 ;; Hardware stack levels used:    1
  4135 ;; Hardware stack levels required when called:    1
  4136 ;; This function calls:
  4137 ;;		_USART_TxChar
  4138 ;; This function is called by:
  4139 ;;		_main
  4140 ;; This function uses a non-reentrant model
  4141 ;;
  4142                           
  4143                           	psect	text12
  4144  00680A                     __ptext12:
  4145                           	opt stack 0
  4146  00680A                     _USART_SendString:
  4147                           	opt stack 29
  4148                           
  4149                           ;main.c: 148: while(*out!='\0')
  4150                           
  4151                           ;incstack = 0
  4152  00680A  D014               	goto	l34
  4153  00680C                     
  4154                           ;main.c: 149: {
  4155                           ;main.c: 150: USART_TxChar(*out);
  4156  00680C  C002  FFF6         	movff	USART_SendString@out,tblptrl
  4157  006810  C003  FFF7         	movff	USART_SendString@out+1,tblptrh
  4158  006814  6AF8               	clrf	tblptru,c
  4159  006816  0E07               	movlw	(high __ramtop+-1)
  4160  006818  64F7               	cpfsgt	tblptrh,c
  4161  00681A  D003               	bra	u1687
  4162  00681C  0008               	tblrd		*
  4163  00681E  50F5               	movf	tablat,w,c
  4164  006820  D005               	bra	u1680
  4165  006822                     u1687:
  4166  006822  CFF6 FFE1          	movff	tblptrl,fsr1l
  4167  006826  CFF7 FFE2          	movff	tblptrh,fsr1h
  4168  00682A  50E7               	movf	indf1,w,c
  4169  00682C                     u1680:
  4170  00682C  EC51  F033         	call	_USART_TxChar
  4171                           
  4172                           ;main.c: 151: out++;
  4173  006830  4A02               	infsnz	USART_SendString@out,f,c
  4174  006832  2A03               	incf	USART_SendString@out+1,f,c
  4175  006834                     l34:
  4176  006834  C002  FFF6         	movff	USART_SendString@out,tblptrl
  4177  006838  C003  FFF7         	movff	USART_SendString@out+1,tblptrh
  4178  00683C  6AF8               	clrf	tblptru,c
  4179  00683E  0E07               	movlw	(high __ramtop+-1)
  4180  006840  64F7               	cpfsgt	tblptrh,c
  4181  006842  D003               	bra	u1697
  4182  006844  0008               	tblrd		*
  4183  006846  50F5               	movf	tablat,w,c
  4184  006848  D005               	bra	u1690
  4185  00684A                     u1697:
  4186  00684A  CFF6 FFE1          	movff	tblptrl,fsr1l
  4187  00684E  CFF7 FFE2          	movff	tblptrh,fsr1h
  4188  006852  50E7               	movf	indf1,w,c
  4189  006854                     u1690:
  4190  006854  0900               	iorlw	0
  4191  006856  B4D8               	btfsc	status,2,c
  4192  006858  0012               	return	
  4193  00685A  D7D8               	goto	l35
  4194  00685C                     __end_of_USART_SendString:
  4195                           	opt stack 0
  4196                           tblptru	equ	0xFF8
  4197                           tblptrh	equ	0xFF7
  4198                           tblptrl	equ	0xFF6
  4199                           tablat	equ	0xFF5
  4200                           prodh	equ	0xFF4
  4201                           prodl	equ	0xFF3
  4202                           postinc0	equ	0xFEE
  4203                           wreg	equ	0xFE8
  4204                           indf1	equ	0xFE7
  4205                           postinc1	equ	0xFE6
  4206                           postdec1	equ	0xFE5
  4207                           plusw1	equ	0xFE3
  4208                           fsr1h	equ	0xFE2
  4209                           fsr1l	equ	0xFE1
  4210                           indf2	equ	0xFDF
  4211                           postinc2	equ	0xFDE
  4212                           postdec2	equ	0xFDD
  4213                           plusw2	equ	0xFDB
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function _USART_TxChar *****************
  4219 ;; Defined at:
  4220 ;;		line 136 in file "main.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  out             1    wreg     unsigned char 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;  out             1    0[COMRAM] unsigned char 
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4234 ;;      Params:         0       0       0       0       0       0       0       0       0
  4235 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4237 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4238 ;;Total ram usage:        1 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; This function calls:
  4241 ;;		Nothing
  4242 ;; This function is called by:
  4243 ;;		_USART_SendString
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text13
  4248  0066A2                     __ptext13:
  4249                           	opt stack 0
  4250  0066A2                     _USART_TxChar:
  4251                           	opt stack 29
  4252                           
  4253                           ;incstack = 0
  4254                           ;USART_TxChar@out stored from wreg
  4255  0066A2  6E01               	movwf	USART_TxChar@out,c
  4256  0066A4                     
  4257                           ;main.c: 138: while(TXIF==0);
  4258  0066A4  A89E               	btfss	3998,4,c	;volatile
  4259  0066A6  D7FE               	goto	l1484
  4260                           
  4261                           ;main.c: 139: TXREG=out;
  4262  0066A8  C001  FFAD         	movff	USART_TxChar@out,4013	;volatile
  4263  0066AC  0012               	return		;funcret
  4264  0066AE                     __end_of_USART_TxChar:
  4265                           	opt stack 0
  4266                           tblptru	equ	0xFF8
  4267                           tblptrh	equ	0xFF7
  4268                           tblptrl	equ	0xFF6
  4269                           tablat	equ	0xFF5
  4270                           prodh	equ	0xFF4
  4271                           prodl	equ	0xFF3
  4272                           postinc0	equ	0xFEE
  4273                           wreg	equ	0xFE8
  4274                           indf1	equ	0xFE7
  4275                           postinc1	equ	0xFE6
  4276                           postdec1	equ	0xFE5
  4277                           plusw1	equ	0xFE3
  4278                           fsr1h	equ	0xFE2
  4279                           fsr1l	equ	0xFE1
  4280                           indf2	equ	0xFDF
  4281                           postinc2	equ	0xFDE
  4282                           postdec2	equ	0xFDD
  4283                           plusw2	equ	0xFDB
  4284                           fsr2h	equ	0xFDA
  4285                           fsr2l	equ	0xFD9
  4286                           status	equ	0xFD8
  4287                           
  4288 ;; *************** function _USART_Init *****************
  4289 ;; Defined at:
  4290 ;;		line 122 in file "main.c"
  4291 ;; Parameters:    Size  Location     Type
  4292 ;;  baud_rate       4   45[COMRAM] long 
  4293 ;; Auto vars:     Size  Location     Type
  4294 ;;  temp            3   49[COMRAM] float 
  4295 ;; Return value:  Size  Location     Type
  4296 ;;                  1    wreg      void 
  4297 ;; Registers used:
  4298 ;;		wreg, status,2, status,0, cstack
  4299 ;; Tracked objects:
  4300 ;;		On entry : 0/0
  4301 ;;		On exit  : 0/0
  4302 ;;		Unchanged: 0/0
  4303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4304 ;;      Params:         4       0       0       0       0       0       0       0       0
  4305 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4306 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4307 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4308 ;;Total ram usage:        7 bytes
  4309 ;; Hardware stack levels used:    1
  4310 ;; Hardware stack levels required when called:    2
  4311 ;; This function calls:
  4312 ;;		___altoft
  4313 ;;		___ftadd
  4314 ;;		___ftdiv
  4315 ;;		___fttol
  4316 ;; This function is called by:
  4317 ;;		_main
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text14
  4322  0069F2                     __ptext14:
  4323                           	opt stack 0
  4324  0069F2                     _USART_Init:
  4325                           	opt stack 28
  4326                           
  4327                           ;main.c: 124: float temp;
  4328                           ;main.c: 125: TRISC6=0;
  4329                           
  4330                           ;incstack = 0
  4331  0069F2  9C94               	bcf	3988,6,c	;volatile
  4332                           
  4333                           ;main.c: 126: TRISC7=1;
  4334  0069F4  8E94               	bsf	3988,7,c	;volatile
  4335                           
  4336                           ;main.c: 127: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  4337  0069F6  C02E  F009         	movff	USART_Init@baud_rate,___altoft@c
  4338  0069FA  C02F  F00A         	movff	USART_Init@baud_rate+1,___altoft@c+1
  4339  0069FE  C030  F00B         	movff	USART_Init@baud_rate+2,___altoft@c+2
  4340  006A02  C031  F00C         	movff	USART_Init@baud_rate+3,___altoft@c+3
  4341  006A06  ECBD  F034         	call	___altoft	;wreg free
  4342  006A0A  C009  F016         	movff	?___altoft,___ftdiv@f2
  4343  006A0E  C00A  F017         	movff	?___altoft+1,___ftdiv@f2+1
  4344  006A12  C00B  F018         	movff	?___altoft+2,___ftdiv@f2+2
  4345  006A16  0E24               	movlw	36
  4346  006A18  6E13               	movwf	___ftdiv@f1,c
  4347  006A1A  0EF4               	movlw	244
  4348  006A1C  6E14               	movwf	___ftdiv@f1+1,c
  4349  006A1E  0E47               	movlw	71
  4350  006A20  6E15               	movwf	___ftdiv@f1+2,c
  4351  006A22  ECD0  F035         	call	___ftdiv	;wreg free
  4352  006A26  C013  F022         	movff	?___ftdiv,___ftadd@f1
  4353  006A2A  C014  F023         	movff	?___ftdiv+1,___ftadd@f1+1
  4354  006A2E  C015  F024         	movff	?___ftdiv+2,___ftadd@f1+2
  4355  006A32  0E00               	movlw	0
  4356  006A34  6E25               	movwf	___ftadd@f2,c
  4357  006A36  0E80               	movlw	128
  4358  006A38  6E26               	movwf	___ftadd@f2+1,c
  4359  006A3A  0EBF               	movlw	191
  4360  006A3C  6E27               	movwf	___ftadd@f2+2,c
  4361  006A3E  ECBD  F036         	call	___ftadd	;wreg free
  4362  006A42  C022  F032         	movff	?___ftadd,USART_Init@temp
  4363  006A46  C023  F033         	movff	?___ftadd+1,USART_Init@temp+1
  4364  006A4A  C024  F034         	movff	?___ftadd+2,USART_Init@temp+2
  4365                           
  4366                           ;main.c: 128: SPBRG=(int)temp;
  4367  006A4E  C032  F001         	movff	USART_Init@temp,___fttol@f1
  4368  006A52  C033  F002         	movff	USART_Init@temp+1,___fttol@f1+1
  4369  006A56  C034  F003         	movff	USART_Init@temp+2,___fttol@f1+2
  4370  006A5A  EC43  F036         	call	___fttol	;wreg free
  4371  006A5E  5001               	movf	?___fttol,w,c
  4372  006A60  6EAF               	movwf	4015,c	;volatile
  4373                           
  4374                           ;main.c: 129: TXSTA=0x20;
  4375  006A62  0E20               	movlw	32
  4376  006A64  6EAC               	movwf	4012,c	;volatile
  4377                           
  4378                           ;main.c: 130: RCSTA=0x80;
  4379  006A66  0E80               	movlw	128
  4380  006A68  6EAB               	movwf	4011,c	;volatile
  4381  006A6A  0012               	return		;funcret
  4382  006A6C                     __end_of_USART_Init:
  4383                           	opt stack 0
  4384                           tblptru	equ	0xFF8
  4385                           tblptrh	equ	0xFF7
  4386                           tblptrl	equ	0xFF6
  4387                           tablat	equ	0xFF5
  4388                           prodh	equ	0xFF4
  4389                           prodl	equ	0xFF3
  4390                           postinc0	equ	0xFEE
  4391                           wreg	equ	0xFE8
  4392                           indf1	equ	0xFE7
  4393                           postinc1	equ	0xFE6
  4394                           postdec1	equ	0xFE5
  4395                           plusw1	equ	0xFE3
  4396                           fsr1h	equ	0xFE2
  4397                           fsr1l	equ	0xFE1
  4398                           indf2	equ	0xFDF
  4399                           postinc2	equ	0xFDE
  4400                           postdec2	equ	0xFDD
  4401                           plusw2	equ	0xFDB
  4402                           fsr2h	equ	0xFDA
  4403                           fsr2l	equ	0xFD9
  4404                           status	equ	0xFD8
  4405                           
  4406 ;; *************** function ___fttol *****************
  4407 ;; Defined at:
  4408 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;  f1              3    0[COMRAM] float 
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;  lval            4   10[COMRAM] unsigned long 
  4413 ;;  exp1            1   14[COMRAM] unsigned char 
  4414 ;;  sign1           1    9[COMRAM] unsigned char 
  4415 ;; Return value:  Size  Location     Type
  4416 ;;                  4    0[COMRAM] long 
  4417 ;; Registers used:
  4418 ;;		wreg, status,2, status,0
  4419 ;; Tracked objects:
  4420 ;;		On entry : 0/0
  4421 ;;		On exit  : 0/0
  4422 ;;		Unchanged: 0/0
  4423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4424 ;;      Params:         4       0       0       0       0       0       0       0       0
  4425 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4426 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4427 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4428 ;;Total ram usage:       15 bytes
  4429 ;; Hardware stack levels used:    1
  4430 ;; This function calls:
  4431 ;;		Nothing
  4432 ;; This function is called by:
  4433 ;;		_USART_Init
  4434 ;; This function uses a non-reentrant model
  4435 ;;
  4436                           
  4437                           	psect	text15
  4438  006C86                     __ptext15:
  4439                           	opt stack 0
  4440  006C86                     ___fttol:
  4441                           	opt stack 29
  4442                           
  4443                           ;incstack = 0
  4444  006C86  C003  F005         	movff	___fttol@f1+2,??___fttol
  4445  006C8A  6A06               	clrf	(??___fttol+1)& (0+255),c
  4446  006C8C  6A07               	clrf	(??___fttol+2)& (0+255),c
  4447  006C8E  3402               	rlcf	___fttol@f1+1,w,c
  4448  006C90  3605               	rlcf	??___fttol& (0+255),f,c
  4449  006C92  E301               	bnc	u1601
  4450  006C94  8006               	bsf	(??___fttol+1)& (0+255),0,c
  4451  006C96                     u1601:
  4452  006C96  5005               	movf	??___fttol,w,c
  4453  006C98  6E0F               	movwf	___fttol@exp1,c
  4454  006C9A  500F               	movf	___fttol@exp1,w,c
  4455  006C9C  A4D8               	btfss	status,2,c
  4456  006C9E  D009               	goto	l458
  4457  006CA0  0E00               	movlw	0
  4458  006CA2  6E01               	movwf	?___fttol,c
  4459  006CA4  0E00               	movlw	0
  4460  006CA6  6E02               	movwf	?___fttol+1,c
  4461  006CA8  0E00               	movlw	0
  4462  006CAA  6E03               	movwf	?___fttol+2,c
  4463  006CAC  0E00               	movlw	0
  4464  006CAE  6E04               	movwf	?___fttol+3,c
  4465  006CB0  0012               	return	
  4466  006CB2                     l458:
  4467  006CB2  0E17               	movlw	23
  4468  006CB4  6E05               	movwf	??___fttol& (0+255),c
  4469  006CB6  C001  F006         	movff	___fttol@f1,??___fttol+1
  4470  006CBA  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  4471  006CBE  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  4472  006CC2  2805               	incf	??___fttol,w,c
  4473  006CC4  6E09               	movwf	(??___fttol+4)& (0+255),c
  4474  006CC6  D004               	goto	u1620
  4475  006CC8                     u1625:
  4476  006CC8  90D8               	bcf	status,0,c
  4477  006CCA  3208               	rrcf	??___fttol+3,f,c
  4478  006CCC  3207               	rrcf	??___fttol+2,f,c
  4479  006CCE  3206               	rrcf	??___fttol+1,f,c
  4480  006CD0                     u1620:
  4481  006CD0  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  4482  006CD2  D7FA               	goto	u1625
  4483  006CD4  5006               	movf	??___fttol+1,w,c
  4484  006CD6  6E0A               	movwf	___fttol@sign1,c
  4485  006CD8  8E02               	bsf	___fttol@f1+1,7,c
  4486  006CDA  0EFF               	movlw	255
  4487  006CDC  1601               	andwf	___fttol@f1,f,c
  4488  006CDE  0EFF               	movlw	255
  4489  006CE0  1602               	andwf	___fttol@f1+1,f,c
  4490  006CE2  0E00               	movlw	0
  4491  006CE4  1603               	andwf	___fttol@f1+2,f,c
  4492  006CE6  5001               	movf	___fttol@f1,w,c
  4493  006CE8  6E0B               	movwf	___fttol@lval,c
  4494  006CEA  5002               	movf	___fttol@f1+1,w,c
  4495  006CEC  6E0C               	movwf	___fttol@lval+1,c
  4496  006CEE  5003               	movf	___fttol@f1+2,w,c
  4497  006CF0  6E0D               	movwf	___fttol@lval+2,c
  4498  006CF2  6A0E               	clrf	___fttol@lval+3,c
  4499  006CF4  0E8E               	movlw	142
  4500  006CF6  5E0F               	subwf	___fttol@exp1,f,c
  4501  006CF8  AE0F               	btfss	___fttol@exp1,7,c
  4502  006CFA  D016               	goto	l460
  4503  006CFC  500F               	movf	___fttol@exp1,w,c
  4504  006CFE  0A80               	xorlw	128
  4505  006D00  0F8F               	addlw	143
  4506  006D02  B0D8               	btfsc	status,0,c
  4507  006D04  D009               	goto	l461
  4508  006D06  0E00               	movlw	0
  4509  006D08  6E01               	movwf	?___fttol,c
  4510  006D0A  0E00               	movlw	0
  4511  006D0C  6E02               	movwf	?___fttol+1,c
  4512  006D0E  0E00               	movlw	0
  4513  006D10  6E03               	movwf	?___fttol+2,c
  4514  006D12  0E00               	movlw	0
  4515  006D14  6E04               	movwf	?___fttol+3,c
  4516  006D16  0012               	return	
  4517  006D18                     l461:
  4518  006D18  90D8               	bcf	status,0,c
  4519  006D1A  320E               	rrcf	___fttol@lval+3,f,c
  4520  006D1C  320D               	rrcf	___fttol@lval+2,f,c
  4521  006D1E  320C               	rrcf	___fttol@lval+1,f,c
  4522  006D20  320B               	rrcf	___fttol@lval,f,c
  4523  006D22  3E0F               	incfsz	___fttol@exp1,f,c
  4524  006D24  D7F9               	goto	l461
  4525  006D26  D015               	goto	u1660
  4526  006D28                     l460:
  4527  006D28  0E17               	movlw	23
  4528  006D2A  640F               	cpfsgt	___fttol@exp1,c
  4529  006D2C  D00F               	goto	l466
  4530  006D2E  0E00               	movlw	0
  4531  006D30  6E01               	movwf	?___fttol,c
  4532  006D32  0E00               	movlw	0
  4533  006D34  6E02               	movwf	?___fttol+1,c
  4534  006D36  0E00               	movlw	0
  4535  006D38  6E03               	movwf	?___fttol+2,c
  4536  006D3A  0E00               	movlw	0
  4537  006D3C  6E04               	movwf	?___fttol+3,c
  4538  006D3E  0012               	return	
  4539  006D40  90D8               	bcf	status,0,c
  4540  006D42  360B               	rlcf	___fttol@lval,f,c
  4541  006D44  360C               	rlcf	___fttol@lval+1,f,c
  4542  006D46  360D               	rlcf	___fttol@lval+2,f,c
  4543  006D48  360E               	rlcf	___fttol@lval+3,f,c
  4544  006D4A  060F               	decf	___fttol@exp1,f,c
  4545  006D4C                     l466:
  4546  006D4C  500F               	movf	___fttol@exp1,w,c
  4547  006D4E  A4D8               	btfss	status,2,c
  4548  006D50  D7F7               	goto	l467
  4549  006D52                     u1660:
  4550  006D52  500A               	movf	___fttol@sign1,w,c
  4551  006D54  B4D8               	btfsc	status,2,c
  4552  006D56  D008               	goto	l469
  4553  006D58  1E0E               	comf	___fttol@lval+3,f,c
  4554  006D5A  1E0D               	comf	___fttol@lval+2,f,c
  4555  006D5C  1E0C               	comf	___fttol@lval+1,f,c
  4556  006D5E  6C0B               	negf	___fttol@lval,c
  4557  006D60  0E00               	movlw	0
  4558  006D62  220C               	addwfc	___fttol@lval+1,f,c
  4559  006D64  220D               	addwfc	___fttol@lval+2,f,c
  4560  006D66  220E               	addwfc	___fttol@lval+3,f,c
  4561  006D68                     l469:
  4562  006D68  C00B  F001         	movff	___fttol@lval,?___fttol
  4563  006D6C  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  4564  006D70  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  4565  006D74  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  4566  006D78  0012               	return	
  4567  006D7A                     __end_of___fttol:
  4568                           	opt stack 0
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           postinc0	equ	0xFEE
  4576                           wreg	equ	0xFE8
  4577                           indf1	equ	0xFE7
  4578                           postinc1	equ	0xFE6
  4579                           postdec1	equ	0xFE5
  4580                           plusw1	equ	0xFE3
  4581                           fsr1h	equ	0xFE2
  4582                           fsr1l	equ	0xFE1
  4583                           indf2	equ	0xFDF
  4584                           postinc2	equ	0xFDE
  4585                           postdec2	equ	0xFDD
  4586                           plusw2	equ	0xFDB
  4587                           fsr2h	equ	0xFDA
  4588                           fsr2l	equ	0xFD9
  4589                           status	equ	0xFD8
  4590                           
  4591 ;; *************** function ___ftdiv *****************
  4592 ;; Defined at:
  4593 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  4594 ;; Parameters:    Size  Location     Type
  4595 ;;  f1              3   18[COMRAM] float 
  4596 ;;  f2              3   21[COMRAM] float 
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;  f3              3   28[COMRAM] float 
  4599 ;;  sign            1   32[COMRAM] unsigned char 
  4600 ;;  exp             1   31[COMRAM] unsigned char 
  4601 ;;  cntr            1   27[COMRAM] unsigned char 
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  3   18[COMRAM] float 
  4604 ;; Registers used:
  4605 ;;		wreg, status,2, status,0, cstack
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4611 ;;      Params:         6       0       0       0       0       0       0       0       0
  4612 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4613 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4614 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4615 ;;Total ram usage:       15 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; Hardware stack levels required when called:    1
  4618 ;; This function calls:
  4619 ;;		___ftpack
  4620 ;; This function is called by:
  4621 ;;		_USART_Init
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625                           	psect	text16
  4626  006BA0                     __ptext16:
  4627                           	opt stack 0
  4628  006BA0                     ___ftdiv:
  4629                           	opt stack 28
  4630                           
  4631                           ;incstack = 0
  4632  006BA0  C015  F019         	movff	___ftdiv@f1+2,??___ftdiv
  4633  006BA4  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  4634  006BA6  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  4635  006BA8  3414               	rlcf	___ftdiv@f1+1,w,c
  4636  006BAA  3619               	rlcf	??___ftdiv& (0+255),f,c
  4637  006BAC  E301               	bnc	u1551
  4638  006BAE  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  4639  006BB0                     u1551:
  4640  006BB0  5019               	movf	??___ftdiv,w,c
  4641  006BB2  6E20               	movwf	___ftdiv@exp,c
  4642  006BB4  5020               	movf	___ftdiv@exp,w,c
  4643  006BB6  A4D8               	btfss	status,2,c
  4644  006BB8  D007               	goto	l422
  4645  006BBA  0E00               	movlw	0
  4646  006BBC  6E13               	movwf	?___ftdiv,c
  4647  006BBE  0E00               	movlw	0
  4648  006BC0  6E14               	movwf	?___ftdiv+1,c
  4649  006BC2  0E00               	movlw	0
  4650  006BC4  6E15               	movwf	?___ftdiv+2,c
  4651  006BC6  0012               	return	
  4652  006BC8                     l422:
  4653  006BC8  C018  F019         	movff	___ftdiv@f2+2,??___ftdiv
  4654  006BCC  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  4655  006BCE  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  4656  006BD0  3417               	rlcf	___ftdiv@f2+1,w,c
  4657  006BD2  3619               	rlcf	??___ftdiv& (0+255),f,c
  4658  006BD4  E301               	bnc	u1571
  4659  006BD6  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  4660  006BD8                     u1571:
  4661  006BD8  5019               	movf	??___ftdiv,w,c
  4662  006BDA  6E21               	movwf	___ftdiv@sign,c
  4663  006BDC  5021               	movf	___ftdiv@sign,w,c
  4664  006BDE  A4D8               	btfss	status,2,c
  4665  006BE0  D007               	goto	l424
  4666  006BE2  0E00               	movlw	0
  4667  006BE4  6E13               	movwf	?___ftdiv,c
  4668  006BE6  0E00               	movlw	0
  4669  006BE8  6E14               	movwf	?___ftdiv+1,c
  4670  006BEA  0E00               	movlw	0
  4671  006BEC  6E15               	movwf	?___ftdiv+2,c
  4672  006BEE  0012               	return	
  4673  006BF0                     l424:
  4674  006BF0  0E00               	movlw	0
  4675  006BF2  6E1D               	movwf	___ftdiv@f3,c
  4676  006BF4  0E00               	movlw	0
  4677  006BF6  6E1E               	movwf	___ftdiv@f3+1,c
  4678  006BF8  0E00               	movlw	0
  4679  006BFA  6E1F               	movwf	___ftdiv@f3+2,c
  4680  006BFC  5021               	movf	___ftdiv@sign,w,c
  4681  006BFE  0F89               	addlw	137
  4682  006C00  5E20               	subwf	___ftdiv@exp,f,c
  4683  006C02  C015  F021         	movff	___ftdiv@f1+2,___ftdiv@sign
  4684  006C06  5018               	movf	___ftdiv@f2+2,w,c
  4685  006C08  1A21               	xorwf	___ftdiv@sign,f,c
  4686  006C0A  0E80               	movlw	128
  4687  006C0C  1621               	andwf	___ftdiv@sign,f,c
  4688  006C0E  8E14               	bsf	___ftdiv@f1+1,7,c
  4689  006C10  0EFF               	movlw	255
  4690  006C12  1613               	andwf	___ftdiv@f1,f,c
  4691  006C14  0EFF               	movlw	255
  4692  006C16  1614               	andwf	___ftdiv@f1+1,f,c
  4693  006C18  0E00               	movlw	0
  4694  006C1A  1615               	andwf	___ftdiv@f1+2,f,c
  4695  006C1C  8E17               	bsf	___ftdiv@f2+1,7,c
  4696  006C1E  0EFF               	movlw	255
  4697  006C20  1616               	andwf	___ftdiv@f2,f,c
  4698  006C22  0EFF               	movlw	255
  4699  006C24  1617               	andwf	___ftdiv@f2+1,f,c
  4700  006C26  0E00               	movlw	0
  4701  006C28  1618               	andwf	___ftdiv@f2+2,f,c
  4702  006C2A  0E18               	movlw	24
  4703  006C2C  6E1C               	movwf	___ftdiv@cntr,c
  4704  006C2E  90D8               	bcf	status,0,c
  4705  006C30  361D               	rlcf	___ftdiv@f3,f,c
  4706  006C32  361E               	rlcf	___ftdiv@f3+1,f,c
  4707  006C34  361F               	rlcf	___ftdiv@f3+2,f,c
  4708  006C36  5016               	movf	___ftdiv@f2,w,c
  4709  006C38  5C13               	subwf	___ftdiv@f1,w,c
  4710  006C3A  5017               	movf	___ftdiv@f2+1,w,c
  4711  006C3C  5814               	subwfb	___ftdiv@f1+1,w,c
  4712  006C3E  5018               	movf	___ftdiv@f2+2,w,c
  4713  006C40  5815               	subwfb	___ftdiv@f1+2,w,c
  4714  006C42  A0D8               	btfss	status,0,c
  4715  006C44  D007               	goto	l426
  4716  006C46  5016               	movf	___ftdiv@f2,w,c
  4717  006C48  5E13               	subwf	___ftdiv@f1,f,c
  4718  006C4A  5017               	movf	___ftdiv@f2+1,w,c
  4719  006C4C  5A14               	subwfb	___ftdiv@f1+1,f,c
  4720  006C4E  5018               	movf	___ftdiv@f2+2,w,c
  4721  006C50  5A15               	subwfb	___ftdiv@f1+2,f,c
  4722  006C52  801D               	bsf	___ftdiv@f3,0,c
  4723  006C54                     l426:
  4724  006C54  90D8               	bcf	status,0,c
  4725  006C56  3613               	rlcf	___ftdiv@f1,f,c
  4726  006C58  3614               	rlcf	___ftdiv@f1+1,f,c
  4727  006C5A  3615               	rlcf	___ftdiv@f1+2,f,c
  4728  006C5C  2E1C               	decfsz	___ftdiv@cntr,f,c
  4729  006C5E  D7E7               	goto	l425
  4730  006C60  C01D  F001         	movff	___ftdiv@f3,___ftpack@arg
  4731  006C64  C01E  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4732  006C68  C01F  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4733  006C6C  C020  F004         	movff	___ftdiv@exp,___ftpack@exp
  4734  006C70  C021  F005         	movff	___ftdiv@sign,___ftpack@sign
  4735  006C74  EC79  F035         	call	___ftpack	;wreg free
  4736  006C78  C001  F013         	movff	?___ftpack,?___ftdiv
  4737  006C7C  C002  F014         	movff	?___ftpack+1,?___ftdiv+1
  4738  006C80  C003  F015         	movff	?___ftpack+2,?___ftdiv+2
  4739  006C84  0012               	return	
  4740  006C86                     __end_of___ftdiv:
  4741                           	opt stack 0
  4742                           tblptru	equ	0xFF8
  4743                           tblptrh	equ	0xFF7
  4744                           tblptrl	equ	0xFF6
  4745                           tablat	equ	0xFF5
  4746                           prodh	equ	0xFF4
  4747                           prodl	equ	0xFF3
  4748                           postinc0	equ	0xFEE
  4749                           wreg	equ	0xFE8
  4750                           indf1	equ	0xFE7
  4751                           postinc1	equ	0xFE6
  4752                           postdec1	equ	0xFE5
  4753                           plusw1	equ	0xFE3
  4754                           fsr1h	equ	0xFE2
  4755                           fsr1l	equ	0xFE1
  4756                           indf2	equ	0xFDF
  4757                           postinc2	equ	0xFDE
  4758                           postdec2	equ	0xFDD
  4759                           plusw2	equ	0xFDB
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function ___ftadd *****************
  4765 ;; Defined at:
  4766 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  f1              3   33[COMRAM] float 
  4769 ;;  f2              3   36[COMRAM] float 
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  exp1            1   44[COMRAM] unsigned char 
  4772 ;;  exp2            1   43[COMRAM] unsigned char 
  4773 ;;  sign            1   42[COMRAM] unsigned char 
  4774 ;; Return value:  Size  Location     Type
  4775 ;;                  3   33[COMRAM] float 
  4776 ;; Registers used:
  4777 ;;		wreg, status,2, status,0, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4783 ;;      Params:         6       0       0       0       0       0       0       0       0
  4784 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4785 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4786 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4787 ;;Total ram usage:       12 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    1
  4790 ;; This function calls:
  4791 ;;		___ftpack
  4792 ;; This function is called by:
  4793 ;;		_USART_Init
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text17
  4798  006D7A                     __ptext17:
  4799                           	opt stack 0
  4800  006D7A                     ___ftadd:
  4801                           	opt stack 28
  4802                           
  4803                           ;incstack = 0
  4804  006D7A  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  4805  006D7E  6A29               	clrf	(??___ftadd+1)& (0+255),c
  4806  006D80  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  4807  006D82  3423               	rlcf	___ftadd@f1+1,w,c
  4808  006D84  3628               	rlcf	??___ftadd& (0+255),f,c
  4809  006D86  E301               	bnc	u1341
  4810  006D88  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  4811  006D8A                     u1341:
  4812  006D8A  5028               	movf	??___ftadd,w,c
  4813  006D8C  6E2D               	movwf	___ftadd@exp1,c
  4814  006D8E  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  4815  006D92  6A29               	clrf	(??___ftadd+1)& (0+255),c
  4816  006D94  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  4817  006D96  3426               	rlcf	___ftadd@f2+1,w,c
  4818  006D98  3628               	rlcf	??___ftadd& (0+255),f,c
  4819  006D9A  E301               	bnc	u1351
  4820  006D9C  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  4821  006D9E                     u1351:
  4822  006D9E  5028               	movf	??___ftadd,w,c
  4823  006DA0  6E2C               	movwf	___ftadd@exp2,c
  4824  006DA2  502D               	movf	___ftadd@exp1,w,c
  4825  006DA4  B4D8               	btfsc	status,2,c
  4826  006DA6  D00B               	goto	u1380
  4827  006DA8  502C               	movf	___ftadd@exp2,w,c
  4828  006DAA  5C2D               	subwf	___ftadd@exp1,w,c
  4829  006DAC  B0D8               	btfsc	status,0,c
  4830  006DAE  D00E               	goto	l389
  4831  006DB0  502D               	movf	___ftadd@exp1,w,c
  4832  006DB2  0800               	sublw	0
  4833  006DB4  242C               	addwf	___ftadd@exp2,w,c
  4834  006DB6  6E28               	movwf	??___ftadd& (0+255),c
  4835  006DB8  0E18               	movlw	24
  4836  006DBA  6428               	cpfsgt	??___ftadd,c
  4837  006DBC  D007               	goto	l389
  4838  006DBE                     u1380:
  4839  006DBE  C025  F022         	movff	___ftadd@f2,?___ftadd
  4840  006DC2  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  4841  006DC6  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  4842  006DCA  0012               	return	
  4843  006DCC                     l389:
  4844  006DCC  502C               	movf	___ftadd@exp2,w,c
  4845  006DCE  B4D8               	btfsc	status,2,c
  4846  006DD0  D00B               	goto	u1410
  4847  006DD2  502D               	movf	___ftadd@exp1,w,c
  4848  006DD4  5C2C               	subwf	___ftadd@exp2,w,c
  4849  006DD6  B0D8               	btfsc	status,0,c
  4850  006DD8  D00E               	goto	l393
  4851  006DDA  502C               	movf	___ftadd@exp2,w,c
  4852  006DDC  0800               	sublw	0
  4853  006DDE  242D               	addwf	___ftadd@exp1,w,c
  4854  006DE0  6E28               	movwf	??___ftadd& (0+255),c
  4855  006DE2  0E18               	movlw	24
  4856  006DE4  6428               	cpfsgt	??___ftadd,c
  4857  006DE6  D007               	goto	l393
  4858  006DE8                     u1410:
  4859  006DE8  C022  F022         	movff	___ftadd@f1,?___ftadd
  4860  006DEC  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  4861  006DF0  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  4862  006DF4  0012               	return	
  4863  006DF6                     l393:
  4864  006DF6  0E06               	movlw	6
  4865  006DF8  6E2B               	movwf	___ftadd@sign,c
  4866  006DFA  BE24               	btfsc	___ftadd@f1+2,7,c
  4867  006DFC  8E2B               	bsf	___ftadd@sign,7,c
  4868  006DFE  BE27               	btfsc	___ftadd@f2+2,7,c
  4869  006E00  8C2B               	bsf	___ftadd@sign,6,c
  4870  006E02  8E23               	bsf	___ftadd@f1+1,7,c
  4871  006E04  0EFF               	movlw	255
  4872  006E06  1622               	andwf	___ftadd@f1,f,c
  4873  006E08  0EFF               	movlw	255
  4874  006E0A  1623               	andwf	___ftadd@f1+1,f,c
  4875  006E0C  0E00               	movlw	0
  4876  006E0E  1624               	andwf	___ftadd@f1+2,f,c
  4877  006E10  8E26               	bsf	___ftadd@f2+1,7,c
  4878  006E12  0EFF               	movlw	255
  4879  006E14  1625               	andwf	___ftadd@f2,f,c
  4880  006E16  0EFF               	movlw	255
  4881  006E18  1626               	andwf	___ftadd@f2+1,f,c
  4882  006E1A  0E00               	movlw	0
  4883  006E1C  1627               	andwf	___ftadd@f2+2,f,c
  4884  006E1E  502C               	movf	___ftadd@exp2,w,c
  4885  006E20  5C2D               	subwf	___ftadd@exp1,w,c
  4886  006E22  B0D8               	btfsc	status,0,c
  4887  006E24  D01B               	goto	l398
  4888  006E26                     u1440:
  4889  006E26  90D8               	bcf	status,0,c
  4890  006E28  3625               	rlcf	___ftadd@f2,f,c
  4891  006E2A  3626               	rlcf	___ftadd@f2+1,f,c
  4892  006E2C  3627               	rlcf	___ftadd@f2+2,f,c
  4893  006E2E  062C               	decf	___ftadd@exp2,f,c
  4894  006E30  502D               	movf	___ftadd@exp1,w,c
  4895  006E32  182C               	xorwf	___ftadd@exp2,w,c
  4896  006E34  B4D8               	btfsc	status,2,c
  4897  006E36  D00D               	goto	l403
  4898  006E38  062B               	decf	___ftadd@sign,f,c
  4899  006E3A  C02B  F028         	movff	___ftadd@sign,??___ftadd
  4900  006E3E  0E07               	movlw	7
  4901  006E40  1628               	andwf	??___ftadd,f,c
  4902  006E42  B4D8               	btfsc	status,2,c
  4903  006E44  D006               	goto	l403
  4904  006E46  D7EF               	goto	u1440
  4905  006E48  90D8               	bcf	status,0,c
  4906  006E4A  3224               	rrcf	___ftadd@f1+2,f,c
  4907  006E4C  3223               	rrcf	___ftadd@f1+1,f,c
  4908  006E4E  3222               	rrcf	___ftadd@f1,f,c
  4909  006E50  2A2D               	incf	___ftadd@exp1,f,c
  4910  006E52                     l403:
  4911  006E52  502C               	movf	___ftadd@exp2,w,c
  4912  006E54  182D               	xorwf	___ftadd@exp1,w,c
  4913  006E56  B4D8               	btfsc	status,2,c
  4914  006E58  D01F               	goto	u1510
  4915  006E5A  D7F6               	goto	l404
  4916  006E5C                     l398:
  4917  006E5C  502D               	movf	___ftadd@exp1,w,c
  4918  006E5E  5C2C               	subwf	___ftadd@exp2,w,c
  4919  006E60  B0D8               	btfsc	status,0,c
  4920  006E62  D01A               	goto	u1510
  4921  006E64                     u1480:
  4922  006E64  90D8               	bcf	status,0,c
  4923  006E66  3622               	rlcf	___ftadd@f1,f,c
  4924  006E68  3623               	rlcf	___ftadd@f1+1,f,c
  4925  006E6A  3624               	rlcf	___ftadd@f1+2,f,c
  4926  006E6C  062D               	decf	___ftadd@exp1,f,c
  4927  006E6E  502D               	movf	___ftadd@exp1,w,c
  4928  006E70  182C               	xorwf	___ftadd@exp2,w,c
  4929  006E72  B4D8               	btfsc	status,2,c
  4930  006E74  D00D               	goto	l412
  4931  006E76  062B               	decf	___ftadd@sign,f,c
  4932  006E78  C02B  F028         	movff	___ftadd@sign,??___ftadd
  4933  006E7C  0E07               	movlw	7
  4934  006E7E  1628               	andwf	??___ftadd,f,c
  4935  006E80  B4D8               	btfsc	status,2,c
  4936  006E82  D006               	goto	l412
  4937  006E84  D7EF               	goto	u1480
  4938  006E86  90D8               	bcf	status,0,c
  4939  006E88  3227               	rrcf	___ftadd@f2+2,f,c
  4940  006E8A  3226               	rrcf	___ftadd@f2+1,f,c
  4941  006E8C  3225               	rrcf	___ftadd@f2,f,c
  4942  006E8E  2A2C               	incf	___ftadd@exp2,f,c
  4943  006E90                     l412:
  4944  006E90  502C               	movf	___ftadd@exp2,w,c
  4945  006E92  182D               	xorwf	___ftadd@exp1,w,c
  4946  006E94  A4D8               	btfss	status,2,c
  4947  006E96  D7F7               	goto	l413
  4948  006E98                     u1510:
  4949  006E98  AE2B               	btfss	___ftadd@sign,7,c
  4950  006E9A  D00C               	goto	l415
  4951  006E9C  0EFF               	movlw	255
  4952  006E9E  1A22               	xorwf	___ftadd@f1,f,c
  4953  006EA0  0EFF               	movlw	255
  4954  006EA2  1A23               	xorwf	___ftadd@f1+1,f,c
  4955  006EA4  0EFF               	movlw	255
  4956  006EA6  1A24               	xorwf	___ftadd@f1+2,f,c
  4957  006EA8  0E01               	movlw	1
  4958  006EAA  2622               	addwf	___ftadd@f1,f,c
  4959  006EAC  0E00               	movlw	0
  4960  006EAE  2223               	addwfc	___ftadd@f1+1,f,c
  4961  006EB0  0E00               	movlw	0
  4962  006EB2  2224               	addwfc	___ftadd@f1+2,f,c
  4963  006EB4                     l415:
  4964  006EB4  AC2B               	btfss	___ftadd@sign,6,c
  4965  006EB6  D00C               	goto	l416
  4966  006EB8  0EFF               	movlw	255
  4967  006EBA  1A25               	xorwf	___ftadd@f2,f,c
  4968  006EBC  0EFF               	movlw	255
  4969  006EBE  1A26               	xorwf	___ftadd@f2+1,f,c
  4970  006EC0  0EFF               	movlw	255
  4971  006EC2  1A27               	xorwf	___ftadd@f2+2,f,c
  4972  006EC4  0E01               	movlw	1
  4973  006EC6  2625               	addwf	___ftadd@f2,f,c
  4974  006EC8  0E00               	movlw	0
  4975  006ECA  2226               	addwfc	___ftadd@f2+1,f,c
  4976  006ECC  0E00               	movlw	0
  4977  006ECE  2227               	addwfc	___ftadd@f2+2,f,c
  4978  006ED0                     l416:
  4979  006ED0  0E00               	movlw	0
  4980  006ED2  6E2B               	movwf	___ftadd@sign,c
  4981  006ED4  5022               	movf	___ftadd@f1,w,c
  4982  006ED6  2625               	addwf	___ftadd@f2,f,c
  4983  006ED8  5023               	movf	___ftadd@f1+1,w,c
  4984  006EDA  2226               	addwfc	___ftadd@f2+1,f,c
  4985  006EDC  5024               	movf	___ftadd@f1+2,w,c
  4986  006EDE  2227               	addwfc	___ftadd@f2+2,f,c
  4987  006EE0  AE27               	btfss	___ftadd@f2+2,7,c
  4988  006EE2  D00E               	goto	l417
  4989  006EE4  0EFF               	movlw	255
  4990  006EE6  1A25               	xorwf	___ftadd@f2,f,c
  4991  006EE8  0EFF               	movlw	255
  4992  006EEA  1A26               	xorwf	___ftadd@f2+1,f,c
  4993  006EEC  0EFF               	movlw	255
  4994  006EEE  1A27               	xorwf	___ftadd@f2+2,f,c
  4995  006EF0  0E01               	movlw	1
  4996  006EF2  2625               	addwf	___ftadd@f2,f,c
  4997  006EF4  0E00               	movlw	0
  4998  006EF6  2226               	addwfc	___ftadd@f2+1,f,c
  4999  006EF8  0E00               	movlw	0
  5000  006EFA  2227               	addwfc	___ftadd@f2+2,f,c
  5001  006EFC  0E01               	movlw	1
  5002  006EFE  6E2B               	movwf	___ftadd@sign,c
  5003  006F00                     l417:
  5004  006F00  C025  F001         	movff	___ftadd@f2,___ftpack@arg
  5005  006F04  C026  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5006  006F08  C027  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5007  006F0C  C02D  F004         	movff	___ftadd@exp1,___ftpack@exp
  5008  006F10  C02B  F005         	movff	___ftadd@sign,___ftpack@sign
  5009  006F14  EC79  F035         	call	___ftpack	;wreg free
  5010  006F18  C001  F022         	movff	?___ftpack,?___ftadd
  5011  006F1C  C002  F023         	movff	?___ftpack+1,?___ftadd+1
  5012  006F20  C003  F024         	movff	?___ftpack+2,?___ftadd+2
  5013  006F24  0012               	return	
  5014  006F26                     __end_of___ftadd:
  5015                           	opt stack 0
  5016                           tblptru	equ	0xFF8
  5017                           tblptrh	equ	0xFF7
  5018                           tblptrl	equ	0xFF6
  5019                           tablat	equ	0xFF5
  5020                           prodh	equ	0xFF4
  5021                           prodl	equ	0xFF3
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           indf1	equ	0xFE7
  5025                           postinc1	equ	0xFE6
  5026                           postdec1	equ	0xFE5
  5027                           plusw1	equ	0xFE3
  5028                           fsr1h	equ	0xFE2
  5029                           fsr1l	equ	0xFE1
  5030                           indf2	equ	0xFDF
  5031                           postinc2	equ	0xFDE
  5032                           postdec2	equ	0xFDD
  5033                           plusw2	equ	0xFDB
  5034                           fsr2h	equ	0xFDA
  5035                           fsr2l	equ	0xFD9
  5036                           status	equ	0xFD8
  5037                           
  5038 ;; *************** function ___altoft *****************
  5039 ;; Defined at:
  5040 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
  5041 ;; Parameters:    Size  Location     Type
  5042 ;;  c               4    8[COMRAM] long 
  5043 ;; Auto vars:     Size  Location     Type
  5044 ;;  sign            1   17[COMRAM] unsigned char 
  5045 ;;  exp             1   16[COMRAM] unsigned char 
  5046 ;; Return value:  Size  Location     Type
  5047 ;;                  3    8[COMRAM] float 
  5048 ;; Registers used:
  5049 ;;		wreg, status,2, status,0, cstack
  5050 ;; Tracked objects:
  5051 ;;		On entry : 0/0
  5052 ;;		On exit  : 0/0
  5053 ;;		Unchanged: 0/0
  5054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5055 ;;      Params:         4       0       0       0       0       0       0       0       0
  5056 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5057 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5058 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5059 ;;Total ram usage:       10 bytes
  5060 ;; Hardware stack levels used:    1
  5061 ;; Hardware stack levels required when called:    1
  5062 ;; This function calls:
  5063 ;;		___ftpack
  5064 ;; This function is called by:
  5065 ;;		_USART_Init
  5066 ;; This function uses a non-reentrant model
  5067 ;;
  5068                           
  5069                           	psect	text18
  5070  00697A                     __ptext18:
  5071                           	opt stack 0
  5072  00697A                     ___altoft:
  5073                           	opt stack 28
  5074                           
  5075                           ;incstack = 0
  5076  00697A  0E00               	movlw	0
  5077  00697C  6E12               	movwf	___altoft@sign,c
  5078  00697E  0E8E               	movlw	142
  5079  006980  6E11               	movwf	___altoft@exp,c
  5080  006982  AE0C               	btfss	___altoft@c+3,7,c
  5081  006984  D011               	goto	l228
  5082  006986  1E0C               	comf	___altoft@c+3,f,c
  5083  006988  1E0B               	comf	___altoft@c+2,f,c
  5084  00698A  1E0A               	comf	___altoft@c+1,f,c
  5085  00698C  6C09               	negf	___altoft@c,c
  5086  00698E  0E00               	movlw	0
  5087  006990  220A               	addwfc	___altoft@c+1,f,c
  5088  006992  220B               	addwfc	___altoft@c+2,f,c
  5089  006994  220C               	addwfc	___altoft@c+3,f,c
  5090  006996  0E01               	movlw	1
  5091  006998  6E12               	movwf	___altoft@sign,c
  5092  00699A  D006               	goto	l228
  5093  00699C  90D8               	bcf	status,0,c
  5094  00699E  320C               	rrcf	___altoft@c+3,f,c
  5095  0069A0  320B               	rrcf	___altoft@c+2,f,c
  5096  0069A2  320A               	rrcf	___altoft@c+1,f,c
  5097  0069A4  3209               	rrcf	___altoft@c,f,c
  5098  0069A6  2A11               	incf	___altoft@exp,f,c
  5099  0069A8                     l228:
  5100  0069A8  0E00               	movlw	0
  5101  0069AA  1409               	andwf	___altoft@c,w,c
  5102  0069AC  6E0D               	movwf	??___altoft& (0+255),c
  5103  0069AE  0E00               	movlw	0
  5104  0069B0  140A               	andwf	___altoft@c+1,w,c
  5105  0069B2  6E0E               	movwf	(??___altoft+1)& (0+255),c
  5106  0069B4  0E00               	movlw	0
  5107  0069B6  140B               	andwf	___altoft@c+2,w,c
  5108  0069B8  6E0F               	movwf	(??___altoft+2)& (0+255),c
  5109  0069BA  0EFF               	movlw	255
  5110  0069BC  140C               	andwf	___altoft@c+3,w,c
  5111  0069BE  6E10               	movwf	(??___altoft+3)& (0+255),c
  5112  0069C0  500D               	movf	??___altoft,w,c
  5113  0069C2  100E               	iorwf	??___altoft+1,w,c
  5114  0069C4  100F               	iorwf	??___altoft+2,w,c
  5115  0069C6  1010               	iorwf	??___altoft+3,w,c
  5116  0069C8  A4D8               	btfss	status,2,c
  5117  0069CA  D7E8               	goto	l229
  5118  0069CC  C009  F001         	movff	___altoft@c,___ftpack@arg
  5119  0069D0  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5120  0069D4  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5121  0069D8  C011  F004         	movff	___altoft@exp,___ftpack@exp
  5122  0069DC  C012  F005         	movff	___altoft@sign,___ftpack@sign
  5123  0069E0  EC79  F035         	call	___ftpack	;wreg free
  5124  0069E4  C001  F009         	movff	?___ftpack,?___altoft
  5125  0069E8  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  5126  0069EC  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  5127  0069F0  0012               	return	
  5128  0069F2                     __end_of___altoft:
  5129                           	opt stack 0
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           prodh	equ	0xFF4
  5135                           prodl	equ	0xFF3
  5136                           postinc0	equ	0xFEE
  5137                           wreg	equ	0xFE8
  5138                           indf1	equ	0xFE7
  5139                           postinc1	equ	0xFE6
  5140                           postdec1	equ	0xFE5
  5141                           plusw1	equ	0xFE3
  5142                           fsr1h	equ	0xFE2
  5143                           fsr1l	equ	0xFE1
  5144                           indf2	equ	0xFDF
  5145                           postinc2	equ	0xFDE
  5146                           postdec2	equ	0xFDD
  5147                           plusw2	equ	0xFDB
  5148                           fsr2h	equ	0xFDA
  5149                           fsr2l	equ	0xFD9
  5150                           status	equ	0xFD8
  5151                           
  5152 ;; *************** function ___ftpack *****************
  5153 ;; Defined at:
  5154 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  arg             3    0[COMRAM] unsigned um
  5157 ;;  exp             1    3[COMRAM] unsigned char 
  5158 ;;  sign            1    4[COMRAM] unsigned char 
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;		None
  5161 ;; Return value:  Size  Location     Type
  5162 ;;                  3    0[COMRAM] float 
  5163 ;; Registers used:
  5164 ;;		wreg, status,2, status,0
  5165 ;; Tracked objects:
  5166 ;;		On entry : 0/0
  5167 ;;		On exit  : 0/0
  5168 ;;		Unchanged: 0/0
  5169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5170 ;;      Params:         5       0       0       0       0       0       0       0       0
  5171 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5172 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5173 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5174 ;;Total ram usage:        8 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; This function calls:
  5177 ;;		Nothing
  5178 ;; This function is called by:
  5179 ;;		___altoft
  5180 ;;		___ftadd
  5181 ;;		___ftdiv
  5182 ;; This function uses a non-reentrant model
  5183 ;;
  5184                           
  5185                           	psect	text19
  5186  006AF2                     __ptext19:
  5187                           	opt stack 0
  5188  006AF2                     ___ftpack:
  5189                           	opt stack 28
  5190                           
  5191                           ;incstack = 0
  5192  006AF2  5004               	movf	___ftpack@exp,w,c
  5193  006AF4  B4D8               	btfsc	status,2,c
  5194  006AF6  D005               	goto	u980
  5195  006AF8  5001               	movf	___ftpack@arg,w,c
  5196  006AFA  1002               	iorwf	___ftpack@arg+1,w,c
  5197  006AFC  1003               	iorwf	___ftpack@arg+2,w,c
  5198  006AFE  A4D8               	btfss	status,2,c
  5199  006B00  D00C               	goto	l358
  5200  006B02                     u980:
  5201  006B02  0E00               	movlw	0
  5202  006B04  6E01               	movwf	?___ftpack,c
  5203  006B06  0E00               	movlw	0
  5204  006B08  6E02               	movwf	?___ftpack+1,c
  5205  006B0A  0E00               	movlw	0
  5206  006B0C  6E03               	movwf	?___ftpack+2,c
  5207  006B0E  0012               	return	
  5208  006B10  2A04               	incf	___ftpack@exp,f,c
  5209  006B12  90D8               	bcf	status,0,c
  5210  006B14  3203               	rrcf	___ftpack@arg+2,f,c
  5211  006B16  3202               	rrcf	___ftpack@arg+1,f,c
  5212  006B18  3201               	rrcf	___ftpack@arg,f,c
  5213  006B1A                     l358:
  5214  006B1A  0E00               	movlw	0
  5215  006B1C  1401               	andwf	___ftpack@arg,w,c
  5216  006B1E  6E06               	movwf	??___ftpack& (0+255),c
  5217  006B20  0E00               	movlw	0
  5218  006B22  1402               	andwf	___ftpack@arg+1,w,c
  5219  006B24  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5220  006B26  0EFE               	movlw	254
  5221  006B28  1403               	andwf	___ftpack@arg+2,w,c
  5222  006B2A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5223  006B2C  5006               	movf	??___ftpack,w,c
  5224  006B2E  1007               	iorwf	??___ftpack+1,w,c
  5225  006B30  1008               	iorwf	??___ftpack+2,w,c
  5226  006B32  B4D8               	btfsc	status,2,c
  5227  006B34  D00C               	goto	l361
  5228  006B36  D7EC               	goto	l359
  5229  006B38  2A04               	incf	___ftpack@exp,f,c
  5230  006B3A  0E01               	movlw	1
  5231  006B3C  2601               	addwf	___ftpack@arg,f,c
  5232  006B3E  0E00               	movlw	0
  5233  006B40  2202               	addwfc	___ftpack@arg+1,f,c
  5234  006B42  0E00               	movlw	0
  5235  006B44  2203               	addwfc	___ftpack@arg+2,f,c
  5236  006B46  90D8               	bcf	status,0,c
  5237  006B48  3203               	rrcf	___ftpack@arg+2,f,c
  5238  006B4A  3202               	rrcf	___ftpack@arg+1,f,c
  5239  006B4C  3201               	rrcf	___ftpack@arg,f,c
  5240  006B4E                     l361:
  5241  006B4E  0E00               	movlw	0
  5242  006B50  1401               	andwf	___ftpack@arg,w,c
  5243  006B52  6E06               	movwf	??___ftpack& (0+255),c
  5244  006B54  0E00               	movlw	0
  5245  006B56  1402               	andwf	___ftpack@arg+1,w,c
  5246  006B58  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5247  006B5A  0EFF               	movlw	255
  5248  006B5C  1403               	andwf	___ftpack@arg+2,w,c
  5249  006B5E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5250  006B60  5006               	movf	??___ftpack,w,c
  5251  006B62  1007               	iorwf	??___ftpack+1,w,c
  5252  006B64  1008               	iorwf	??___ftpack+2,w,c
  5253  006B66  B4D8               	btfsc	status,2,c
  5254  006B68  D006               	goto	l364
  5255  006B6A  D7E6               	goto	l362
  5256  006B6C  0604               	decf	___ftpack@exp,f,c
  5257  006B6E  90D8               	bcf	status,0,c
  5258  006B70  3601               	rlcf	___ftpack@arg,f,c
  5259  006B72  3602               	rlcf	___ftpack@arg+1,f,c
  5260  006B74  3603               	rlcf	___ftpack@arg+2,f,c
  5261  006B76                     l364:
  5262  006B76  BE02               	btfsc	___ftpack@arg+1,7,c
  5263  006B78  D003               	goto	u1020
  5264  006B7A  0E02               	movlw	2
  5265  006B7C  6004               	cpfslt	___ftpack@exp,c
  5266  006B7E  D7F6               	goto	l365
  5267  006B80                     u1020:
  5268  006B80  A004               	btfss	___ftpack@exp,0,c
  5269  006B82  9E02               	bcf	___ftpack@arg+1,7,c
  5270  006B84  90D8               	bcf	status,0,c
  5271  006B86  3204               	rrcf	___ftpack@exp,f,c
  5272  006B88  5004               	movf	___ftpack@exp,w,c
  5273  006B8A  1203               	iorwf	___ftpack@arg+2,f,c
  5274  006B8C  5005               	movf	___ftpack@sign,w,c
  5275  006B8E  A4D8               	btfss	status,2,c
  5276  006B90  8E03               	bsf	___ftpack@arg+2,7,c
  5277  006B92  C001  F001         	movff	___ftpack@arg,?___ftpack
  5278  006B96  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5279  006B9A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5280  006B9E  0012               	return	
  5281  006BA0                     __end_of___ftpack:
  5282                           	opt stack 0
  5283                           tblptru	equ	0xFF8
  5284                           tblptrh	equ	0xFF7
  5285                           tblptrl	equ	0xFF6
  5286                           tablat	equ	0xFF5
  5287                           prodh	equ	0xFF4
  5288                           prodl	equ	0xFF3
  5289                           postinc0	equ	0xFEE
  5290                           wreg	equ	0xFE8
  5291                           indf1	equ	0xFE7
  5292                           postinc1	equ	0xFE6
  5293                           postdec1	equ	0xFE5
  5294                           plusw1	equ	0xFE3
  5295                           fsr1h	equ	0xFE2
  5296                           fsr1l	equ	0xFE1
  5297                           indf2	equ	0xFDF
  5298                           postinc2	equ	0xFDE
  5299                           postdec2	equ	0xFDD
  5300                           plusw2	equ	0xFDB
  5301                           fsr2h	equ	0xFDA
  5302                           fsr2l	equ	0xFD9
  5303                           status	equ	0xFD8
  5304                           tblptru	equ	0xFF8
  5305                           tblptrh	equ	0xFF7
  5306                           tblptrl	equ	0xFF6
  5307                           tablat	equ	0xFF5
  5308                           prodh	equ	0xFF4
  5309                           prodl	equ	0xFF3
  5310                           postinc0	equ	0xFEE
  5311                           wreg	equ	0xFE8
  5312                           indf1	equ	0xFE7
  5313                           postinc1	equ	0xFE6
  5314                           postdec1	equ	0xFE5
  5315                           plusw1	equ	0xFE3
  5316                           fsr1h	equ	0xFE2
  5317                           fsr1l	equ	0xFE1
  5318                           indf2	equ	0xFDF
  5319                           postinc2	equ	0xFDE
  5320                           postdec2	equ	0xFDD
  5321                           plusw2	equ	0xFDB
  5322                           fsr2h	equ	0xFDA
  5323                           fsr2l	equ	0xFD9
  5324                           status	equ	0xFD8
  5325                           
  5326                           	psect	rparam
  5327  0000                     tblptru	equ	0xFF8
  5328                           tblptrh	equ	0xFF7
  5329                           tblptrl	equ	0xFF6
  5330                           tablat	equ	0xFF5
  5331                           prodh	equ	0xFF4
  5332                           prodl	equ	0xFF3
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           indf1	equ	0xFE7
  5336                           postinc1	equ	0xFE6
  5337                           postdec1	equ	0xFE5
  5338                           plusw1	equ	0xFE3
  5339                           fsr1h	equ	0xFE2
  5340                           fsr1l	equ	0xFE1
  5341                           indf2	equ	0xFDF
  5342                           postinc2	equ	0xFDE
  5343                           postdec2	equ	0xFDD
  5344                           plusw2	equ	0xFDB
  5345                           fsr2h	equ	0xFDA
  5346                           fsr2l	equ	0xFD9
  5347                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    280
    Data        32
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     63      95
    BANK0           160    142     142
    BANK1           256    256     256
    BANK2           256    131     196
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 256
		 -> calc_sha_256@word(BANK1[256]), calc_sha_256@chunk(BANK0[64]), 

    memset@p	PTR unsigned char  size(2) Largest target is 256
		 -> calc_sha_256@word(BANK1[256]), calc_sha_256@chunk(BANK0[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 16
		 -> string(CODE[16]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 65
		 -> main@hash_string(BANK2[65]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    main@pronteiro_string	PTR unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    hash_to_string@hash	PTR const unsigned char  size(2) Largest target is 32
		 -> main@hash(BANK2[32]), 

    hash_to_string@string	PTR unsigned char  size(2) Largest target is 65
		 -> main@hash_string(BANK2[65]), 

    calc_sha_256@hash	PTR unsigned char  size(2) Largest target is 32
		 -> main@hash(BANK2[32]), 

    calc_sha_256@pointer	PTR const unsigned char  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    calc_sha_256@input	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    state.pointer	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    sp__memset	PTR void  size(2) Largest target is 256
		 -> calc_sha_256@word(BANK1[256]), calc_sha_256@chunk(BANK0[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    calc_chunk@chunk	PTR unsigned char  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    calc_chunk@state.pointer	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    calc_chunk@state	PTR struct buffer_state size(2) Largest target is 11
		 -> calc_sha_256@state(BANK0[10]), 

    S28buffer_state$pointer	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    init_buf_state@state.pointer	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    init_buf_state@input	PTR const void  size(2) Largest target is 16
		 -> string(CODE[16]), 

    init_buf_state@state	PTR struct buffer_state size(2) Largest target is 11
		 -> calc_sha_256@state(BANK0[10]), 

    USART_SendString@out	PTR const unsigned char  size(2) Largest target is 65
		 -> STR_3(CODE[11]), STR_2(CODE[14]), main@hash_string(BANK2[65]), 


Critical Paths under _main in COMRAM

    _main->_calc_sha_256
    _hash_to_string->_sprintf
    _sprintf->___lwdiv
    _calc_sha_256->_calc_chunk
    _calc_chunk->_memcpy
    _USART_SendString->_USART_TxChar
    _USART_Init->___ftadd
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___altoft->___ftpack

Critical Paths under _main in BANK0

    _main->_calc_sha_256

Critical Paths under _main in BANK1

    _main->_calc_sha_256

Critical Paths under _main in BANK2

    _main->_calc_sha_256

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                99    99      0   19747
                                             32 BANK2     99    99      0
                         _USART_Init
                   _USART_SendString
                       _calc_sha_256
                     _hash_to_string
 ---------------------------------------------------------------------------------
 (1) _hash_to_string                                       7     3      4    1865
                                             29 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             31    25      6    1622
                                              7 COMRAM    22    16      6
                            ___lwdiv
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _calc_sha_256                                       468   462      6    7708
                                             25 COMRAM    38    32      6
                                              0 BANK0    142   142      0
                                              0 BANK1    256   256      0
                                              0 BANK2     32    32      0
                         _calc_chunk
                     _init_buf_state
                             _memset
                       _rotate_right
 ---------------------------------------------------------------------------------
 (2) _rotate_right                                        15     9      6    1608
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) _init_buf_state                                       6     0      6     404
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _calc_chunk                                          14    10      4    2268
                                             11 COMRAM    14    10      4
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     780
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     599
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _USART_SendString                                     2     0      2     295
                                              1 COMRAM     2     0      2
                       _USART_TxChar
 ---------------------------------------------------------------------------------
 (2) _USART_TxChar                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           7     3      4    9746
                                             45 COMRAM     7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     328
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2985
                                             18 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    3671
                                             33 COMRAM    12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2641
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
   _USART_SendString
     _USART_TxChar
   _calc_sha_256
     _calc_chunk
       _memcpy
       _memset
     _init_buf_state
     _memset
     _rotate_right
   _hash_to_string
     _sprintf
       ___lwdiv
       ___wmul
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     83      C4       9       76.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8E      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B1      20        0.0%
DATA                 0      0     2B1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 17 13:24:16 2018

             ___altoft@exp 0011              ___altoft@sign 0012                         l34 6834  
                       l50 6FB0                         l35 680C                         l51 7092  
                       l52 7144                         l61 73E4                         l62 7512  
                       l55 7160                         l71 7CAC                         l63 7416  
                       l48 6F44                         l72 7908                         l81 7EB4  
                       l65 7880                         l74 7D2A                         l66 752C  
                       l75 7CC6                         l68 78EE                         l84 67FA  
                       l69 789A                         l85 67C4                         l78 7EA2  
                       l94 6A9C                         l79 7D6C                         l87 6808  
      ___wmul@multiplicand 0003                __CFG_BORV$3 000000               ___ftadd@exp1 002D  
             ___ftadd@exp2 002C               ___ftadd@sign 002B                        l110 719A  
                      l120 7238                        l112 71AE                        l113 71A8  
                      l130 72CC                        l131 72F4                        l140 7324  
                      l109 717C                        l118 71DC                        l129 72C4  
                      l403 6E52                        l139 737C                        l228 69A8  
                      l412 6E90                        l404 6E48                        l229 699C  
                      l413 6E86                        l422 6BC8                        l415 6EB4  
                      l416 6ED0                        l424 6BF0                        l361 6B4E  
                      l417 6F00                        l425 6C2E                        l362 6B38  
                      l426 6C54                        l364 6B76                        l460 6D28  
                      l365 6B6C                        l461 6D18                        l358 6B1A  
                      l359 6B10                        l552 687A                        l393 6DF6  
                      l553 6872                        l473 66C4                        l466 6D4C  
                      l458 6CB2                        l467 6D40                        l556 689A  
                      l389 6DCC                        l469 6D68                        l557 68A4  
                      l398 6E5C                        l582 672C                        l583 671C  
                      l576 67A8                        l577 6786                        u980 6B02  
             _rotate_right 6910                        wreg 000FE8               __CFG_FOSC$HS 000000  
             __CFG_LVP$OFF 000000               ___ftdiv@cntr 001C               ___ftdiv@sign 0021  
             __CFG_WDT$OFF 000000                       l1402 671C                       l1390 6786  
                     l1618 7274                       l1484 66A4                       l1556 710C  
                     l1900 7890                       l1908 78FE                       l1942 7CBC  
                     l1950 7D3A                       l1890 7522                       STR_1 7FF9  
                     STR_2 7FE0                       STR_3 7FEE                       STR_4 7FCF  
                     u1020 6B80                       u1100 695C                       u1120 6F5E  
                     u1105 6952                       u1140 709E                       u1060 687E  
                     u1300 7384                       u1310 739C                       u1230 72A0  
                     u1410 6DE8                       u1170 712E                       u1090 6938  
                     u1155 70FA                       u1341 6D8A                       u1510 6E98  
                     u1351 6D9E                       u1095 692E                       u1440 6E26  
                     u1280 72FC                       u1601 6C96                       u1290 731E  
                     u1380 6DBE                       u1620 6CD0                       u1551 6BB0  
                     u1711 73BC                       u1480 6E64                       u1800 7DB6  
                     u1625 6CC8                       u1810 7E0C                       u1730 757A  
                     u1571 6BD8                       u1660 6D52                       u1740 76A6  
                     u1805 7DAC                       u1815 7E02                       u1735 7570  
                     u1680 682C                       u1745 769C                       u1841 6A76  
                     u1690 6854                       u1780 7D3A                       u1687 6822  
                     u1697 684A                       _TXIF 007CF4                       _main 6A6C  
             ___ftpack@arg 0001               ___ftpack@exp 0004                       fsr1h 000FE2  
                     fsr2h 000FDA                       indf1 000FE7                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9   __end_of_USART_SendString 685C  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
            __CFG_IESO$OFF 000000               ___param_bank 000000               ___fttol@exp1 000F  
             ___fttol@lval 000B                      ?_main 0001            __end_of___ftadd 6F26  
          __end_of___ftdiv 6C86            __end_of___fttol 6D7A            __end_of___lwdiv 68AE  
                    _RCSTA 000FAB                      _SPBRG 000FAF                      _TXREG 000FAD  
                    _TXSTA 000FAC              __CFG_PWRT$OFF 000000            __end_of_isdigit 66CC  
            ___ftpack@sign 0005                      tablat 000FF5                      plusw1 000FE3  
                    plusw2 000FDB                      status 000FD8            __end_of_sprintf 73B2  
              ?_USART_Init 002E             __CFG_MCLRE$OFF 000000      __size_of_calc_sha_256 0B04  
          __initialization 673E               __end_of_main 6AF2                     ??_main 0040  
            ___fttol@sign1 000A              __activetblptr 000002           ??_hash_to_string 0022  
         __end_of___altoft 69F2           __end_of___ftpack 6BA0               _calc_sha_256 73B2  
     hash_to_string@string 001E                     _TRISC6 007CA6                     _TRISC7 007CA7  
                   ___wmul 66EC                  ??___ftadd 0028             __CFG_STVREN$ON 000000  
                ??___ftdiv 0019                  ??___fttol 0005                  ??___lwdiv 0005  
                   _memcpy 6774                     _memset 6712                     clear_0 6764  
                   _primes 7EB7                     _string 7FBF            hash_to_string@i 0023  
             __pdataCOMRAM 0040                  ??_isdigit 0001               __mediumconst 7EB6  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
      __size_of_USART_Init 007A                  ??_sprintf 000E                 __accesstop 0060  
  __end_of__initialization 676A                 ___altoft@c 0009            __CFG_PBADEN$OFF 000000  
               ___ftadd@f1 0022                 ___ftadd@f2 0025       main@pronteiro_string 0281  
            ___rparam_used 000001                 ___ftdiv@f1 0013                 ___ftdiv@f2 0016  
               ___ftdiv@f3 001D                 ___fttol@f1 0001             __pcstackCOMRAM 0001  
     init_buf_state@length 0005                 _calc_chunk 6F26               sprintf@width 001B  
               __pbssBANK2 0283          ?_USART_SendString 0002         ??_USART_SendString 0004  
                  ?___wmul 0001                  ?___altoft 0009                    ?_memcpy 0001  
                  ?_memset 0001                  ?___ftpack 0001   calc_chunk@space_in_chunk 0016  
             ??_USART_Init 0032                    __Hparam 0000                    __Lparam 0000  
  __size_of_init_buf_state 0062                    ___ftadd 6D7A                    ___ftdiv 6BA0  
          __size_of___wmul 0026                    ___fttol 6C86                    ___lwdiv 685C  
               ??___altoft 000D                    __pcinit 673E            __size_of_memcpy 0046  
               ??___ftpack 0006            __size_of_memset 002C                    __ramtop 0800  
                  __ptext0 6A6C                    __ptext1 67BA                    __ptext2 716A  
                  __ptext3 66AE                    __ptext4 66EC                    __ptext5 685C  
                  __ptext6 73B2                    __ptext7 6910                    __ptext8 68AE  
                  __ptext9 6F26        USART_SendString@out 0002          __end_of_hexpowers 7FBF  
           USART_Init@temp 0032                    _isdigit 66AE                ?_calc_chunk 000C  
       __end_of_USART_Init 6A6C                    _sprintf 716A       end_of_initialization 676A  
                  memcpy@d 0007                    memcpy@n 0005                    memcpy@s 0009  
                  memset@c 0003                    memset@n 0005                    memset@p 0007  
            __Lmediumconst 7EB6                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc1 000FE6                    postinc2 000FDE  
      USART_Init@baud_rate 002E                ___ftdiv@exp 0020              ?_USART_TxChar 0001  
      __size_of_calc_chunk 0244             __end_of___wmul 6712              __pidataCOMRAM 66CC  
           __end_of_memcpy 67BA             __end_of_memset 673E              ?_rotate_right 0001  
           __end_of_primes 7FB7             __end_of_string 7FCF        start_initialization 673E  
           ??_USART_TxChar 0001    __size_of_hash_to_string 0050             _init_buf_state 68AE  
                 ??___wmul 0005           __CFG_LPT1OSC$OFF 000000                   ??_memcpy 0007  
                 ??_memset 0007             ??_rotate_right 0007  __size_of_USART_SendString 0052  
        __size_of___altoft 0078          __size_of___ftpack 00AE              __pcstackBANK0 0060  
            __pcstackBANK1 0100              __pcstackBANK2 0200        init_buf_state@input 0003  
      init_buf_state@state 0001                sprintf@ccnt 0016                sprintf@flag 0015  
              sprintf@prec 001A     __end_of_init_buf_state 6910            main@hash_string 0220  
         ___lwdiv@dividend 0001              __pmediumconst 7EB6                   ?___ftadd 0022  
                 ?___ftdiv 0013                   ?___fttol 0001                   ?___lwdiv 0001  
             ??_calc_chunk 0010                   ?_isdigit 0001                  _hexpowers 7FB7  
         ___lwdiv@quotient 0005                   ?_sprintf 0008              ?_calc_sha_256 001A  
           ___wmul@product 0005            ?_init_buf_state 0001         __end_of_calc_chunk 716A  
         __CFG_WDTPS$32768 000000                  main@F4155 0283                calc_chunk@i 0018  
     __end_of_USART_TxChar 66AE          ___wmul@multiplier 0001                  copy_data0 6752  
           ??_calc_sha_256 0020             _hash_to_string 67BA       __end_of_rotate_right 697A  
       hash_to_string@hash 0020                   __Hrparam 0000                  memcpy@tmp 000B  
                 __Lrparam 0000           __size_of___ftadd 01AC           __size_of___ftdiv 00E6  
                 ___altoft 697A           __size_of___fttol 00F4           __size_of___lwdiv 0052  
                 ___ftpack 6AF2          rotate_right@count 0005                _isdigit$385 0002  
        rotate_right@value 0001           _USART_SendString 680A                 sprintf@idx 0014  
               sprintf@val 0018           __size_of_isdigit 001E            ___lwdiv@divisor 0003  
          ___lwdiv@counter 0007                   __ptext10 6712                   __ptext11 6774  
                 __ptext12 680A                   __ptext13 66A2                   __ptext14 69F2  
                 __ptext15 6C86                   __ptext16 6BA0                   __ptext17 6D7A  
                 __ptext18 697A                   __ptext19 6AF2     __end_of_hash_to_string 680A  
         __size_of_sprintf 0248              __size_of_main 0086           calc_chunk@length 0014  
                 main@hash 0261                   memcpy@d1 0001                   memcpy@s1 0003  
                 isdigit@c 0003                   memset@p1 0001            USART_TxChar@out 0001  
          ?_hash_to_string 001E                  sprintf@ap 0012                  sprintf@sp 0008  
          calc_chunk@chunk 000C            calc_chunk@state 000E      __size_of_USART_TxChar 000C  
     __end_of_calc_sha_256 7EB6                   sprintf@c 001D                   sprintf@f 000A  
           calc_chunk@left 0012       calc_sha_256@aux_hash 0200          calc_sha_256@F4125 0040  
    __size_of_rotate_right 006A         calc_sha_256@s0_113 00D0         calc_sha_256@s1_110 00C8  
         ??_init_buf_state 0007               _USART_TxChar 66A2         calc_sha_256@length 001E  
        calc_sha_256@chunk 0060                 _USART_Init 69F2           calc_sha_256@hash 001A  
      calc_sha_256@pointer 00E0          calc_sha_256@input 001C          calc_sha_256@temp1 00DC  
        calc_sha_256@temp2 00D8             calc_sha_256@s0 00C0             calc_sha_256@s1 00C4  
          calc_sha_256@maj 00D4             calc_sha_256@ch 00CC              calc_sha_256@h 00A0  
            calc_sha_256@i 00EC              calc_sha_256@j 003E          calc_sha_256@state 00E2  
         calc_sha_256@word 0100  
