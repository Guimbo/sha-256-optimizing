

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 28 18:25:57 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36  0000                     
    37                           ; Version 1.45
    38                           ; Generated 16/11/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC18F4550 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     
    72                           	psect	idataCOMRAM
    73  006690                     __pidataCOMRAM:
    74                           	opt stack 0
    75                           
    76                           ;initializer for calc_sha_256@F4130
    77  006690  E667               	dw	58983
    78  006692  6A09               	dw	27145
    79  006694  AE85               	dw	44677
    80  006696  BB67               	dw	47975
    81  006698  F372               	dw	62322
    82  00669A  3C6E               	dw	15470
    83  00669C  F53A               	dw	62778
    84  00669E  A54F               	dw	42319
    85  0066A0  527F               	dw	21119
    86  0066A2  510E               	dw	20750
    87  0066A4  688C               	dw	26764
    88  0066A6  9B05               	dw	39685
    89  0066A8  D9AB               	dw	55723
    90  0066AA  1F83               	dw	8067
    91  0066AC  CD19               	dw	52505
    92  0066AE  5BE0               	dw	23520
    93                           
    94                           	psect	mediumconst
    95  007EB6                     __pmediumconst:
    96                           	opt stack 0
    97  007EB6  00                 	db	0
    98  007EB7                     _k:
    99                           	opt stack 0
   100  007EB7  2F98               	dw	12184
   101  007EB9  428A               	dw	17034
   102  007EBB  4491               	dw	17553
   103  007EBD  7137               	dw	28983
   104  007EBF  FBCF               	dw	64463
   105  007EC1  B5C0               	dw	46528
   106  007EC3  DBA5               	dw	56229
   107  007EC5  E9B5               	dw	59829
   108  007EC7  C25B               	dw	49755
   109  007EC9  3956               	dw	14678
   110  007ECB  11F1               	dw	4593
   111  007ECD  59F1               	dw	23025
   112  007ECF  82A4               	dw	33444
   113  007ED1  923F               	dw	37439
   114  007ED3  5ED5               	dw	24277
   115  007ED5  AB1C               	dw	43804
   116  007ED7  AA98               	dw	43672
   117  007ED9  D807               	dw	55303
   118  007EDB  5B01               	dw	23297
   119  007EDD  1283               	dw	4739
   120  007EDF  85BE               	dw	34238
   121  007EE1  2431               	dw	9265
   122  007EE3  7DC3               	dw	32195
   123  007EE5  550C               	dw	21772
   124  007EE7  5D74               	dw	23924
   125  007EE9  72BE               	dw	29374
   126  007EEB  B1FE               	dw	45566
   127  007EED  80DE               	dw	32990
   128  007EEF  06A7               	dw	1703
   129  007EF1  9BDC               	dw	39900
   130  007EF3  F174               	dw	61812
   131  007EF5  C19B               	dw	49563
   132  007EF7  69C1               	dw	27073
   133  007EF9  E49B               	dw	58523
   134  007EFB  4786               	dw	18310
   135  007EFD  EFBE               	dw	61374
   136  007EFF  9DC6               	dw	40390
   137  007F01  0FC1               	dw	4033
   138  007F03  A1CC               	dw	41420
   139  007F05  240C               	dw	9228
   140  007F07  2C6F               	dw	11375
   141  007F09  2DE9               	dw	11753
   142  007F0B  84AA               	dw	33962
   143  007F0D  4A74               	dw	19060
   144  007F0F  A9DC               	dw	43484
   145  007F11  5CB0               	dw	23728
   146  007F13  88DA               	dw	35034
   147  007F15  76F9               	dw	30457
   148  007F17  5152               	dw	20818
   149  007F19  983E               	dw	38974
   150  007F1B  C66D               	dw	50797
   151  007F1D  A831               	dw	43057
   152  007F1F  27C8               	dw	10184
   153  007F21  B003               	dw	45059
   154  007F23  7FC7               	dw	32711
   155  007F25  BF59               	dw	48985
   156  007F27  0BF3               	dw	3059
   157  007F29  C6E0               	dw	50912
   158  007F2B  9147               	dw	37191
   159  007F2D  D5A7               	dw	54695
   160  007F2F  6351               	dw	25425
   161  007F31  06CA               	dw	1738
   162  007F33  2967               	dw	10599
   163  007F35  1429               	dw	5161
   164  007F37  0A85               	dw	2693
   165  007F39  27B7               	dw	10167
   166  007F3B  2138               	dw	8504
   167  007F3D  2E1B               	dw	11803
   168  007F3F  6DFC               	dw	28156
   169  007F41  4D2C               	dw	19756
   170  007F43  0D13               	dw	3347
   171  007F45  5338               	dw	21304
   172  007F47  7354               	dw	29524
   173  007F49  650A               	dw	25866
   174  007F4B  0ABB               	dw	2747
   175  007F4D  766A               	dw	30314
   176  007F4F  C92E               	dw	51502
   177  007F51  81C2               	dw	33218
   178  007F53  2C85               	dw	11397
   179  007F55  9272               	dw	37490
   180  007F57  E8A1               	dw	59553
   181  007F59  A2BF               	dw	41663
   182  007F5B  664B               	dw	26187
   183  007F5D  A81A               	dw	43034
   184  007F5F  8B70               	dw	35696
   185  007F61  C24B               	dw	49739
   186  007F63  51A3               	dw	20899
   187  007F65  C76C               	dw	51052
   188  007F67  E819               	dw	59417
   189  007F69  D192               	dw	53650
   190  007F6B  0624               	dw	1572
   191  007F6D  D699               	dw	54937
   192  007F6F  3585               	dw	13701
   193  007F71  F40E               	dw	62478
   194  007F73  A070               	dw	41072
   195  007F75  106A               	dw	4202
   196  007F77  C116               	dw	49430
   197  007F79  19A4               	dw	6564
   198  007F7B  6C08               	dw	27656
   199  007F7D  1E37               	dw	7735
   200  007F7F  774C               	dw	30540
   201  007F81  2748               	dw	10056
   202  007F83  BCB5               	dw	48309
   203  007F85  34B0               	dw	13488
   204  007F87  0CB3               	dw	3251
   205  007F89  391C               	dw	14620
   206  007F8B  AA4A               	dw	43594
   207  007F8D  4ED8               	dw	20184
   208  007F8F  CA4F               	dw	51791
   209  007F91  5B9C               	dw	23452
   210  007F93  6FF3               	dw	28659
   211  007F95  682E               	dw	26670
   212  007F97  82EE               	dw	33518
   213  007F99  748F               	dw	29839
   214  007F9B  636F               	dw	25455
   215  007F9D  78A5               	dw	30885
   216  007F9F  7814               	dw	30740
   217  007FA1  84C8               	dw	33992
   218  007FA3  0208               	dw	520
   219  007FA5  8CC7               	dw	36039
   220  007FA7  FFFA               	dw	65530
   221  007FA9  90BE               	dw	37054
   222  007FAB  6CEB               	dw	27883
   223  007FAD  A450               	dw	42064
   224  007FAF  A3F7               	dw	41975
   225  007FB1  BEF9               	dw	48889
   226  007FB3  78F2               	dw	30962
   227  007FB5  C671               	dw	50801
   228  007FB7                     __end_of_k:
   229                           	opt stack 0
   230  007FB7                     _hexpowers:
   231                           	opt stack 0
   232  007FB7  0001               	dw	1
   233  007FB9  0010               	dw	16
   234  007FBB  0100               	dw	256
   235  007FBD  1000               	dw	4096
   236  007FBF                     __end_of_hexpowers:
   237                           	opt stack 0
   238  007FBF                     _string:
   239                           	opt stack 0
   240  007FBF  61                 	db	97
   241  007FC0  62                 	db	98
   242  007FC1  63                 	db	99
   243  007FC2  64                 	db	100
   244  007FC3  61                 	db	97
   245  007FC4  62                 	db	98
   246  007FC5  63                 	db	99
   247  007FC6  64                 	db	100
   248  007FC7  61                 	db	97
   249  007FC8  62                 	db	98
   250  007FC9  63                 	db	99
   251  007FCA  64                 	db	100
   252  007FCB  61                 	db	97
   253  007FCC  62                 	db	98
   254  007FCD  63                 	db	99
   255  007FCE  64                 	db	100
   256  007FCF                     __end_of_string:
   257                           	opt stack 0
   258  0000                     _TXREG	set	4013
   259  0000                     _RCSTA	set	4011
   260  0000                     _TXSTA	set	4012
   261  0000                     _SPBRG	set	4015
   262  0000                     _TXIF	set	31988
   263  0000                     _TRISC7	set	31911
   264  0000                     _TRISC6	set	31910
   265  007FCF                     STR_4:
   266  007FCF  30                 	db	48	;'0'
   267  007FD0  31                 	db	49	;'1'
   268  007FD1  32                 	db	50	;'2'
   269  007FD2  33                 	db	51	;'3'
   270  007FD3  34                 	db	52	;'4'
   271  007FD4  35                 	db	53	;'5'
   272  007FD5  36                 	db	54	;'6'
   273  007FD6  37                 	db	55	;'7'
   274  007FD7  38                 	db	56	;'8'
   275  007FD8  39                 	db	57	;'9'
   276  007FD9  61                 	db	97	;'a'
   277  007FDA  62                 	db	98	;'b'
   278  007FDB  63                 	db	99	;'c'
   279  007FDC  64                 	db	100	;'d'
   280  007FDD  65                 	db	101	;'e'
   281  007FDE  66                 	db	102	;'f'
   282  007FDF  00                 	db	0
   283  007FE0                     STR_2:
   284  007FE0  48                 	db	72	;'H'
   285  007FE1  61                 	db	97	;'a'
   286  007FE2  73                 	db	115	;'s'
   287  007FE3  68                 	db	104	;'h'
   288  007FE4  20                 	db	32
   289  007FE5  53                 	db	83	;'S'
   290  007FE6  74                 	db	116	;'t'
   291  007FE7  72                 	db	114	;'r'
   292  007FE8  69                 	db	105	;'i'
   293  007FE9  6E                 	db	110	;'n'
   294  007FEA  67                 	db	103	;'g'
   295  007FEB  3A                 	db	58	;':'
   296  007FEC  20                 	db	32
   297  007FED  00                 	db	0
   298  007FEE                     STR_3:
   299  007FEE  20                 	db	32
   300  007FEF  20                 	db	32
   301  007FF0  20                 	db	32
   302  007FF1  20                 	db	32
   303  007FF2  20                 	db	32
   304  007FF3  20                 	db	32
   305  007FF4  20                 	db	32
   306  007FF5  20                 	db	32
   307  007FF6  20                 	db	32
   308  007FF7  20                 	db	32
   309  007FF8  00                 	db	0
   310  007FF9                     STR_1:
   311  007FF9  25                 	db	37
   312  007FFA  30                 	db	48	;'0'
   313  007FFB  32                 	db	50	;'2'
   314  007FFC  78                 	db	120	;'x'
   315  007FFD  00                 	db	0
   316                           
   317                           ; #config settings
   318  007FFE  00                 	db	0	; dummy byte at the end
   319  0000                     
   320                           	psect	cinit
   321  006702                     __pcinit:
   322                           	opt stack 0
   323  006702                     start_initialization:
   324                           	opt stack 0
   325  006702                     __initialization:
   326                           	opt stack 0
   327                           
   328                           ; Initialize objects allocated to COMRAM (32 bytes)
   329                           ; load TBLPTR registers with __pidataCOMRAM
   330  006702  0E90               	movlw	low __pidataCOMRAM
   331  006704  6EF6               	movwf	tblptrl,c
   332  006706  0E66               	movlw	high __pidataCOMRAM
   333  006708  6EF7               	movwf	tblptrh,c
   334  00670A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   335  00670C  6EF8               	movwf	tblptru,c
   336  00670E  EE00  F040         	lfsr	0,__pdataCOMRAM
   337  006712  EE10 F020          	lfsr	1,32
   338  006716                     copy_data0:
   339  006716  0009               	tblrd		*+
   340  006718  CFF5 FFEE          	movff	tablat,postinc0
   341  00671C  50E5               	movf	postdec1,w,c
   342  00671E  50E1               	movf	fsr1l,w,c
   343  006720  E1FA               	bnz	copy_data0
   344                           
   345                           ; Clear objects allocated to BANK2 (65 bytes)
   346  006722  EE02  F087         	lfsr	0,__pbssBANK2
   347  006726  0E41               	movlw	65
   348  006728                     clear_0:
   349  006728  6AEE               	clrf	postinc0,c
   350  00672A  06E8               	decf	wreg,f,c
   351  00672C  E1FD               	bnz	clear_0
   352  00672E                     end_of_initialization:
   353                           	opt stack 0
   354  00672E                     __end_of__initialization:
   355                           	opt stack 0
   356  00672E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   357  006730  6EF8               	movwf	tblptru,c
   358  006732  0100               	movlb	0
   359  006734  EF17  F035         	goto	_main	;jump to C main() function
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           wreg	equ	0xFE8
   366                           postdec1	equ	0xFE5
   367                           fsr1l	equ	0xFE1
   368                           
   369                           	psect	dataCOMRAM
   370  000040                     __pdataCOMRAM:
   371                           	opt stack 0
   372  000040                     calc_sha_256@F4130:
   373                           	opt stack 0
   374  000040                     	ds	32
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           postdec1	equ	0xFE5
   382                           fsr1l	equ	0xFE1
   383                           
   384                           	psect	bssBANK2
   385  000287                     __pbssBANK2:
   386                           	opt stack 0
   387  000287                     main@F4162:
   388                           	opt stack 0
   389  000287                     	ds	65
   390                           tblptru	equ	0xFF8
   391                           tblptrh	equ	0xFF7
   392                           tblptrl	equ	0xFF6
   393                           tablat	equ	0xFF5
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           postdec1	equ	0xFE5
   397                           fsr1l	equ	0xFE1
   398                           
   399                           	psect	cstackBANK2
   400  000200                     __pcstackBANK2:
   401                           	opt stack 0
   402  000200                     calc_sha_256@ah:
   403                           	opt stack 0
   404                           
   405                           ; 32 bytes @ 0x0
   406  000200                     	ds	32
   407  000220                     main@hash_string:
   408                           	opt stack 0
   409                           
   410                           ; 65 bytes @ 0x20
   411  000220                     	ds	65
   412  000261                     main@hash:
   413                           	opt stack 0
   414                           
   415                           ; 32 bytes @ 0x61
   416  000261                     	ds	32
   417  000281                     main@i:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x81
   421  000281                     	ds	2
   422  000283                     main@j:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x83
   426  000283                     	ds	2
   427  000285                     main@p_string:
   428                           	opt stack 0
   429                           
   430                           ; 2 bytes @ 0x85
   431  000285                     	ds	2
   432                           tblptru	equ	0xFF8
   433                           tblptrh	equ	0xFF7
   434                           tblptrl	equ	0xFF6
   435                           tablat	equ	0xFF5
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           postdec1	equ	0xFE5
   439                           fsr1l	equ	0xFE1
   440                           
   441                           	psect	cstackBANK1
   442  000100                     __pcstackBANK1:
   443                           	opt stack 0
   444  000100                     calc_sha_256@w:
   445                           	opt stack 0
   446                           
   447                           ; 256 bytes @ 0x0
   448  000100                     	ds	256
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           postdec1	equ	0xFE5
   456                           fsr1l	equ	0xFE1
   457                           
   458                           	psect	cstackBANK0
   459  000060                     __pcstackBANK0:
   460                           	opt stack 0
   461  000060                     calc_sha_256@chunk:
   462                           	opt stack 0
   463                           
   464                           ; 64 bytes @ 0x0
   465  000060                     	ds	64
   466  0000A0                     calc_sha_256@h:
   467                           	opt stack 0
   468                           
   469                           ; 32 bytes @ 0x40
   470  0000A0                     	ds	32
   471  0000C0                     calc_sha_256@s0:
   472                           	opt stack 0
   473                           
   474                           ; 4 bytes @ 0x60
   475  0000C0                     	ds	4
   476  0000C4                     calc_sha_256@s1:
   477                           	opt stack 0
   478                           
   479                           ; 4 bytes @ 0x64
   480  0000C4                     	ds	4
   481  0000C8                     calc_sha_256@s1_114:
   482                           	opt stack 0
   483                           
   484                           ; 4 bytes @ 0x68
   485  0000C8                     	ds	4
   486  0000CC                     calc_sha_256@ch:
   487                           	opt stack 0
   488                           
   489                           ; 4 bytes @ 0x6C
   490  0000CC                     	ds	4
   491  0000D0                     calc_sha_256@s0_117:
   492                           	opt stack 0
   493                           
   494                           ; 4 bytes @ 0x70
   495  0000D0                     	ds	4
   496  0000D4                     calc_sha_256@maj:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x74
   500  0000D4                     	ds	4
   501  0000D8                     calc_sha_256@temp2:
   502                           	opt stack 0
   503                           
   504                           ; 4 bytes @ 0x78
   505  0000D8                     	ds	4
   506  0000DC                     calc_sha_256@temp1:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x7C
   510  0000DC                     	ds	4
   511  0000E0                     calc_sha_256@p:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x80
   515  0000E0                     	ds	2
   516  0000E2                     calc_sha_256@state:
   517                           	opt stack 0
   518                           
   519                           ; 10 bytes @ 0x82
   520  0000E2                     	ds	10
   521  0000EC                     calc_sha_256@i:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x8C
   525  0000EC                     	ds	2
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           postdec1	equ	0xFE5
   533                           fsr1l	equ	0xFE1
   534                           
   535                           	psect	cstackCOMRAM
   536  000001                     __pcstackCOMRAM:
   537                           	opt stack 0
   538  000001                     ??_isdigit:
   539  000001                     ?___wmul:
   540                           	opt stack 0
   541  000001                     ?___lwdiv:
   542                           	opt stack 0
   543  000001                     ?___ftpack:
   544                           	opt stack 0
   545  000001                     ?_rotate_right:
   546                           	opt stack 0
   547  000001                     ?___fttol:
   548                           	opt stack 0
   549  000001                     USART_TxChar@out:
   550                           	opt stack 0
   551  000001                     init_buf_state@state:
   552                           	opt stack 0
   553  000001                     ___wmul@multiplier:
   554                           	opt stack 0
   555  000001                     ___lwdiv@dividend:
   556                           	opt stack 0
   557  000001                     memcpy@d1:
   558                           	opt stack 0
   559  000001                     memset@p1:
   560                           	opt stack 0
   561  000001                     ___ftpack@arg:
   562                           	opt stack 0
   563  000001                     ___fttol@f1:
   564                           	opt stack 0
   565  000001                     rotate_right@value:
   566                           	opt stack 0
   567                           
   568                           ; 4 bytes @ 0x0
   569  000001                     	ds	1
   570  000002                     _isdigit$391:
   571                           	opt stack 0
   572  000002                     USART_SendString@out:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x1
   576  000002                     	ds	1
   577  000003                     isdigit@c:
   578                           	opt stack 0
   579  000003                     init_buf_state@input:
   580                           	opt stack 0
   581  000003                     ___wmul@multiplicand:
   582                           	opt stack 0
   583  000003                     ___lwdiv@divisor:
   584                           	opt stack 0
   585  000003                     memcpy@s1:
   586                           	opt stack 0
   587  000003                     memset@c:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x2
   591  000003                     	ds	1
   592  000004                     ___ftpack@exp:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x3
   596  000004                     	ds	1
   597  000005                     ??___fttol:
   598  000005                     ___ftpack@sign:
   599                           	opt stack 0
   600  000005                     init_buf_state@len:
   601                           	opt stack 0
   602  000005                     rotate_right@count:
   603                           	opt stack 0
   604  000005                     ___wmul@product:
   605                           	opt stack 0
   606  000005                     ___lwdiv@quotient:
   607                           	opt stack 0
   608  000005                     memcpy@n:
   609                           	opt stack 0
   610  000005                     memset@n:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x4
   614  000005                     	ds	1
   615  000006                     ??___ftpack:
   616                           
   617                           ; 1 bytes @ 0x5
   618  000006                     	ds	1
   619  000007                     ??_rotate_right:
   620  000007                     ___lwdiv@counter:
   621                           	opt stack 0
   622  000007                     memcpy@d:
   623                           	opt stack 0
   624  000007                     memset@p:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x6
   628  000007                     	ds	1
   629  000008                     ?_sprintf:
   630                           	opt stack 0
   631  000008                     sprintf@sp:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x7
   635  000008                     	ds	1
   636  000009                     ?___altoft:
   637                           	opt stack 0
   638  000009                     memcpy@s:
   639                           	opt stack 0
   640  000009                     ___altoft@c:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0x8
   644  000009                     	ds	1
   645  00000A                     ___fttol@sign1:
   646                           	opt stack 0
   647  00000A                     sprintf@f:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x9
   651  00000A                     	ds	1
   652  00000B                     memcpy@tmp:
   653                           	opt stack 0
   654  00000B                     ___fttol@lval:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0xA
   658  00000B                     	ds	1
   659  00000C                     ?_calc_chunk:
   660                           	opt stack 0
   661  00000C                     calc_chunk@chunk:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0xB
   665  00000C                     	ds	1
   666  00000D                     ??___altoft:
   667                           
   668                           ; 1 bytes @ 0xC
   669  00000D                     	ds	1
   670  00000E                     ??_sprintf:
   671  00000E                     calc_chunk@state:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0xD
   675  00000E                     	ds	1
   676  00000F                     ___fttol@exp1:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0xE
   680  00000F                     	ds	1
   681  000010                     ??_calc_chunk:
   682                           
   683                           ; 1 bytes @ 0xF
   684  000010                     	ds	1
   685  000011                     ___altoft@exp:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x10
   689  000011                     	ds	1
   690  000012                     ___altoft@sign:
   691                           	opt stack 0
   692  000012                     calc_chunk@left:
   693                           	opt stack 0
   694  000012                     sprintf@ap:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0x11
   698  000012                     	ds	1
   699  000013                     ?___ftdiv:
   700                           	opt stack 0
   701  000013                     ___ftdiv@f1:
   702                           	opt stack 0
   703                           
   704                           ; 3 bytes @ 0x12
   705  000013                     	ds	1
   706  000014                     sprintf@idx:
   707                           	opt stack 0
   708  000014                     calc_chunk@len:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x13
   712  000014                     	ds	1
   713  000015                     sprintf@flag:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x14
   717  000015                     	ds	1
   718  000016                     calc_chunk@space_in_chunk:
   719                           	opt stack 0
   720  000016                     sprintf@ccnt:
   721                           	opt stack 0
   722  000016                     ___ftdiv@f2:
   723                           	opt stack 0
   724                           
   725                           ; 3 bytes @ 0x15
   726  000016                     	ds	2
   727  000018                     calc_chunk@i:
   728                           	opt stack 0
   729  000018                     sprintf@val:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x17
   733  000018                     	ds	1
   734  000019                     ??___ftdiv:
   735                           
   736                           ; 1 bytes @ 0x18
   737  000019                     	ds	1
   738  00001A                     sprintf@prec:
   739                           	opt stack 0
   740  00001A                     calc_sha_256@hash:
   741                           	opt stack 0
   742                           
   743                           ; 2 bytes @ 0x19
   744  00001A                     	ds	1
   745  00001B                     sprintf@width:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x1A
   749  00001B                     	ds	1
   750  00001C                     ___ftdiv@cntr:
   751                           	opt stack 0
   752  00001C                     calc_sha_256@input:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x1B
   756  00001C                     	ds	1
   757  00001D                     sprintf@c:
   758                           	opt stack 0
   759  00001D                     ___ftdiv@f3:
   760                           	opt stack 0
   761                           
   762                           ; 3 bytes @ 0x1C
   763  00001D                     	ds	1
   764  00001E                     calc_sha_256@len:
   765                           	opt stack 0
   766  00001E                     hash_to_string@string:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x1D
   770  00001E                     	ds	2
   771  000020                     ??_calc_sha_256:
   772  000020                     ___ftdiv@exp:
   773                           	opt stack 0
   774  000020                     hash_to_string@hash:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x1F
   778  000020                     	ds	1
   779  000021                     ___ftdiv@sign:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x20
   783  000021                     	ds	1
   784  000022                     ??_hash_to_string:
   785  000022                     ?___ftadd:
   786                           	opt stack 0
   787  000022                     ___ftadd@f1:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x21
   791  000022                     	ds	1
   792  000023                     hash_to_string@i:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x22
   796  000023                     	ds	2
   797  000025                     ___ftadd@f2:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x24
   801  000025                     	ds	3
   802  000028                     ??___ftadd:
   803                           
   804                           ; 1 bytes @ 0x27
   805  000028                     	ds	3
   806  00002B                     ___ftadd@sign:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x2A
   810  00002B                     	ds	1
   811  00002C                     ___ftadd@exp2:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x2B
   815  00002C                     	ds	1
   816  00002D                     ___ftadd@exp1:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x2C
   820  00002D                     	ds	1
   821  00002E                     USART_Init@baud_rate:
   822                           	opt stack 0
   823                           
   824                           ; 4 bytes @ 0x2D
   825  00002E                     	ds	4
   826  000032                     USART_Init@temp:
   827                           	opt stack 0
   828                           
   829                           ; 3 bytes @ 0x31
   830  000032                     	ds	12
   831  00003E                     calc_sha_256@j:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x3D
   835  00003E                     	ds	2
   836  000040                     tblptru	equ	0xFF8
   837                           tblptrh	equ	0xFF7
   838                           tblptrl	equ	0xFF6
   839                           tablat	equ	0xFF5
   840                           postinc0	equ	0xFEE
   841                           wreg	equ	0xFE8
   842                           postdec1	equ	0xFE5
   843                           fsr1l	equ	0xFE1
   844                           
   845                           ; 1 bytes @ 0x3F
   846 ;;
   847 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   848 ;;
   849 ;; *************** function _main *****************
   850 ;; Defined at:
   851 ;;		line 297 in file "main.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;  hash_string    65   32[BANK2 ] unsigned char [65]
   856 ;;  hash           32   97[BANK2 ] unsigned char [32]
   857 ;;  p_string        2  133[BANK2 ] PTR unsigned char 
   858 ;;		 -> string(16), 
   859 ;;  j               2  131[BANK2 ] int 
   860 ;;  i               2  129[BANK2 ] int 
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   870 ;;      Params:         0       0       0       0       0       0       0       0       0
   871 ;;      Locals:         0       0       0     103       0       0       0       0       0
   872 ;;      Temps:          0       0       0       0       0       0       0       0       0
   873 ;;      Totals:         0       0       0     103       0       0       0       0       0
   874 ;;Total ram usage:      103 bytes
   875 ;; Hardware stack levels required when called:    3
   876 ;; This function calls:
   877 ;;		_USART_Init
   878 ;;		_USART_SendString
   879 ;;		_calc_sha_256
   880 ;;		_hash_to_string
   881 ;; This function is called by:
   882 ;;		Startup code after reset
   883 ;; This function uses a non-reentrant model
   884 ;;
   885                           
   886                           	psect	text0
   887  006A2E                     __ptext0:
   888                           	opt stack 0
   889  006A2E                     _main:
   890                           	opt stack 28
   891                           
   892                           ;main.c: 317: int i = 0;
   893                           
   894                           ;incstack = 0
   895  006A2E  0E00               	movlw	0
   896  006A30  0102               	movlb	2	; () banked
   897  006A32  6F82               	movwf	(main@i+1)& (0+255),b
   898  006A34  0E00               	movlw	0
   899  006A36  6F81               	movwf	main@i& (0+255),b
   900                           
   901                           ;main.c: 319: int j = 0;
   902  006A38  0E00               	movlw	0
   903  006A3A  6F84               	movwf	(main@j+1)& (0+255),b
   904  006A3C  0E00               	movlw	0
   905  006A3E  6F83               	movwf	main@j& (0+255),b
   906                           
   907                           ; BSR set to: 2
   908                           ;main.c: 322: char hash_string[65]={'\0'};
   909  006A40  EE22  F087         	lfsr	2,main@F4162
   910  006A44  EE12  F020         	lfsr	1,main@hash_string
   911  006A48  0E40               	movlw	64
   912  006A4A                     u2011:
   913  006A4A  CFDB FFE3          	movff	plusw2,plusw1
   914  006A4E  06E8               	decf	wreg,f,c
   915  006A50  E2FC               	bc	u2011
   916                           
   917                           ; BSR set to: 2
   918                           ;main.c: 325: uint8_t hash[32];
   919                           ;main.c: 328: char *p_string;
   920                           ;main.c: 329: p_string = string;
   921  006A52  0EBF               	movlw	low _string
   922  006A54  6F85               	movwf	main@p_string& (0+255),b
   923  006A56  0E7F               	movlw	high _string
   924  006A58  6F86               	movwf	(main@p_string+1)& (0+255),b
   925                           
   926                           ; BSR set to: 2
   927                           ;main.c: 331: USART_Init(9600);
   928  006A5A  0E80               	movlw	128
   929  006A5C  6E2E               	movwf	USART_Init@baud_rate,c
   930  006A5E  0E25               	movlw	37
   931  006A60  6E2F               	movwf	USART_Init@baud_rate+1,c
   932  006A62  0E00               	movlw	0
   933  006A64  6E30               	movwf	USART_Init@baud_rate+2,c
   934  006A66  0E00               	movlw	0
   935  006A68  6E31               	movwf	USART_Init@baud_rate+3,c
   936  006A6A  ECDA  F034         	call	_USART_Init	;wreg free
   937  006A6E                     
   938                           ;main.c: 337: calc_sha_256(hash, p_string, 16);
   939  006A6E  0E61               	movlw	low main@hash
   940  006A70  6E1A               	movwf	calc_sha_256@hash,c
   941  006A72  0E02               	movlw	high main@hash
   942  006A74  6E1B               	movwf	calc_sha_256@hash+1,c
   943  006A76  C285  F01C         	movff	main@p_string,calc_sha_256@input
   944  006A7A  C286  F01D         	movff	main@p_string+1,calc_sha_256@input+1
   945  006A7E  0E00               	movlw	0
   946  006A80  6E1F               	movwf	calc_sha_256@len+1,c
   947  006A82  0E10               	movlw	16
   948  006A84  6E1E               	movwf	calc_sha_256@len,c
   949  006A86  ECC2  F039         	call	_calc_sha_256	;wreg free
   950                           
   951                           ;main.c: 340: hash_to_string(hash_string, hash);
   952  006A8A  0E20               	movlw	low main@hash_string
   953  006A8C  6E1E               	movwf	hash_to_string@string,c
   954  006A8E  0E02               	movlw	high main@hash_string
   955  006A90  6E1F               	movwf	hash_to_string@string+1,c
   956  006A92  0E61               	movlw	low main@hash
   957  006A94  6E20               	movwf	hash_to_string@hash,c
   958  006A96  0E02               	movlw	high main@hash
   959  006A98  6E21               	movwf	hash_to_string@hash+1,c
   960  006A9A  ECBF  F033         	call	_hash_to_string	;wreg free
   961                           
   962                           ;main.c: 343: USART_SendString("Hash String: ");
   963  006A9E  0EE0               	movlw	low STR_2
   964  006AA0  6E02               	movwf	USART_SendString@out,c
   965  006AA2  0E7F               	movlw	high STR_2
   966  006AA4  6E03               	movwf	USART_SendString@out+1,c
   967  006AA6  ECE6  F033         	call	_USART_SendString	;wreg free
   968                           
   969                           ;main.c: 344: USART_SendString(hash_string);
   970  006AAA  0E20               	movlw	low main@hash_string
   971  006AAC  6E02               	movwf	USART_SendString@out,c
   972  006AAE  0E02               	movlw	high main@hash_string
   973  006AB0  6E03               	movwf	USART_SendString@out+1,c
   974  006AB2  ECE6  F033         	call	_USART_SendString	;wreg free
   975                           
   976                           ;main.c: 345: USART_SendString("          ");
   977  006AB6  0EEE               	movlw	low STR_3
   978  006AB8  6E02               	movwf	USART_SendString@out,c
   979  006ABA  0E7F               	movlw	high STR_3
   980  006ABC  6E03               	movwf	USART_SendString@out+1,c
   981  006ABE  ECE6  F033         	call	_USART_SendString	;wreg free
   982  006AC2  D7D5               	goto	l95
   983  006AC4                     __end_of_main:
   984                           	opt stack 0
   985                           tblptru	equ	0xFF8
   986                           tblptrh	equ	0xFF7
   987                           tblptrl	equ	0xFF6
   988                           tablat	equ	0xFF5
   989                           postinc0	equ	0xFEE
   990                           wreg	equ	0xFE8
   991                           postdec1	equ	0xFE5
   992                           plusw1	equ	0xFE3
   993                           fsr1l	equ	0xFE1
   994                           plusw2	equ	0xFDB
   995                           
   996 ;; *************** function _hash_to_string *****************
   997 ;; Defined at:
   998 ;;		line 281 in file "main.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;  string          2   29[COMRAM] PTR unsigned char 
  1001 ;;		 -> main@hash_string(65), 
  1002 ;;  hash            2   31[COMRAM] PTR const unsigned char 
  1003 ;;		 -> main@hash(32), 
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;  i               2   34[COMRAM] unsigned int 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1015 ;;      Params:         4       0       0       0       0       0       0       0       0
  1016 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1017 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1018 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1019 ;;Total ram usage:        7 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; Hardware stack levels required when called:    2
  1022 ;; This function calls:
  1023 ;;		_sprintf
  1024 ;; This function is called by:
  1025 ;;		_main
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text1
  1030  00677E                     __ptext1:
  1031                           	opt stack 0
  1032  00677E                     _hash_to_string:
  1033                           	opt stack 28
  1034                           
  1035                           ;main.c: 283: size_t i;
  1036                           ;main.c: 284: for (i = 0; i < 32; i++) {
  1037                           
  1038                           ;incstack = 0
  1039  00677E  0E00               	movlw	0
  1040  006780  6E24               	movwf	hash_to_string@i+1,c
  1041  006782  0E00               	movlw	0
  1042  006784  6E23               	movwf	hash_to_string@i,c
  1043  006786                     l2043:
  1044  006786  5024               	movf	hash_to_string@i+1,w,c
  1045  006788  E120               	bnz	l88
  1046  00678A  0E20               	movlw	32
  1047  00678C  5C23               	subwf	hash_to_string@i,w,c
  1048  00678E  B0D8               	btfsc	status,0,c
  1049  006790  0012               	return	
  1050                           
  1051                           ;main.c: 285: string += sprintf(string, "%02x", hash[i]);
  1052  006792  C01E  F008         	movff	hash_to_string@string,sprintf@sp
  1053  006796  C01F  F009         	movff	hash_to_string@string+1,sprintf@sp+1
  1054  00679A  0EF9               	movlw	low STR_1
  1055  00679C  6E0A               	movwf	sprintf@f,c
  1056  00679E  0E7F               	movlw	high STR_1
  1057  0067A0  6E0B               	movwf	sprintf@f+1,c
  1058  0067A2  5023               	movf	hash_to_string@i,w,c
  1059  0067A4  2420               	addwf	hash_to_string@hash,w,c
  1060  0067A6  6ED9               	movwf	fsr2l,c
  1061  0067A8  5024               	movf	hash_to_string@i+1,w,c
  1062  0067AA  2021               	addwfc	hash_to_string@hash+1,w,c
  1063  0067AC  6EDA               	movwf	fsr2h,c
  1064  0067AE  50DF               	movf	indf2,w,c
  1065  0067B0  6E22               	movwf	??_hash_to_string& (0+255),c
  1066  0067B2  5022               	movf	??_hash_to_string,w,c
  1067  0067B4  6E0C               	movwf	?_sprintf+4,c
  1068  0067B6  6A0D               	clrf	?_sprintf+5,c
  1069  0067B8  EC9E  F038         	call	_sprintf	;wreg free
  1070  0067BC  5008               	movf	?_sprintf,w,c
  1071  0067BE  261E               	addwf	hash_to_string@string,f,c
  1072  0067C0  5009               	movf	?_sprintf+1,w,c
  1073  0067C2  221F               	addwfc	hash_to_string@string+1,f,c
  1074  0067C4  4A23               	infsnz	hash_to_string@i,f,c
  1075  0067C6  2A24               	incf	hash_to_string@i+1,f,c
  1076  0067C8  D7DE               	goto	l2043
  1077  0067CA                     l88:
  1078  0067CA  0012               	return		;funcret
  1079  0067CC                     __end_of_hash_to_string:
  1080                           	opt stack 0
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           postinc0	equ	0xFEE
  1086                           wreg	equ	0xFE8
  1087                           postdec1	equ	0xFE5
  1088                           plusw1	equ	0xFE3
  1089                           fsr1l	equ	0xFE1
  1090                           indf2	equ	0xFDF
  1091                           plusw2	equ	0xFDB
  1092                           fsr2h	equ	0xFDA
  1093                           fsr2l	equ	0xFD9
  1094                           status	equ	0xFD8
  1095                           
  1096 ;; *************** function _sprintf *****************
  1097 ;; Defined at:
  1098 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;  sp              2    7[COMRAM] PTR unsigned char 
  1101 ;;		 -> main@hash_string(65), 
  1102 ;;  f               2    9[COMRAM] PTR const unsigned char 
  1103 ;;		 -> STR_1(5), 
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  idx             1   19[COMRAM] unsigned char 
  1106 ;;  tmpval          4    0        struct .
  1107 ;;  cp              3    0        PTR const unsigned char 
  1108 ;;  width           2   26[COMRAM] int 
  1109 ;;  val             2   23[COMRAM] unsigned int 
  1110 ;;  ccnt            2   21[COMRAM] int 
  1111 ;;  ap              2   17[COMRAM] PTR void [1]
  1112 ;;		 -> ?_sprintf(2), 
  1113 ;;  len             2    0        unsigned int 
  1114 ;;  c               1   28[COMRAM] char 
  1115 ;;  prec            1   25[COMRAM] char 
  1116 ;;  flag            1   20[COMRAM] unsigned char 
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  2    7[COMRAM] int 
  1119 ;; Registers used:
  1120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1126 ;;      Params:         6       0       0       0       0       0       0       0       0
  1127 ;;      Locals:        12       0       0       0       0       0       0       0       0
  1128 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1129 ;;      Totals:        22       0       0       0       0       0       0       0       0
  1130 ;;Total ram usage:       22 bytes
  1131 ;; Hardware stack levels used:    1
  1132 ;; Hardware stack levels required when called:    1
  1133 ;; This function calls:
  1134 ;;		___lwdiv
  1135 ;;		___wmul
  1136 ;;		_isdigit
  1137 ;; This function is called by:
  1138 ;;		_hash_to_string
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text2
  1143  00713C                     __ptext2:
  1144                           	opt stack 0
  1145  00713C                     _sprintf:
  1146                           	opt stack 28
  1147                           
  1148                           ;doprnt.c: 494: va_list ap;
  1149                           ;doprnt.c: 499: signed char c;
  1150                           ;doprnt.c: 501: int width;
  1151                           ;doprnt.c: 506: signed char prec;
  1152                           ;doprnt.c: 508: unsigned char flag;
  1153                           ;doprnt.c: 510: int ccnt = 0;
  1154                           
  1155                           ;incstack = 0
  1156  00713C  0E00               	movlw	0
  1157  00713E  6E17               	movwf	sprintf@ccnt+1,c
  1158  007140  0E00               	movlw	0
  1159  007142  6E16               	movwf	sprintf@ccnt,c
  1160                           
  1161                           ;doprnt.c: 523: union {
  1162                           ;doprnt.c: 524: unsigned long vd;
  1163                           ;doprnt.c: 525: double integ;
  1164                           ;doprnt.c: 526: } tmpval;
  1165                           ;doprnt.c: 528: unsigned int val;
  1166                           ;doprnt.c: 529: unsigned len;
  1167                           ;doprnt.c: 530: const char * cp;
  1168                           ;doprnt.c: 533: *ap = __va_start();
  1169  007144  0E0C               	movlw	low (?_sprintf+4)
  1170  007146  6E12               	movwf	sprintf@ap,c
  1171  007148  0E00               	movlw	high (?_sprintf+4)
  1172  00714A  6E13               	movwf	sprintf@ap+1,c
  1173                           
  1174                           ;doprnt.c: 536: while(c = *f++) {
  1175  00714C  D104               	goto	u1400
  1176  00714E                     
  1177                           ;doprnt.c: 538: if(c != '%')
  1178  00714E  0E25               	movlw	37
  1179  007150  181D               	xorwf	sprintf@c,w,c
  1180  007152  B4D8               	btfsc	status,2,c
  1181  007154  D00B               	goto	l111
  1182                           
  1183                           ;doprnt.c: 540: {
  1184                           ;doprnt.c: 541: ((*sp++ = (c)),(++ccnt));
  1185  007156  C008  FFD9         	movff	sprintf@sp,fsr2l
  1186  00715A  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1187  00715E  C01D  FFDF         	movff	sprintf@c,indf2
  1188  007162  4A08               	infsnz	sprintf@sp,f,c
  1189  007164  2A09               	incf	sprintf@sp+1,f,c
  1190  007166  4A16               	infsnz	sprintf@ccnt,f,c
  1191  007168  2A17               	incf	sprintf@ccnt+1,f,c
  1192                           
  1193                           ;doprnt.c: 542: continue;
  1194  00716A  D0F5               	goto	u1400
  1195  00716C                     l111:
  1196                           
  1197                           ;doprnt.c: 543: }
  1198                           ;doprnt.c: 546: width = 0;
  1199  00716C  0E00               	movlw	0
  1200  00716E  6E1C               	movwf	sprintf@width+1,c
  1201  007170  0E00               	movlw	0
  1202  007172  6E1B               	movwf	sprintf@width,c
  1203                           
  1204                           ;doprnt.c: 548: flag = 0;
  1205  007174  0E00               	movlw	0
  1206  007176  6E15               	movwf	sprintf@flag,c
  1207                           
  1208                           ;doprnt.c: 551: switch(*f) {
  1209                           
  1210                           ;doprnt.c: 550: for(;;) {
  1211  007178  D003               	goto	l113
  1212  00717A                     
  1213                           ;doprnt.c: 580: flag |= 0x04;
  1214  00717A  8415               	bsf	sprintf@flag,2,c
  1215                           
  1216                           ;doprnt.c: 581: f++;
  1217  00717C  4A0A               	infsnz	sprintf@f,f,c
  1218  00717E  2A0B               	incf	sprintf@f+1,f,c
  1219  007180                     l113:
  1220  007180  C00A  FFF6         	movff	sprintf@f,tblptrl
  1221  007184  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1222  007188                     	if	0	;tblptru may be non-zero
  1223  007188                     	endif
  1224  007188                     	if	0	;tblptru may be non-zero
  1225  007188                     	endif
  1226  007188  0008               	tblrd		*
  1227  00718A  50F5               	movf	tablat,w,c
  1228                           
  1229                           ; Switch size 1, requested type "space"
  1230                           ; Number of cases is 1, Range of values is 48 to 48
  1231                           ; switch strategies available:
  1232                           ; Name         Instructions Cycles
  1233                           ; simple_byte            4     3 (average)
  1234                           ;	Chosen strategy is simple_byte
  1235  00718C  0A30               	xorlw	48	; case 48
  1236  00718E  B4D8               	btfsc	status,2,c
  1237  007190  D7F4               	goto	l114
  1238                           
  1239                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1240                           
  1241                           ;doprnt.c: 586: }
  1242                           
  1243                           ;doprnt.c: 585: break;
  1244  007192  C00A  FFF6         	movff	sprintf@f,tblptrl
  1245  007196  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1246  00719A                     	if	0	;tblptru may be non-zero
  1247  00719A                     	endif
  1248  00719A                     	if	0	;tblptru may be non-zero
  1249  00719A                     	endif
  1250  00719A  0008               	tblrd		*
  1251  00719C  50F5               	movf	tablat,w,c
  1252  00719E  EC39  F033         	call	_isdigit
  1253  0071A2  A0D8               	btfss	status,0,c
  1254  0071A4  D032               	goto	l121
  1255                           
  1256                           ;doprnt.c: 598: width = 0;
  1257  0071A6  0E00               	movlw	0
  1258  0071A8  6E1C               	movwf	sprintf@width+1,c
  1259  0071AA  0E00               	movlw	0
  1260  0071AC  6E1B               	movwf	sprintf@width,c
  1261  0071AE                     
  1262                           ;doprnt.c: 600: width *= 10;
  1263  0071AE  C01B  F001         	movff	sprintf@width,___wmul@multiplier
  1264  0071B2  C01C  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1265  0071B6  0E00               	movlw	0
  1266  0071B8  6E04               	movwf	___wmul@multiplicand+1,c
  1267  0071BA  0E0A               	movlw	10
  1268  0071BC  6E03               	movwf	___wmul@multiplicand,c
  1269  0071BE  EC58  F033         	call	___wmul	;wreg free
  1270  0071C2  C001  F01B         	movff	?___wmul,sprintf@width
  1271  0071C6  C002  F01C         	movff	?___wmul+1,sprintf@width+1
  1272                           
  1273                           ;doprnt.c: 601: width += *f++ - '0';
  1274  0071CA  0ED0               	movlw	208
  1275  0071CC  6E0E               	movwf	??_sprintf& (0+255),c
  1276  0071CE  0EFF               	movlw	255
  1277  0071D0  6E0F               	movwf	(??_sprintf+1)& (0+255),c
  1278  0071D2  C00A  FFF6         	movff	sprintf@f,tblptrl
  1279  0071D6  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1280  0071DA                     	if	0	;tblptru may be non-zero
  1281  0071DA                     	endif
  1282  0071DA                     	if	0	;tblptru may be non-zero
  1283  0071DA                     	endif
  1284  0071DA  0008               	tblrd		*
  1285  0071DC  50F5               	movf	tablat,w,c
  1286  0071DE  6E10               	movwf	(??_sprintf+2)& (0+255),c
  1287  0071E0  6A11               	clrf	(??_sprintf+3)& (0+255),c
  1288  0071E2  500E               	movf	??_sprintf,w,c
  1289  0071E4  2610               	addwf	??_sprintf+2,f,c
  1290  0071E6  500F               	movf	??_sprintf+1,w,c
  1291  0071E8  2211               	addwfc	??_sprintf+3,f,c
  1292  0071EA  5010               	movf	??_sprintf+2,w,c
  1293  0071EC  261B               	addwf	sprintf@width,f,c
  1294  0071EE  5011               	movf	??_sprintf+3,w,c
  1295  0071F0  221C               	addwfc	sprintf@width+1,f,c
  1296  0071F2  4A0A               	infsnz	sprintf@f,f,c
  1297  0071F4  2A0B               	incf	sprintf@f+1,f,c
  1298                           
  1299                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1300  0071F6  C00A  FFF6         	movff	sprintf@f,tblptrl
  1301  0071FA  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1302  0071FE                     	if	0	;tblptru may be non-zero
  1303  0071FE                     	endif
  1304  0071FE                     	if	0	;tblptru may be non-zero
  1305  0071FE                     	endif
  1306  0071FE  0008               	tblrd		*
  1307  007200  50F5               	movf	tablat,w,c
  1308  007202  EC39  F033         	call	_isdigit
  1309  007206  B0D8               	btfsc	status,0,c
  1310  007208  D7D2               	goto	l119
  1311  00720A                     l121:
  1312  00720A  C00A  FFF6         	movff	sprintf@f,tblptrl
  1313  00720E  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1314  007212  4A0A               	infsnz	sprintf@f,f,c
  1315  007214  2A0B               	incf	sprintf@f+1,f,c
  1316  007216                     	if	0	;tblptru may be non-zero
  1317  007216                     	endif
  1318  007216                     	if	0	;tblptru may be non-zero
  1319  007216                     	endif
  1320  007216  0008               	tblrd		*
  1321  007218  CFF5 F01D          	movff	tablat,sprintf@c
  1322  00721C  501D               	movf	sprintf@c,w,c
  1323                           
  1324                           ; Switch size 1, requested type "space"
  1325                           ; Number of cases is 2, Range of values is 0 to 120
  1326                           ; switch strategies available:
  1327                           ; Name         Instructions Cycles
  1328                           ; simple_byte            7     4 (average)
  1329                           ;	Chosen strategy is simple_byte
  1330  00721E  0A00               	xorlw	0	; case 0
  1331  007220  B4D8               	btfsc	status,2,c
  1332  007222  D0A5               	goto	u1410
  1333  007224  0A78               	xorlw	120	; case 120
  1334  007226  A4D8               	btfss	status,2,c
  1335  007228  D096               	goto	u1400
  1336                           
  1337                           ;doprnt.c: 1273: {
  1338                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1339  00722A  C012  FFD9         	movff	sprintf@ap,fsr2l
  1340  00722E  C013  FFDA         	movff	sprintf@ap+1,fsr2h
  1341  007232  CFDE F018          	movff	postinc2,sprintf@val
  1342  007236  CFDD F019          	movff	postdec2,sprintf@val+1
  1343  00723A  0E02               	movlw	2
  1344  00723C  2612               	addwf	sprintf@ap,f,c
  1345  00723E  0E00               	movlw	0
  1346  007240  2213               	addwfc	sprintf@ap+1,f,c
  1347                           
  1348                           ;doprnt.c: 1287: }
  1349                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1350  007242  0E01               	movlw	1
  1351  007244  6E1D               	movwf	sprintf@c,c
  1352  007246                     l1665:
  1353  007246  0E04               	movlw	4
  1354  007248  181D               	xorwf	sprintf@c,w,c
  1355  00724A  B4D8               	btfsc	status,2,c
  1356  00724C  D012               	goto	u1330
  1357                           
  1358                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1359  00724E  501D               	movf	sprintf@c,w,c
  1360  007250  0D02               	mullw	2
  1361  007252  0EB7               	movlw	low _hexpowers
  1362  007254  24F3               	addwf	prodl,w,c
  1363  007256  6EF6               	movwf	tblptrl,c
  1364  007258  0E7F               	movlw	high _hexpowers
  1365  00725A  20F4               	addwfc	prodh,w,c
  1366  00725C  6EF7               	movwf	tblptrh,c
  1367  00725E                     	if	0	;There are less than 3 active tblptr bytes
  1368  00725E                     	endif
  1369  00725E  0009               	tblrd		*+
  1370  007260  50F5               	movf	tablat,w,c
  1371  007262  5C18               	subwf	sprintf@val,w,c
  1372  007264  0009               	tblrd		*+
  1373  007266  50F5               	movf	tablat,w,c
  1374  007268  5819               	subwfb	sprintf@val+1,w,c
  1375  00726A  A0D8               	btfss	status,0,c
  1376  00726C  D002               	goto	u1330
  1377                           
  1378                           ;doprnt.c: 1318: break;
  1379  00726E  2A1D               	incf	sprintf@c,f,c
  1380  007270  D7EA               	goto	l1665
  1381  007272                     u1330:
  1382                           
  1383                           ;doprnt.c: 1381: if(width > c)
  1384  007272  0E80               	movlw	128
  1385  007274  BE1D               	btfsc	sprintf@c,7,c
  1386  007276  0E7F               	movlw	127
  1387  007278  6E0E               	movwf	??_sprintf& (0+255),c
  1388  00727A  501B               	movf	sprintf@width,w,c
  1389  00727C  5C1D               	subwf	sprintf@c,w,c
  1390  00727E  501C               	movf	sprintf@width+1,w,c
  1391  007280  0A80               	xorlw	128
  1392  007282  580E               	subwfb	??_sprintf& (0+255),w,c
  1393  007284  B0D8               	btfsc	status,0,c
  1394  007286  D007               	goto	l130
  1395                           
  1396                           ;doprnt.c: 1382: width -= c;
  1397  007288  501D               	movf	sprintf@c,w,c
  1398  00728A  5E1B               	subwf	sprintf@width,f,c
  1399  00728C  0E00               	movlw	0
  1400  00728E  BE1D               	btfsc	sprintf@c,7,c
  1401  007290  0EFF               	movlw	255
  1402  007292  5A1C               	subwfb	sprintf@width+1,f,c
  1403  007294  D004               	goto	l131
  1404  007296                     l130:
  1405                           
  1406                           ;doprnt.c: 1383: else
  1407                           ;doprnt.c: 1384: width = 0;
  1408  007296  0E00               	movlw	0
  1409  007298  6E1C               	movwf	sprintf@width+1,c
  1410  00729A  0E00               	movlw	0
  1411  00729C  6E1B               	movwf	sprintf@width,c
  1412  00729E                     l131:
  1413                           
  1414                           ;doprnt.c: 1387: if(flag & 0x04) {
  1415  00729E  A415               	btfss	sprintf@flag,2,c
  1416  0072A0  D012               	goto	l132
  1417  0072A2                     
  1418                           ;doprnt.c: 1415: if(width)
  1419  0072A2  501B               	movf	sprintf@width,w,c
  1420  0072A4  101C               	iorwf	sprintf@width+1,w,c
  1421  0072A6  B4D8               	btfsc	status,2,c
  1422  0072A8  D023               	goto	u1390
  1423                           
  1424                           ;doprnt.c: 1417: ((*sp++ = ('0')),(++ccnt));
  1425                           
  1426                           ;doprnt.c: 1416: do
  1427  0072AA  C008  FFD9         	movff	sprintf@sp,fsr2l
  1428  0072AE  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1429  0072B2  0E30               	movlw	48
  1430  0072B4  6EDF               	movwf	indf2,c
  1431  0072B6  4A08               	infsnz	sprintf@sp,f,c
  1432  0072B8  2A09               	incf	sprintf@sp+1,f,c
  1433  0072BA  4A16               	infsnz	sprintf@ccnt,f,c
  1434  0072BC  2A17               	incf	sprintf@ccnt+1,f,c
  1435                           
  1436                           ;doprnt.c: 1418: while(--width);
  1437  0072BE  061B               	decf	sprintf@width,f,c
  1438  0072C0  A0D8               	btfss	status,0,c
  1439  0072C2  061C               	decf	sprintf@width+1,f,c
  1440  0072C4  D7EE               	goto	L5
  1441  0072C6                     l132:
  1442                           
  1443                           ;doprnt.c: 1422: {
  1444                           ;doprnt.c: 1424: if(width
  1445                           ;doprnt.c: 1428: )
  1446  0072C6  501B               	movf	sprintf@width,w,c
  1447  0072C8  101C               	iorwf	sprintf@width+1,w,c
  1448  0072CA  B4D8               	btfsc	status,2,c
  1449  0072CC  D011               	goto	u1390
  1450  0072CE                     u1380:
  1451                           
  1452                           ;doprnt.c: 1430: ((*sp++ = (' ')),(++ccnt));
  1453                           
  1454                           ;doprnt.c: 1429: do
  1455  0072CE  C008  FFD9         	movff	sprintf@sp,fsr2l
  1456  0072D2  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1457  0072D6  0E20               	movlw	32
  1458  0072D8  6EDF               	movwf	indf2,c
  1459  0072DA  4A08               	infsnz	sprintf@sp,f,c
  1460  0072DC  2A09               	incf	sprintf@sp+1,f,c
  1461  0072DE  4A16               	infsnz	sprintf@ccnt,f,c
  1462  0072E0  2A17               	incf	sprintf@ccnt+1,f,c
  1463                           
  1464                           ;doprnt.c: 1431: while(--width);
  1465  0072E2  061B               	decf	sprintf@width,f,c
  1466  0072E4  A0D8               	btfss	status,0,c
  1467  0072E6  061C               	decf	sprintf@width+1,f,c
  1468  0072E8  501B               	movf	sprintf@width,w,c
  1469  0072EA  101C               	iorwf	sprintf@width+1,w,c
  1470  0072EC  A4D8               	btfss	status,2,c
  1471  0072EE  D7EF               	goto	u1380
  1472  0072F0                     u1390:
  1473                           
  1474                           ;doprnt.c: 1469: }
  1475                           ;doprnt.c: 1472: prec = c;
  1476  0072F0  C01D  F01A         	movff	sprintf@c,sprintf@prec
  1477                           
  1478                           ;doprnt.c: 1474: while(prec--) {
  1479  0072F4  D02C               	goto	l140
  1480  0072F6                     
  1481                           ;doprnt.c: 1478: {
  1482                           ;doprnt.c: 1499: {
  1483                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1484  0072F6  C018  F001         	movff	sprintf@val,___lwdiv@dividend
  1485  0072FA  C019  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  1486  0072FE  501A               	movf	sprintf@prec,w,c
  1487  007300  0D02               	mullw	2
  1488  007302  0EB7               	movlw	low _hexpowers
  1489  007304  24F3               	addwf	prodl,w,c
  1490  007306  6EF6               	movwf	tblptrl,c
  1491  007308  0E7F               	movlw	high _hexpowers
  1492  00730A  20F4               	addwfc	prodh,w,c
  1493  00730C  6EF7               	movwf	tblptrh,c
  1494  00730E                     	if	0	;There are less than 3 active tblptr bytes
  1495  00730E                     	endif
  1496  00730E  0009               	tblrd		*+
  1497  007310  CFF5 F003          	movff	tablat,___lwdiv@divisor
  1498  007314  000A               	tblrd		*-
  1499  007316  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  1500  00731A  EC0F  F034         	call	___lwdiv	;wreg free
  1501  00731E  5001               	movf	?___lwdiv,w,c
  1502  007320  0B0F               	andlw	15
  1503  007322  6E14               	movwf	sprintf@idx,c
  1504                           
  1505                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1506  007324  5014               	movf	sprintf@idx,w,c
  1507  007326  0D01               	mullw	1
  1508  007328  0ECF               	movlw	low STR_4
  1509  00732A  24F3               	addwf	prodl,w,c
  1510  00732C  6EF6               	movwf	tblptrl,c
  1511  00732E  0E7F               	movlw	high STR_4
  1512  007330  20F4               	addwfc	prodh,w,c
  1513  007332  6EF7               	movwf	tblptrh,c
  1514  007334                     	if	0	;There are less than 3 active tblptr bytes
  1515  007334                     	endif
  1516  007334  0008               	tblrd		*
  1517  007336  CFF5 F01D          	movff	tablat,sprintf@c
  1518                           
  1519                           ;doprnt.c: 1508: }
  1520                           ;doprnt.c: 1523: }
  1521                           ;doprnt.c: 1524: ((*sp++ = (c)),(++ccnt));
  1522  00733A  C008  FFD9         	movff	sprintf@sp,fsr2l
  1523  00733E  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1524  007342  C01D  FFDF         	movff	sprintf@c,indf2
  1525  007346  4A08               	infsnz	sprintf@sp,f,c
  1526  007348  2A09               	incf	sprintf@sp+1,f,c
  1527  00734A  4A16               	infsnz	sprintf@ccnt,f,c
  1528  00734C  2A17               	incf	sprintf@ccnt+1,f,c
  1529  00734E                     l140:
  1530  00734E  061A               	decf	sprintf@prec,f,c
  1531  007350  281A               	incf	sprintf@prec,w,c
  1532  007352  A4D8               	btfss	status,2,c
  1533  007354  D7D0               	goto	l141
  1534  007356                     u1400:
  1535  007356  C00A  FFF6         	movff	sprintf@f,tblptrl
  1536  00735A  C00B  FFF7         	movff	sprintf@f+1,tblptrh
  1537  00735E  4A0A               	infsnz	sprintf@f,f,c
  1538  007360  2A0B               	incf	sprintf@f+1,f,c
  1539  007362                     	if	0	;tblptru may be non-zero
  1540  007362                     	endif
  1541  007362                     	if	0	;tblptru may be non-zero
  1542  007362                     	endif
  1543  007362  0008               	tblrd		*
  1544  007364  CFF5 F01D          	movff	tablat,sprintf@c
  1545  007368  501D               	movf	sprintf@c,w,c
  1546  00736A  A4D8               	btfss	status,2,c
  1547  00736C  D6F0               	goto	l110
  1548  00736E                     u1410:
  1549                           
  1550                           ;doprnt.c: 1538: *sp = 0;
  1551                           
  1552                           ;doprnt.c: 1525: }
  1553                           ;doprnt.c: 1533: }
  1554                           ;doprnt.c: 1535: alldone:
  1555  00736E  C008  FFD9         	movff	sprintf@sp,fsr2l
  1556  007372  C009  FFDA         	movff	sprintf@sp+1,fsr2h
  1557  007376  0E00               	movlw	0
  1558  007378  6EDF               	movwf	indf2,c
  1559                           
  1560                           ;doprnt.c: 1540: return ccnt;
  1561  00737A  C016  F008         	movff	sprintf@ccnt,?_sprintf
  1562  00737E  C017  F009         	movff	sprintf@ccnt+1,?_sprintf+1
  1563  007382  0012               	return	
  1564  007384                     __end_of_sprintf:
  1565                           	opt stack 0
  1566                           tblptru	equ	0xFF8
  1567                           tblptrh	equ	0xFF7
  1568                           tblptrl	equ	0xFF6
  1569                           tablat	equ	0xFF5
  1570                           prodh	equ	0xFF4
  1571                           prodl	equ	0xFF3
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           postdec1	equ	0xFE5
  1575                           plusw1	equ	0xFE3
  1576                           fsr1l	equ	0xFE1
  1577                           indf2	equ	0xFDF
  1578                           postinc2	equ	0xFDE
  1579                           postdec2	equ	0xFDD
  1580                           plusw2	equ	0xFDB
  1581                           fsr2h	equ	0xFDA
  1582                           fsr2l	equ	0xFD9
  1583                           status	equ	0xFD8
  1584                           
  1585 ;; *************** function _isdigit *****************
  1586 ;; Defined at:
  1587 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\isdigit.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;  c               1    wreg     unsigned char 
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  c               1    2[COMRAM] unsigned char 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;		None               void
  1594 ;; Registers used:
  1595 ;;		wreg, status,2, status,0
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1601 ;;      Params:         0       0       0       0       0       0       0       0       0
  1602 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1603 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1604 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1605 ;;Total ram usage:        3 bytes
  1606 ;; Hardware stack levels used:    1
  1607 ;; This function calls:
  1608 ;;		Nothing
  1609 ;; This function is called by:
  1610 ;;		_sprintf
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text3
  1615  006672                     __ptext3:
  1616                           	opt stack 0
  1617  006672                     _isdigit:
  1618                           	opt stack 28
  1619                           
  1620                           ;incstack = 0
  1621                           ;isdigit@c stored from wreg
  1622  006672  6E03               	movwf	isdigit@c,c
  1623  006674  0E00               	movlw	0
  1624  006676  6E02               	movwf	_isdigit$391,c
  1625  006678  0E3A               	movlw	58
  1626  00667A  6003               	cpfslt	isdigit@c,c
  1627  00667C  D005               	goto	l474
  1628  00667E  0E2F               	movlw	47
  1629  006680  6403               	cpfsgt	isdigit@c,c
  1630  006682  D002               	goto	l474
  1631  006684  0E01               	movlw	1
  1632  006686  6E02               	movwf	_isdigit$391,c
  1633  006688                     l474:
  1634  006688  C002  F001         	movff	_isdigit$391,??_isdigit
  1635  00668C  3001               	rrcf	??_isdigit,w,c
  1636  00668E  0012               	return	
  1637  006690                     __end_of_isdigit:
  1638                           	opt stack 0
  1639                           tblptru	equ	0xFF8
  1640                           tblptrh	equ	0xFF7
  1641                           tblptrl	equ	0xFF6
  1642                           tablat	equ	0xFF5
  1643                           prodh	equ	0xFF4
  1644                           prodl	equ	0xFF3
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           postdec1	equ	0xFE5
  1648                           plusw1	equ	0xFE3
  1649                           fsr1l	equ	0xFE1
  1650                           indf2	equ	0xFDF
  1651                           postinc2	equ	0xFDE
  1652                           postdec2	equ	0xFDD
  1653                           plusw2	equ	0xFDB
  1654                           fsr2h	equ	0xFDA
  1655                           fsr2l	equ	0xFD9
  1656                           status	equ	0xFD8
  1657                           
  1658 ;; *************** function ___wmul *****************
  1659 ;; Defined at:
  1660 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\Umul16.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  multiplier      2    0[COMRAM] unsigned int 
  1663 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;  product         2    4[COMRAM] unsigned int 
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  2    0[COMRAM] unsigned int 
  1668 ;; Registers used:
  1669 ;;		wreg, status,2, status,0, prodl, prodh
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1675 ;;      Params:         4       0       0       0       0       0       0       0       0
  1676 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1677 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1678 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1679 ;;Total ram usage:        6 bytes
  1680 ;; Hardware stack levels used:    1
  1681 ;; This function calls:
  1682 ;;		Nothing
  1683 ;; This function is called by:
  1684 ;;		_sprintf
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           	psect	text4
  1689  0066B0                     __ptext4:
  1690                           	opt stack 0
  1691  0066B0                     ___wmul:
  1692                           	opt stack 28
  1693                           
  1694                           ;incstack = 0
  1695  0066B0  5001               	movf	___wmul@multiplier,w,c
  1696  0066B2  0203               	mulwf	___wmul@multiplicand,c
  1697  0066B4  CFF3 F005          	movff	prodl,___wmul@product
  1698  0066B8  CFF4 F006          	movff	prodh,___wmul@product+1
  1699  0066BC  5001               	movf	___wmul@multiplier,w,c
  1700  0066BE  0204               	mulwf	___wmul@multiplicand+1,c
  1701  0066C0  50F3               	movf	prodl,w,c
  1702  0066C2  2606               	addwf	___wmul@product+1,f,c
  1703  0066C4  5002               	movf	___wmul@multiplier+1,w,c
  1704  0066C6  0203               	mulwf	___wmul@multiplicand,c
  1705  0066C8  50F3               	movf	prodl,w,c
  1706  0066CA  2606               	addwf	___wmul@product+1,f,c
  1707  0066CC  C005  F001         	movff	___wmul@product,?___wmul
  1708  0066D0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1709  0066D4  0012               	return	
  1710  0066D6                     __end_of___wmul:
  1711                           	opt stack 0
  1712                           tblptru	equ	0xFF8
  1713                           tblptrh	equ	0xFF7
  1714                           tblptrl	equ	0xFF6
  1715                           tablat	equ	0xFF5
  1716                           prodh	equ	0xFF4
  1717                           prodl	equ	0xFF3
  1718                           postinc0	equ	0xFEE
  1719                           wreg	equ	0xFE8
  1720                           postdec1	equ	0xFE5
  1721                           plusw1	equ	0xFE3
  1722                           fsr1l	equ	0xFE1
  1723                           indf2	equ	0xFDF
  1724                           postinc2	equ	0xFDE
  1725                           postdec2	equ	0xFDD
  1726                           plusw2	equ	0xFDB
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731 ;; *************** function ___lwdiv *****************
  1732 ;; Defined at:
  1733 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  dividend        2    0[COMRAM] unsigned int 
  1736 ;;  divisor         2    2[COMRAM] unsigned int 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;  quotient        2    4[COMRAM] unsigned int 
  1739 ;;  counter         1    6[COMRAM] unsigned char 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  2    0[COMRAM] unsigned int 
  1742 ;; Registers used:
  1743 ;;		wreg, status,2, status,0
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1749 ;;      Params:         4       0       0       0       0       0       0       0       0
  1750 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1751 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1752 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1753 ;;Total ram usage:        7 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; This function calls:
  1756 ;;		Nothing
  1757 ;; This function is called by:
  1758 ;;		_sprintf
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text5
  1763  00681E                     __ptext5:
  1764                           	opt stack 0
  1765  00681E                     ___lwdiv:
  1766                           	opt stack 28
  1767                           
  1768                           ;incstack = 0
  1769  00681E  0E00               	movlw	0
  1770  006820  6E06               	movwf	___lwdiv@quotient+1,c
  1771  006822  0E00               	movlw	0
  1772  006824  6E05               	movwf	___lwdiv@quotient,c
  1773  006826  5003               	movf	___lwdiv@divisor,w,c
  1774  006828  1004               	iorwf	___lwdiv@divisor+1,w,c
  1775  00682A  B4D8               	btfsc	status,2,c
  1776  00682C  D01C               	goto	l558
  1777  00682E  0E01               	movlw	1
  1778  006830  6E07               	movwf	___lwdiv@counter,c
  1779  006832  D004               	goto	l553
  1780  006834  90D8               	bcf	status,0,c
  1781  006836  3603               	rlcf	___lwdiv@divisor,f,c
  1782  006838  3604               	rlcf	___lwdiv@divisor+1,f,c
  1783  00683A  2A07               	incf	___lwdiv@counter,f,c
  1784  00683C                     l553:
  1785  00683C  AE04               	btfss	___lwdiv@divisor+1,7,c
  1786  00683E  D7FA               	goto	l554
  1787  006840                     u1160:
  1788  006840  90D8               	bcf	status,0,c
  1789  006842  3605               	rlcf	___lwdiv@quotient,f,c
  1790  006844  3606               	rlcf	___lwdiv@quotient+1,f,c
  1791  006846  5003               	movf	___lwdiv@divisor,w,c
  1792  006848  5C01               	subwf	___lwdiv@dividend,w,c
  1793  00684A  5004               	movf	___lwdiv@divisor+1,w,c
  1794  00684C  5802               	subwfb	___lwdiv@dividend+1,w,c
  1795  00684E  A0D8               	btfss	status,0,c
  1796  006850  D005               	goto	l557
  1797  006852  5003               	movf	___lwdiv@divisor,w,c
  1798  006854  5E01               	subwf	___lwdiv@dividend,f,c
  1799  006856  5004               	movf	___lwdiv@divisor+1,w,c
  1800  006858  5A02               	subwfb	___lwdiv@dividend+1,f,c
  1801  00685A  8005               	bsf	___lwdiv@quotient,0,c
  1802  00685C                     l557:
  1803  00685C  90D8               	bcf	status,0,c
  1804  00685E  3204               	rrcf	___lwdiv@divisor+1,f,c
  1805  006860  3203               	rrcf	___lwdiv@divisor,f,c
  1806  006862  2E07               	decfsz	___lwdiv@counter,f,c
  1807  006864  D7ED               	goto	u1160
  1808  006866                     l558:
  1809  006866  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1810  00686A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1811  00686E  0012               	return		;funcret
  1812  006870                     __end_of___lwdiv:
  1813                           	opt stack 0
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           prodh	equ	0xFF4
  1819                           prodl	equ	0xFF3
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           postdec1	equ	0xFE5
  1823                           plusw1	equ	0xFE3
  1824                           fsr1l	equ	0xFE1
  1825                           indf2	equ	0xFDF
  1826                           postinc2	equ	0xFDE
  1827                           postdec2	equ	0xFDD
  1828                           plusw2	equ	0xFDB
  1829                           fsr2h	equ	0xFDA
  1830                           fsr2l	equ	0xFD9
  1831                           status	equ	0xFD8
  1832                           
  1833 ;; *************** function _calc_sha_256 *****************
  1834 ;; Defined at:
  1835 ;;		line 205 in file "main.c"
  1836 ;; Parameters:    Size  Location     Type
  1837 ;;  hash            2   25[COMRAM] PTR unsigned char 
  1838 ;;		 -> main@hash(32), 
  1839 ;;  input           2   27[COMRAM] PTR const unsigned char 
  1840 ;;		 -> string(16), 
  1841 ;;  len             2   29[COMRAM] unsigned int 
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;  temp1           4  124[BANK0 ] const unsigned long 
  1844 ;;  temp2           4  120[BANK0 ] const unsigned long 
  1845 ;;  maj             4  116[BANK0 ] const unsigned long 
  1846 ;;  s0              4  112[BANK0 ] const unsigned long 
  1847 ;;  ch              4  108[BANK0 ] const unsigned long 
  1848 ;;  s1              4  104[BANK0 ] const unsigned long 
  1849 ;;  s1              4  100[BANK0 ] const unsigned long 
  1850 ;;  s0              4   96[BANK0 ] const unsigned long 
  1851 ;;  w             256    0[BANK1 ] unsigned long [64]
  1852 ;;  ah             32    0[BANK2 ] unsigned long [8]
  1853 ;;  p               2  128[BANK0 ] PTR const unsigned char 
  1854 ;;		 -> calc_sha_256@chunk(64), 
  1855 ;;  chunk          64    0[BANK0 ] unsigned char [64]
  1856 ;;  h              32   64[BANK0 ] unsigned long [8]
  1857 ;;  state          10  130[BANK0 ] struct buffer_state
  1858 ;;  i               2  140[BANK0 ] int 
  1859 ;;  j               2   61[COMRAM] int 
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1869 ;;      Params:         6       0       0       0       0       0       0       0       0
  1870 ;;      Locals:         2     142     256      32       0       0       0       0       0
  1871 ;;      Temps:         30       0       0       0       0       0       0       0       0
  1872 ;;      Totals:        38     142     256      32       0       0       0       0       0
  1873 ;;Total ram usage:      468 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    2
  1876 ;; This function calls:
  1877 ;;		_calc_chunk
  1878 ;;		_init_buf_state
  1879 ;;		_memset
  1880 ;;		_rotate_right
  1881 ;; This function is called by:
  1882 ;;		_main
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text6
  1887  007384                     __ptext6:
  1888                           	opt stack 0
  1889  007384                     _calc_sha_256:
  1890                           	opt stack 28
  1891                           
  1892                           ;main.c: 209: uint32_t h[] = { 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527
      +                          f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 };
  1893                           
  1894                           ;incstack = 0
  1895  007384  EE20  F040         	lfsr	2,calc_sha_256@F4130
  1896  007388  EE10  F0A0         	lfsr	1,calc_sha_256@h
  1897  00738C  0E1F               	movlw	31
  1898  00738E                     u1811:
  1899  00738E  CFDB FFE3          	movff	plusw2,plusw1
  1900  007392  06E8               	decf	wreg,f,c
  1901  007394  E2FC               	bc	u1811
  1902                           
  1903                           ;main.c: 210: int i;
  1904                           ;main.c: 211: int j;
  1905                           ;main.c: 214: uint8_t chunk[64];
  1906                           ;main.c: 216: struct buffer_state state;
  1907                           ;main.c: 218: init_buf_state(&state, input, len);
  1908  007396  0EE2               	movlw	low calc_sha_256@state
  1909  007398  6E01               	movwf	init_buf_state@state,c
  1910  00739A  0E00               	movlw	high calc_sha_256@state
  1911  00739C  6E02               	movwf	init_buf_state@state+1,c
  1912  00739E  C01C  F003         	movff	calc_sha_256@input,init_buf_state@input
  1913  0073A2  C01D  F004         	movff	calc_sha_256@input+1,init_buf_state@input+1
  1914  0073A6  C01E  F005         	movff	calc_sha_256@len,init_buf_state@len
  1915  0073AA  C01F  F006         	movff	calc_sha_256@len+1,init_buf_state@len+1
  1916  0073AE  EC38  F034         	call	_init_buf_state	;wreg free
  1917                           
  1918                           ;main.c: 220: while (calc_chunk(chunk, &state)) {
  1919  0073B2  EF98  F03E         	goto	u1930
  1920  0073B6                     
  1921                           ;main.c: 221: uint32_t ah[8];
  1922                           ;main.c: 225: uint32_t w[64];
  1923                           ;main.c: 226: const uint8_t *p = chunk;
  1924  0073B6  0E60               	movlw	low calc_sha_256@chunk
  1925  0073B8  0100               	movlb	0	; () banked
  1926  0073BA  6FE0               	movwf	calc_sha_256@p& (0+255),b
  1927  0073BC  0E00               	movlw	high calc_sha_256@chunk
  1928  0073BE  6FE1               	movwf	(calc_sha_256@p+1)& (0+255),b
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;main.c: 228: memset(w, 0x00, sizeof w);
  1932  0073C0  0E00               	movlw	low calc_sha_256@w
  1933  0073C2  6E01               	movwf	memset@p1,c
  1934  0073C4  0E01               	movlw	high calc_sha_256@w
  1935  0073C6  6E02               	movwf	memset@p1+1,c
  1936  0073C8  0E00               	movlw	0
  1937  0073CA  6E04               	movwf	memset@c+1,c
  1938  0073CC  0E00               	movlw	0
  1939  0073CE  6E03               	movwf	memset@c,c
  1940  0073D0  0E01               	movlw	1
  1941  0073D2  6E06               	movwf	memset@n+1,c
  1942  0073D4  0E00               	movlw	0
  1943  0073D6  6E05               	movwf	memset@n,c
  1944  0073D8  EC6B  F033         	call	_memset	;wreg free
  1945                           
  1946                           ;main.c: 229: for (i = 0; i < 16; i++) {
  1947  0073DC  0E00               	movlw	0
  1948  0073DE  0100               	movlb	0	; () banked
  1949  0073E0  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  1950  0073E2  0E00               	movlw	0
  1951  0073E4  6FEC               	movwf	calc_sha_256@i& (0+255),b
  1952                           
  1953                           ; BSR set to: 0
  1954  0073E6  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  1955  0073E8  D008               	goto	l70
  1956  0073EA  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  1957  0073EC  E105               	bnz	u1820
  1958  0073EE  0E10               	movlw	16
  1959  0073F0  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  1960  0073F2  B0D8               	btfsc	status,0,c
  1961  0073F4  D085               	goto	u1830
  1962  0073F6  D001               	goto	l70
  1963  0073F8                     u1820:
  1964                           
  1965                           ; BSR set to: 0
  1966  0073F8  D083               	goto	u1830
  1967  0073FA                     l70:
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;main.c: 230: w[i] = (uint32_t) p[0] << 24 | (uint32_t) p[1] << 16 |
  1971                           ;main.c: 231: (uint32_t) p[2] << 8 | (uint32_t) p[3];
  1972                           
  1973                           ; BSR set to: 0
  1974  0073FA  EE20 F002          	lfsr	2,2
  1975  0073FE  51E0               	movf	calc_sha_256@p& (0+255),w,b
  1976  007400  26D9               	addwf	fsr2l,f,c
  1977  007402  51E1               	movf	(calc_sha_256@p+1)& (0+255),w,b
  1978  007404  22DA               	addwfc	fsr2h,f,c
  1979  007406  50DF               	movf	indf2,w,c
  1980  007408  6E20               	movwf	??_calc_sha_256& (0+255),c
  1981  00740A  C020  F021         	movff	??_calc_sha_256,??_calc_sha_256+1
  1982  00740E  6A22               	clrf	(??_calc_sha_256+2)& (0+255),c
  1983  007410  6A23               	clrf	(??_calc_sha_256+3)& (0+255),c
  1984  007412  6A24               	clrf	(??_calc_sha_256+4)& (0+255),c
  1985  007414  C023  F024         	movff	??_calc_sha_256+3,??_calc_sha_256+4
  1986  007418  C022  F023         	movff	??_calc_sha_256+2,??_calc_sha_256+3
  1987  00741C  C021  F022         	movff	??_calc_sha_256+1,??_calc_sha_256+2
  1988  007420  6A21               	clrf	??_calc_sha_256+1,c
  1989  007422  EE20 F001          	lfsr	2,1
  1990  007426  51E0               	movf	calc_sha_256@p& (0+255),w,b
  1991  007428  26D9               	addwf	fsr2l,f,c
  1992  00742A  51E1               	movf	(calc_sha_256@p+1)& (0+255),w,b
  1993  00742C  22DA               	addwfc	fsr2h,f,c
  1994  00742E  50DF               	movf	indf2,w,c
  1995  007430  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  1996  007432  C025  F026         	movff	??_calc_sha_256+5,??_calc_sha_256+6
  1997  007436  6A27               	clrf	(??_calc_sha_256+7)& (0+255),c
  1998  007438  6A28               	clrf	(??_calc_sha_256+8)& (0+255),c
  1999  00743A  6A29               	clrf	(??_calc_sha_256+9)& (0+255),c
  2000  00743C  C027  F029         	movff	??_calc_sha_256+7,??_calc_sha_256+9
  2001  007440  C026  F028         	movff	??_calc_sha_256+6,??_calc_sha_256+8
  2002  007444  6A27               	clrf	??_calc_sha_256+7,c
  2003  007446  6A26               	clrf	??_calc_sha_256+6,c
  2004  007448  C0E0  FFD9         	movff	calc_sha_256@p,fsr2l
  2005  00744C  C0E1  FFDA         	movff	calc_sha_256@p+1,fsr2h
  2006  007450  50DF               	movf	indf2,w,c
  2007  007452  6E2A               	movwf	(??_calc_sha_256+10)& (0+255),c
  2008  007454  C02A  F02B         	movff	??_calc_sha_256+10,??_calc_sha_256+11
  2009  007458  6A2C               	clrf	(??_calc_sha_256+12)& (0+255),c
  2010  00745A  6A2D               	clrf	(??_calc_sha_256+13)& (0+255),c
  2011  00745C  6A2E               	clrf	(??_calc_sha_256+14)& (0+255),c
  2012  00745E  C02B  F02E         	movff	??_calc_sha_256+11,??_calc_sha_256+14
  2013  007462  6A2D               	clrf	??_calc_sha_256+13,c
  2014  007464  6A2C               	clrf	??_calc_sha_256+12,c
  2015  007466  6A2B               	clrf	??_calc_sha_256+11,c
  2016  007468  5026               	movf	??_calc_sha_256+6,w,c
  2017  00746A  102B               	iorwf	??_calc_sha_256+11,w,c
  2018  00746C  6E2F               	movwf	(??_calc_sha_256+15)& (0+255),c
  2019  00746E  5027               	movf	??_calc_sha_256+7,w,c
  2020  007470  102C               	iorwf	??_calc_sha_256+12,w,c
  2021  007472  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2022  007474  5028               	movf	??_calc_sha_256+8,w,c
  2023  007476  102D               	iorwf	??_calc_sha_256+13,w,c
  2024  007478  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2025  00747A  5029               	movf	??_calc_sha_256+9,w,c
  2026  00747C  102E               	iorwf	??_calc_sha_256+14,w,c
  2027  00747E  6E32               	movwf	(??_calc_sha_256+18)& (0+255),c
  2028  007480  5021               	movf	??_calc_sha_256+1,w,c
  2029  007482  102F               	iorwf	??_calc_sha_256+15,w,c
  2030  007484  6E33               	movwf	(??_calc_sha_256+19)& (0+255),c
  2031  007486  5022               	movf	??_calc_sha_256+2,w,c
  2032  007488  1030               	iorwf	??_calc_sha_256+16,w,c
  2033  00748A  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2034  00748C  5023               	movf	??_calc_sha_256+3,w,c
  2035  00748E  1031               	iorwf	??_calc_sha_256+17,w,c
  2036  007490  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2037  007492  5024               	movf	??_calc_sha_256+4,w,c
  2038  007494  1032               	iorwf	??_calc_sha_256+18,w,c
  2039  007496  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2040  007498  EE20 F003          	lfsr	2,3
  2041  00749C  51E0               	movf	calc_sha_256@p& (0+255),w,b
  2042  00749E  26D9               	addwf	fsr2l,f,c
  2043  0074A0  51E1               	movf	(calc_sha_256@p+1)& (0+255),w,b
  2044  0074A2  22DA               	addwfc	fsr2h,f,c
  2045  0074A4  50DF               	movf	indf2,w,c
  2046  0074A6  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2047  0074A8  5037               	movf	??_calc_sha_256+23,w,c
  2048  0074AA  1033               	iorwf	??_calc_sha_256+19,w,c
  2049  0074AC  6E38               	movwf	(??_calc_sha_256+24)& (0+255),c
  2050  0074AE  5034               	movf	??_calc_sha_256+20,w,c
  2051  0074B0  6E39               	movwf	(??_calc_sha_256+25)& (0+255),c
  2052  0074B2  5035               	movf	??_calc_sha_256+21,w,c
  2053  0074B4  6E3A               	movwf	(??_calc_sha_256+26)& (0+255),c
  2054  0074B6  5036               	movf	??_calc_sha_256+22,w,c
  2055  0074B8  6E3B               	movwf	(??_calc_sha_256+27)& (0+255),c
  2056  0074BA  0E00               	movlw	low calc_sha_256@w
  2057  0074BC  6E3C               	movwf	(??_calc_sha_256+28)& (0+255),c
  2058  0074BE  0E01               	movlw	high calc_sha_256@w
  2059  0074C0  6E3D               	movwf	(??_calc_sha_256+29)& (0+255),c
  2060  0074C2  90D8               	bcf	status,0,c
  2061  0074C4  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2062  0074C6  6ED9               	movwf	fsr2l,c
  2063  0074C8  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2064  0074CA  6EDA               	movwf	fsr2h,c
  2065  0074CC  90D8               	bcf	status,0,c
  2066  0074CE  36D9               	rlcf	fsr2l,f,c
  2067  0074D0  36DA               	rlcf	fsr2h,f,c
  2068  0074D2  503C               	movf	??_calc_sha_256+28,w,c
  2069  0074D4  26D9               	addwf	fsr2l,f,c
  2070  0074D6  503D               	movf	??_calc_sha_256+29,w,c
  2071  0074D8  22DA               	addwfc	fsr2h,f,c
  2072  0074DA  C038  FFDE         	movff	??_calc_sha_256+24,postinc2
  2073  0074DE  C039  FFDE         	movff	??_calc_sha_256+25,postinc2
  2074  0074E2  C03A  FFDE         	movff	??_calc_sha_256+26,postinc2
  2075  0074E6  C03B  FFDE         	movff	??_calc_sha_256+27,postinc2
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;main.c: 232: p += 4;
  2079  0074EA  0E04               	movlw	4
  2080  0074EC  27E0               	addwf	calc_sha_256@p& (0+255),f,b
  2081  0074EE  0E00               	movlw	0
  2082  0074F0  23E1               	addwfc	(calc_sha_256@p+1)& (0+255),f,b
  2083                           
  2084                           ; BSR set to: 0
  2085  0074F2  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  2086  0074F4  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  2087                           
  2088                           ; BSR set to: 0
  2089  0074F6  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2090  0074F8  D780               	goto	l70
  2091  0074FA  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2092  0074FC  E101               	bnz	l1941
  2093  0074FE  D777               	goto	L1
  2094  007500                     u1830:
  2095  007500                     l1941:
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;main.c: 233: }
  2099                           ;main.c: 236: for (i = 16; i < 64; i++) {
  2100  007500  0E00               	movlw	0
  2101  007502  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  2102  007504  0E10               	movlw	16
  2103  007506  6FEC               	movwf	calc_sha_256@i& (0+255),b
  2104                           
  2105                           ; BSR set to: 0
  2106  007508  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2107  00750A  D008               	goto	l72
  2108  00750C  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2109  00750E  E105               	bnz	u1840
  2110  007510  0E40               	movlw	64
  2111  007512  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  2112  007514  B0D8               	btfsc	status,0,c
  2113  007516  D1B1               	goto	u1870
  2114  007518  D001               	goto	l72
  2115  00751A                     u1840:
  2116                           
  2117                           ; BSR set to: 0
  2118  00751A  D1AF               	goto	u1870
  2119  00751C                     l72:
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;main.c: 237: const uint32_t s0 = rotate_right(w[i - 15], 7) ^ rotate_right(w[i - 15], 1
      +                          8) ^ (w[i - 15] >> 3);
  2123                           
  2124                           ; BSR set to: 0
  2125  00751C  0EC4               	movlw	196
  2126  00751E  6E20               	movwf	??_calc_sha_256& (0+255),c
  2127  007520  0EFF               	movlw	255
  2128  007522  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2129  007524  C0EC  F022         	movff	calc_sha_256@i,??_calc_sha_256+2
  2130  007528  C0ED  F023         	movff	calc_sha_256@i+1,??_calc_sha_256+3
  2131  00752C  90D8               	bcf	status,0,c
  2132  00752E  3622               	rlcf	??_calc_sha_256+2,f,c
  2133  007530  3623               	rlcf	??_calc_sha_256+3,f,c
  2134  007532  90D8               	bcf	status,0,c
  2135  007534  3622               	rlcf	??_calc_sha_256+2,f,c
  2136  007536  3623               	rlcf	??_calc_sha_256+3,f,c
  2137  007538  5020               	movf	??_calc_sha_256,w,c
  2138  00753A  2622               	addwf	??_calc_sha_256+2,f,c
  2139  00753C  5021               	movf	??_calc_sha_256+1,w,c
  2140  00753E  2223               	addwfc	??_calc_sha_256+3,f,c
  2141  007540  0E00               	movlw	low calc_sha_256@w
  2142  007542  2422               	addwf	??_calc_sha_256+2,w,c
  2143  007544  6ED9               	movwf	fsr2l,c
  2144  007546  0E01               	movlw	high calc_sha_256@w
  2145  007548  2023               	addwfc	??_calc_sha_256+3,w,c
  2146  00754A  6EDA               	movwf	fsr2h,c
  2147  00754C  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  2148  007550  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  2149  007554  CFDE F026          	movff	postinc2,??_calc_sha_256+6
  2150  007558  CFDE F027          	movff	postinc2,??_calc_sha_256+7
  2151  00755C  0E04               	movlw	4
  2152  00755E  D005               	goto	u1850
  2153  007560                     u1855:
  2154  007560  90D8               	bcf	status,0,c
  2155  007562  3227               	rrcf	??_calc_sha_256+7,f,c
  2156  007564  3226               	rrcf	??_calc_sha_256+6,f,c
  2157  007566  3225               	rrcf	??_calc_sha_256+5,f,c
  2158  007568  3224               	rrcf	??_calc_sha_256+4,f,c
  2159  00756A                     u1850:
  2160  00756A  2EE8               	decfsz	wreg,f,c
  2161  00756C  D7F9               	goto	u1855
  2162  00756E  0EC4               	movlw	196
  2163  007570  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2164  007572  0EFF               	movlw	255
  2165  007574  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2166  007576  C0EC  F02A         	movff	calc_sha_256@i,??_calc_sha_256+10
  2167  00757A  C0ED  F02B         	movff	calc_sha_256@i+1,??_calc_sha_256+11
  2168  00757E  90D8               	bcf	status,0,c
  2169  007580  362A               	rlcf	??_calc_sha_256+10,f,c
  2170  007582  362B               	rlcf	??_calc_sha_256+11,f,c
  2171  007584  90D8               	bcf	status,0,c
  2172  007586  362A               	rlcf	??_calc_sha_256+10,f,c
  2173  007588  362B               	rlcf	??_calc_sha_256+11,f,c
  2174  00758A  5028               	movf	??_calc_sha_256+8,w,c
  2175  00758C  262A               	addwf	??_calc_sha_256+10,f,c
  2176  00758E  5029               	movf	??_calc_sha_256+9,w,c
  2177  007590  222B               	addwfc	??_calc_sha_256+11,f,c
  2178  007592  0E00               	movlw	low calc_sha_256@w
  2179  007594  242A               	addwf	??_calc_sha_256+10,w,c
  2180  007596  6ED9               	movwf	fsr2l,c
  2181  007598  0E01               	movlw	high calc_sha_256@w
  2182  00759A  202B               	addwfc	??_calc_sha_256+11,w,c
  2183  00759C  6EDA               	movwf	fsr2h,c
  2184  00759E  CFDE F001          	movff	postinc2,rotate_right@value
  2185  0075A2  CFDE F002          	movff	postinc2,rotate_right@value+1
  2186  0075A6  CFDE F003          	movff	postinc2,rotate_right@value+2
  2187  0075AA  CFDE F004          	movff	postinc2,rotate_right@value+3
  2188  0075AE  0E00               	movlw	0
  2189  0075B0  6E06               	movwf	rotate_right@count+1,c
  2190  0075B2  0E07               	movlw	7
  2191  0075B4  6E05               	movwf	rotate_right@count,c
  2192  0075B6  EC69  F034         	call	_rotate_right	;wreg free
  2193  0075BA  C001  F02C         	movff	?_rotate_right,??_calc_sha_256+12
  2194  0075BE  C002  F02D         	movff	?_rotate_right+1,??_calc_sha_256+13
  2195  0075C2  C003  F02E         	movff	?_rotate_right+2,??_calc_sha_256+14
  2196  0075C6  C004  F02F         	movff	?_rotate_right+3,??_calc_sha_256+15
  2197  0075CA  0EC4               	movlw	196
  2198  0075CC  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2199  0075CE  0EFF               	movlw	255
  2200  0075D0  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2201  0075D2  C0EC  F032         	movff	calc_sha_256@i,??_calc_sha_256+18
  2202  0075D6  C0ED  F033         	movff	calc_sha_256@i+1,??_calc_sha_256+19
  2203  0075DA  90D8               	bcf	status,0,c
  2204  0075DC  3632               	rlcf	??_calc_sha_256+18,f,c
  2205  0075DE  3633               	rlcf	??_calc_sha_256+19,f,c
  2206  0075E0  90D8               	bcf	status,0,c
  2207  0075E2  3632               	rlcf	??_calc_sha_256+18,f,c
  2208  0075E4  3633               	rlcf	??_calc_sha_256+19,f,c
  2209  0075E6  5030               	movf	??_calc_sha_256+16,w,c
  2210  0075E8  2632               	addwf	??_calc_sha_256+18,f,c
  2211  0075EA  5031               	movf	??_calc_sha_256+17,w,c
  2212  0075EC  2233               	addwfc	??_calc_sha_256+19,f,c
  2213  0075EE  0E00               	movlw	low calc_sha_256@w
  2214  0075F0  2432               	addwf	??_calc_sha_256+18,w,c
  2215  0075F2  6ED9               	movwf	fsr2l,c
  2216  0075F4  0E01               	movlw	high calc_sha_256@w
  2217  0075F6  2033               	addwfc	??_calc_sha_256+19,w,c
  2218  0075F8  6EDA               	movwf	fsr2h,c
  2219  0075FA  CFDE F001          	movff	postinc2,rotate_right@value
  2220  0075FE  CFDE F002          	movff	postinc2,rotate_right@value+1
  2221  007602  CFDE F003          	movff	postinc2,rotate_right@value+2
  2222  007606  CFDE F004          	movff	postinc2,rotate_right@value+3
  2223  00760A  0E00               	movlw	0
  2224  00760C  6E06               	movwf	rotate_right@count+1,c
  2225  00760E  0E12               	movlw	18
  2226  007610  6E05               	movwf	rotate_right@count,c
  2227  007612  EC69  F034         	call	_rotate_right	;wreg free
  2228  007616  5001               	movf	?_rotate_right,w,c
  2229  007618  182C               	xorwf	??_calc_sha_256+12,w,c
  2230  00761A  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2231  00761C  5002               	movf	?_rotate_right+1,w,c
  2232  00761E  182D               	xorwf	??_calc_sha_256+13,w,c
  2233  007620  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2234  007622  5003               	movf	?_rotate_right+2,w,c
  2235  007624  182E               	xorwf	??_calc_sha_256+14,w,c
  2236  007626  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2237  007628  5004               	movf	?_rotate_right+3,w,c
  2238  00762A  182F               	xorwf	??_calc_sha_256+15,w,c
  2239  00762C  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2240  00762E  5024               	movf	??_calc_sha_256+4,w,c
  2241  007630  1834               	xorwf	??_calc_sha_256+20,w,c
  2242  007632  0100               	movlb	0	; () banked
  2243  007634  6FC0               	movwf	calc_sha_256@s0& (0+255),b
  2244  007636  5025               	movf	??_calc_sha_256+5,w,c
  2245  007638  1835               	xorwf	??_calc_sha_256+21,w,c
  2246  00763A  6FC1               	movwf	(calc_sha_256@s0+1)& (0+255),b
  2247  00763C  5026               	movf	??_calc_sha_256+6,w,c
  2248  00763E  1836               	xorwf	??_calc_sha_256+22,w,c
  2249  007640  6FC2               	movwf	(calc_sha_256@s0+2)& (0+255),b
  2250  007642  5027               	movf	??_calc_sha_256+7,w,c
  2251  007644  1837               	xorwf	??_calc_sha_256+23,w,c
  2252  007646  6FC3               	movwf	(calc_sha_256@s0+3)& (0+255),b
  2253                           
  2254                           ;main.c: 238: const uint32_t s1 = rotate_right(w[i - 2], 17) ^ rotate_right(w[i - 2], 19
      +                          ) ^ (w[i - 2] >> 10);
  2255  007648  0EF8               	movlw	248
  2256  00764A  6E20               	movwf	??_calc_sha_256& (0+255),c
  2257  00764C  0EFF               	movlw	255
  2258  00764E  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2259  007650  C0EC  F022         	movff	calc_sha_256@i,??_calc_sha_256+2
  2260  007654  C0ED  F023         	movff	calc_sha_256@i+1,??_calc_sha_256+3
  2261  007658  90D8               	bcf	status,0,c
  2262  00765A  3622               	rlcf	??_calc_sha_256+2,f,c
  2263  00765C  3623               	rlcf	??_calc_sha_256+3,f,c
  2264  00765E  90D8               	bcf	status,0,c
  2265  007660  3622               	rlcf	??_calc_sha_256+2,f,c
  2266  007662  3623               	rlcf	??_calc_sha_256+3,f,c
  2267  007664  5020               	movf	??_calc_sha_256,w,c
  2268  007666  2622               	addwf	??_calc_sha_256+2,f,c
  2269  007668  5021               	movf	??_calc_sha_256+1,w,c
  2270  00766A  2223               	addwfc	??_calc_sha_256+3,f,c
  2271  00766C  0E00               	movlw	low calc_sha_256@w
  2272  00766E  2422               	addwf	??_calc_sha_256+2,w,c
  2273  007670  6ED9               	movwf	fsr2l,c
  2274  007672  0E01               	movlw	high calc_sha_256@w
  2275  007674  2023               	addwfc	??_calc_sha_256+3,w,c
  2276  007676  6EDA               	movwf	fsr2h,c
  2277  007678  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  2278  00767C  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  2279  007680  CFDE F026          	movff	postinc2,??_calc_sha_256+6
  2280  007684  CFDE F027          	movff	postinc2,??_calc_sha_256+7
  2281  007688  0E0B               	movlw	11
  2282  00768A  D005               	goto	u1860
  2283  00768C                     u1865:
  2284  00768C  90D8               	bcf	status,0,c
  2285  00768E  3227               	rrcf	??_calc_sha_256+7,f,c
  2286  007690  3226               	rrcf	??_calc_sha_256+6,f,c
  2287  007692  3225               	rrcf	??_calc_sha_256+5,f,c
  2288  007694  3224               	rrcf	??_calc_sha_256+4,f,c
  2289  007696                     u1860:
  2290  007696  2EE8               	decfsz	wreg,f,c
  2291  007698  D7F9               	goto	u1865
  2292  00769A  0EF8               	movlw	248
  2293  00769C  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2294  00769E  0EFF               	movlw	255
  2295  0076A0  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2296  0076A2  C0EC  F02A         	movff	calc_sha_256@i,??_calc_sha_256+10
  2297  0076A6  C0ED  F02B         	movff	calc_sha_256@i+1,??_calc_sha_256+11
  2298  0076AA  90D8               	bcf	status,0,c
  2299  0076AC  362A               	rlcf	??_calc_sha_256+10,f,c
  2300  0076AE  362B               	rlcf	??_calc_sha_256+11,f,c
  2301  0076B0  90D8               	bcf	status,0,c
  2302  0076B2  362A               	rlcf	??_calc_sha_256+10,f,c
  2303  0076B4  362B               	rlcf	??_calc_sha_256+11,f,c
  2304  0076B6  5028               	movf	??_calc_sha_256+8,w,c
  2305  0076B8  262A               	addwf	??_calc_sha_256+10,f,c
  2306  0076BA  5029               	movf	??_calc_sha_256+9,w,c
  2307  0076BC  222B               	addwfc	??_calc_sha_256+11,f,c
  2308  0076BE  0E00               	movlw	low calc_sha_256@w
  2309  0076C0  242A               	addwf	??_calc_sha_256+10,w,c
  2310  0076C2  6ED9               	movwf	fsr2l,c
  2311  0076C4  0E01               	movlw	high calc_sha_256@w
  2312  0076C6  202B               	addwfc	??_calc_sha_256+11,w,c
  2313  0076C8  6EDA               	movwf	fsr2h,c
  2314  0076CA  CFDE F001          	movff	postinc2,rotate_right@value
  2315  0076CE  CFDE F002          	movff	postinc2,rotate_right@value+1
  2316  0076D2  CFDE F003          	movff	postinc2,rotate_right@value+2
  2317  0076D6  CFDE F004          	movff	postinc2,rotate_right@value+3
  2318  0076DA  0E00               	movlw	0
  2319  0076DC  6E06               	movwf	rotate_right@count+1,c
  2320  0076DE  0E11               	movlw	17
  2321  0076E0  6E05               	movwf	rotate_right@count,c
  2322  0076E2  EC69  F034         	call	_rotate_right	;wreg free
  2323  0076E6  C001  F02C         	movff	?_rotate_right,??_calc_sha_256+12
  2324  0076EA  C002  F02D         	movff	?_rotate_right+1,??_calc_sha_256+13
  2325  0076EE  C003  F02E         	movff	?_rotate_right+2,??_calc_sha_256+14
  2326  0076F2  C004  F02F         	movff	?_rotate_right+3,??_calc_sha_256+15
  2327  0076F6  0EF8               	movlw	248
  2328  0076F8  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2329  0076FA  0EFF               	movlw	255
  2330  0076FC  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2331  0076FE  C0EC  F032         	movff	calc_sha_256@i,??_calc_sha_256+18
  2332  007702  C0ED  F033         	movff	calc_sha_256@i+1,??_calc_sha_256+19
  2333  007706  90D8               	bcf	status,0,c
  2334  007708  3632               	rlcf	??_calc_sha_256+18,f,c
  2335  00770A  3633               	rlcf	??_calc_sha_256+19,f,c
  2336  00770C  90D8               	bcf	status,0,c
  2337  00770E  3632               	rlcf	??_calc_sha_256+18,f,c
  2338  007710  3633               	rlcf	??_calc_sha_256+19,f,c
  2339  007712  5030               	movf	??_calc_sha_256+16,w,c
  2340  007714  2632               	addwf	??_calc_sha_256+18,f,c
  2341  007716  5031               	movf	??_calc_sha_256+17,w,c
  2342  007718  2233               	addwfc	??_calc_sha_256+19,f,c
  2343  00771A  0E00               	movlw	low calc_sha_256@w
  2344  00771C  2432               	addwf	??_calc_sha_256+18,w,c
  2345  00771E  6ED9               	movwf	fsr2l,c
  2346  007720  0E01               	movlw	high calc_sha_256@w
  2347  007722  2033               	addwfc	??_calc_sha_256+19,w,c
  2348  007724  6EDA               	movwf	fsr2h,c
  2349  007726  CFDE F001          	movff	postinc2,rotate_right@value
  2350  00772A  CFDE F002          	movff	postinc2,rotate_right@value+1
  2351  00772E  CFDE F003          	movff	postinc2,rotate_right@value+2
  2352  007732  CFDE F004          	movff	postinc2,rotate_right@value+3
  2353  007736  0E00               	movlw	0
  2354  007738  6E06               	movwf	rotate_right@count+1,c
  2355  00773A  0E13               	movlw	19
  2356  00773C  6E05               	movwf	rotate_right@count,c
  2357  00773E  EC69  F034         	call	_rotate_right	;wreg free
  2358  007742  5001               	movf	?_rotate_right,w,c
  2359  007744  182C               	xorwf	??_calc_sha_256+12,w,c
  2360  007746  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2361  007748  5002               	movf	?_rotate_right+1,w,c
  2362  00774A  182D               	xorwf	??_calc_sha_256+13,w,c
  2363  00774C  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2364  00774E  5003               	movf	?_rotate_right+2,w,c
  2365  007750  182E               	xorwf	??_calc_sha_256+14,w,c
  2366  007752  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2367  007754  5004               	movf	?_rotate_right+3,w,c
  2368  007756  182F               	xorwf	??_calc_sha_256+15,w,c
  2369  007758  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2370  00775A  5024               	movf	??_calc_sha_256+4,w,c
  2371  00775C  1834               	xorwf	??_calc_sha_256+20,w,c
  2372  00775E  0100               	movlb	0	; () banked
  2373  007760  6FC4               	movwf	calc_sha_256@s1& (0+255),b
  2374  007762  5025               	movf	??_calc_sha_256+5,w,c
  2375  007764  1835               	xorwf	??_calc_sha_256+21,w,c
  2376  007766  6FC5               	movwf	(calc_sha_256@s1+1)& (0+255),b
  2377  007768  5026               	movf	??_calc_sha_256+6,w,c
  2378  00776A  1836               	xorwf	??_calc_sha_256+22,w,c
  2379  00776C  6FC6               	movwf	(calc_sha_256@s1+2)& (0+255),b
  2380  00776E  5027               	movf	??_calc_sha_256+7,w,c
  2381  007770  1837               	xorwf	??_calc_sha_256+23,w,c
  2382  007772  6FC7               	movwf	(calc_sha_256@s1+3)& (0+255),b
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;main.c: 239: w[i] = w[i - 16] + s0 + w[i - 7] + s1;
  2386  007774  0EE4               	movlw	228
  2387  007776  6E20               	movwf	??_calc_sha_256& (0+255),c
  2388  007778  0EFF               	movlw	255
  2389  00777A  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2390  00777C  C0EC  F022         	movff	calc_sha_256@i,??_calc_sha_256+2
  2391  007780  C0ED  F023         	movff	calc_sha_256@i+1,??_calc_sha_256+3
  2392  007784  90D8               	bcf	status,0,c
  2393  007786  3622               	rlcf	??_calc_sha_256+2,f,c
  2394  007788  3623               	rlcf	??_calc_sha_256+3,f,c
  2395  00778A  90D8               	bcf	status,0,c
  2396  00778C  3622               	rlcf	??_calc_sha_256+2,f,c
  2397  00778E  3623               	rlcf	??_calc_sha_256+3,f,c
  2398  007790  5020               	movf	??_calc_sha_256,w,c
  2399  007792  2622               	addwf	??_calc_sha_256+2,f,c
  2400  007794  5021               	movf	??_calc_sha_256+1,w,c
  2401  007796  2223               	addwfc	??_calc_sha_256+3,f,c
  2402  007798  0E00               	movlw	low calc_sha_256@w
  2403  00779A  2422               	addwf	??_calc_sha_256+2,w,c
  2404  00779C  6ED9               	movwf	fsr2l,c
  2405  00779E  0E01               	movlw	high calc_sha_256@w
  2406  0077A0  2023               	addwfc	??_calc_sha_256+3,w,c
  2407  0077A2  6EDA               	movwf	fsr2h,c
  2408  0077A4  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  2409  0077A8  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  2410  0077AC  CFDE F026          	movff	postinc2,??_calc_sha_256+6
  2411  0077B0  CFDE F027          	movff	postinc2,??_calc_sha_256+7
  2412  0077B4  0EC0               	movlw	192
  2413  0077B6  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2414  0077B8  0EFF               	movlw	255
  2415  0077BA  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2416  0077BC  C0EC  F02A         	movff	calc_sha_256@i,??_calc_sha_256+10
  2417  0077C0  C0ED  F02B         	movff	calc_sha_256@i+1,??_calc_sha_256+11
  2418  0077C4  90D8               	bcf	status,0,c
  2419  0077C6  362A               	rlcf	??_calc_sha_256+10,f,c
  2420  0077C8  362B               	rlcf	??_calc_sha_256+11,f,c
  2421  0077CA  90D8               	bcf	status,0,c
  2422  0077CC  362A               	rlcf	??_calc_sha_256+10,f,c
  2423  0077CE  362B               	rlcf	??_calc_sha_256+11,f,c
  2424  0077D0  5028               	movf	??_calc_sha_256+8,w,c
  2425  0077D2  262A               	addwf	??_calc_sha_256+10,f,c
  2426  0077D4  5029               	movf	??_calc_sha_256+9,w,c
  2427  0077D6  222B               	addwfc	??_calc_sha_256+11,f,c
  2428  0077D8  0E00               	movlw	low calc_sha_256@w
  2429  0077DA  242A               	addwf	??_calc_sha_256+10,w,c
  2430  0077DC  6ED9               	movwf	fsr2l,c
  2431  0077DE  0E01               	movlw	high calc_sha_256@w
  2432  0077E0  202B               	addwfc	??_calc_sha_256+11,w,c
  2433  0077E2  6EDA               	movwf	fsr2h,c
  2434  0077E4  CFDE F02C          	movff	postinc2,??_calc_sha_256+12
  2435  0077E8  CFDE F02D          	movff	postinc2,??_calc_sha_256+13
  2436  0077EC  CFDE F02E          	movff	postinc2,??_calc_sha_256+14
  2437  0077F0  CFDE F02F          	movff	postinc2,??_calc_sha_256+15
  2438  0077F4  5024               	movf	??_calc_sha_256+4,w,c
  2439  0077F6  242C               	addwf	??_calc_sha_256+12,w,c
  2440  0077F8  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2441  0077FA  5025               	movf	??_calc_sha_256+5,w,c
  2442  0077FC  202D               	addwfc	??_calc_sha_256+13,w,c
  2443  0077FE  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2444  007800  5026               	movf	??_calc_sha_256+6,w,c
  2445  007802  202E               	addwfc	??_calc_sha_256+14,w,c
  2446  007804  6E32               	movwf	(??_calc_sha_256+18)& (0+255),c
  2447  007806  5027               	movf	??_calc_sha_256+7,w,c
  2448  007808  202F               	addwfc	??_calc_sha_256+15,w,c
  2449  00780A  6E33               	movwf	(??_calc_sha_256+19)& (0+255),c
  2450  00780C  51C0               	movf	calc_sha_256@s0& (0+255),w,b
  2451  00780E  2430               	addwf	??_calc_sha_256+16,w,c
  2452  007810  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2453  007812  51C1               	movf	(calc_sha_256@s0+1)& (0+255),w,b
  2454  007814  2031               	addwfc	??_calc_sha_256+17,w,c
  2455  007816  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2456  007818  51C2               	movf	(calc_sha_256@s0+2)& (0+255),w,b
  2457  00781A  2032               	addwfc	??_calc_sha_256+18,w,c
  2458  00781C  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2459  00781E  51C3               	movf	(calc_sha_256@s0+3)& (0+255),w,b
  2460  007820  2033               	addwfc	??_calc_sha_256+19,w,c
  2461  007822  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2462  007824  51C4               	movf	calc_sha_256@s1& (0+255),w,b
  2463  007826  2434               	addwf	??_calc_sha_256+20,w,c
  2464  007828  6E38               	movwf	(??_calc_sha_256+24)& (0+255),c
  2465  00782A  51C5               	movf	(calc_sha_256@s1+1)& (0+255),w,b
  2466  00782C  2035               	addwfc	??_calc_sha_256+21,w,c
  2467  00782E  6E39               	movwf	(??_calc_sha_256+25)& (0+255),c
  2468  007830  51C6               	movf	(calc_sha_256@s1+2)& (0+255),w,b
  2469  007832  2036               	addwfc	??_calc_sha_256+22,w,c
  2470  007834  6E3A               	movwf	(??_calc_sha_256+26)& (0+255),c
  2471  007836  51C7               	movf	(calc_sha_256@s1+3)& (0+255),w,b
  2472  007838  2037               	addwfc	??_calc_sha_256+23,w,c
  2473  00783A  6E3B               	movwf	(??_calc_sha_256+27)& (0+255),c
  2474  00783C  0E00               	movlw	low calc_sha_256@w
  2475  00783E  6E3C               	movwf	(??_calc_sha_256+28)& (0+255),c
  2476  007840  0E01               	movlw	high calc_sha_256@w
  2477  007842  6E3D               	movwf	(??_calc_sha_256+29)& (0+255),c
  2478  007844  90D8               	bcf	status,0,c
  2479  007846  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2480  007848  6ED9               	movwf	fsr2l,c
  2481  00784A  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2482  00784C  6EDA               	movwf	fsr2h,c
  2483  00784E  90D8               	bcf	status,0,c
  2484  007850  36D9               	rlcf	fsr2l,f,c
  2485  007852  36DA               	rlcf	fsr2h,f,c
  2486  007854  503C               	movf	??_calc_sha_256+28,w,c
  2487  007856  26D9               	addwf	fsr2l,f,c
  2488  007858  503D               	movf	??_calc_sha_256+29,w,c
  2489  00785A  22DA               	addwfc	fsr2h,f,c
  2490  00785C  C038  FFDE         	movff	??_calc_sha_256+24,postinc2
  2491  007860  C039  FFDE         	movff	??_calc_sha_256+25,postinc2
  2492  007864  C03A  FFDE         	movff	??_calc_sha_256+26,postinc2
  2493  007868  C03B  FFDE         	movff	??_calc_sha_256+27,postinc2
  2494                           
  2495                           ; BSR set to: 0
  2496  00786C  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  2497  00786E  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  2498                           
  2499                           ; BSR set to: 0
  2500  007870  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2501  007872  D654               	goto	l72
  2502  007874  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2503  007876  E101               	bnz	l1955
  2504  007878  D64B               	goto	L2
  2505  00787A                     u1870:
  2506  00787A                     l1955:
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;main.c: 240: }
  2510                           ;main.c: 243: for (i = 0; i < 8; i++)
  2511  00787A  0E00               	movlw	0
  2512  00787C  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  2513  00787E  0E00               	movlw	0
  2514  007880  6FEC               	movwf	calc_sha_256@i& (0+255),b
  2515  007882                     l1957:
  2516                           
  2517                           ; BSR set to: 0
  2518  007882  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2519  007884  D006               	goto	l74
  2520  007886  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2521  007888  E12F               	bnz	l1967
  2522  00788A  0E08               	movlw	8
  2523  00788C  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  2524  00788E  B0D8               	btfsc	status,0,c
  2525  007890  D02B               	goto	u1890
  2526  007892                     l74:
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;main.c: 244: ah[i] = h[i];
  2530                           
  2531                           ; BSR set to: 0
  2532  007892  0EA0               	movlw	low calc_sha_256@h
  2533  007894  6E20               	movwf	??_calc_sha_256& (0+255),c
  2534  007896  0E00               	movlw	high calc_sha_256@h
  2535  007898  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2536  00789A  90D8               	bcf	status,0,c
  2537  00789C  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2538  00789E  6ED9               	movwf	fsr2l,c
  2539  0078A0  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2540  0078A2  6EDA               	movwf	fsr2h,c
  2541  0078A4  90D8               	bcf	status,0,c
  2542  0078A6  36D9               	rlcf	fsr2l,f,c
  2543  0078A8  36DA               	rlcf	fsr2h,f,c
  2544  0078AA  5020               	movf	??_calc_sha_256,w,c
  2545  0078AC  26D9               	addwf	fsr2l,f,c
  2546  0078AE  5021               	movf	??_calc_sha_256+1,w,c
  2547  0078B0  22DA               	addwfc	fsr2h,f,c
  2548  0078B2  0E00               	movlw	low calc_sha_256@ah
  2549  0078B4  6E22               	movwf	(??_calc_sha_256+2)& (0+255),c
  2550  0078B6  0E02               	movlw	high calc_sha_256@ah
  2551  0078B8  6E23               	movwf	(??_calc_sha_256+3)& (0+255),c
  2552  0078BA  90D8               	bcf	status,0,c
  2553  0078BC  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2554  0078BE  6EE1               	movwf	fsr1l,c
  2555  0078C0  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2556  0078C2  6EE2               	movwf	fsr1h,c
  2557  0078C4  90D8               	bcf	status,0,c
  2558  0078C6  36E1               	rlcf	fsr1l,f,c
  2559  0078C8  36E2               	rlcf	fsr1h,f,c
  2560  0078CA  5022               	movf	??_calc_sha_256+2,w,c
  2561  0078CC  26E1               	addwf	fsr1l,f,c
  2562  0078CE  5023               	movf	??_calc_sha_256+3,w,c
  2563  0078D0  22E2               	addwfc	fsr1h,f,c
  2564  0078D2  CFDE FFE6          	movff	postinc2,postinc1
  2565  0078D6  CFDE FFE6          	movff	postinc2,postinc1
  2566  0078DA  CFDE FFE6          	movff	postinc2,postinc1
  2567  0078DE  CFDE FFE6          	movff	postinc2,postinc1
  2568                           
  2569                           ; BSR set to: 0
  2570  0078E2  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  2571  0078E4  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  2572  0078E6  D7CD               	goto	l1957
  2573  0078E8                     u1890:
  2574  0078E8                     l1967:
  2575                           
  2576                           ; BSR set to: 0
  2577                           ;main.c: 247: for (i = 0; i < 64; i++) {
  2578  0078E8  0E00               	movlw	0
  2579  0078EA  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  2580  0078EC  0E00               	movlw	0
  2581  0078EE  6FEC               	movwf	calc_sha_256@i& (0+255),b
  2582                           
  2583                           ; BSR set to: 0
  2584  0078F0  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2585  0078F2  D008               	goto	l76
  2586  0078F4  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2587  0078F6  E105               	bnz	u1900
  2588  0078F8  0E40               	movlw	64
  2589  0078FA  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  2590  0078FC  B0D8               	btfsc	status,0,c
  2591  0078FE  D1D9               	goto	u1910
  2592  007900  D001               	goto	l76
  2593  007902                     u1900:
  2594                           
  2595                           ; BSR set to: 0
  2596  007902  D1D7               	goto	u1910
  2597  007904                     l76:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;main.c: 248: const uint32_t s1 = rotate_right(ah[4], 6) ^ rotate_right(ah[4], 11) ^ rot
      +                          ate_right(ah[4], 25);
  2601                           
  2602                           ; BSR set to: 0
  2603  007904  C210  F001         	movff	calc_sha_256@ah+16,rotate_right@value
  2604  007908  C211  F002         	movff	calc_sha_256@ah+17,rotate_right@value+1
  2605  00790C  C212  F003         	movff	calc_sha_256@ah+18,rotate_right@value+2
  2606  007910  C213  F004         	movff	calc_sha_256@ah+19,rotate_right@value+3
  2607  007914  0E00               	movlw	0
  2608  007916  6E06               	movwf	rotate_right@count+1,c
  2609  007918  0E06               	movlw	6
  2610  00791A  6E05               	movwf	rotate_right@count,c
  2611  00791C  EC69  F034         	call	_rotate_right	;wreg free
  2612  007920  C001  F020         	movff	?_rotate_right,??_calc_sha_256
  2613  007924  C002  F021         	movff	?_rotate_right+1,??_calc_sha_256+1
  2614  007928  C003  F022         	movff	?_rotate_right+2,??_calc_sha_256+2
  2615  00792C  C004  F023         	movff	?_rotate_right+3,??_calc_sha_256+3
  2616  007930  C210  F001         	movff	calc_sha_256@ah+16,rotate_right@value
  2617  007934  C211  F002         	movff	calc_sha_256@ah+17,rotate_right@value+1
  2618  007938  C212  F003         	movff	calc_sha_256@ah+18,rotate_right@value+2
  2619  00793C  C213  F004         	movff	calc_sha_256@ah+19,rotate_right@value+3
  2620  007940  0E00               	movlw	0
  2621  007942  6E06               	movwf	rotate_right@count+1,c
  2622  007944  0E0B               	movlw	11
  2623  007946  6E05               	movwf	rotate_right@count,c
  2624  007948  EC69  F034         	call	_rotate_right	;wreg free
  2625  00794C  5001               	movf	?_rotate_right,w,c
  2626  00794E  1820               	xorwf	??_calc_sha_256,w,c
  2627  007950  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  2628  007952  5002               	movf	?_rotate_right+1,w,c
  2629  007954  1821               	xorwf	??_calc_sha_256+1,w,c
  2630  007956  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  2631  007958  5003               	movf	?_rotate_right+2,w,c
  2632  00795A  1822               	xorwf	??_calc_sha_256+2,w,c
  2633  00795C  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  2634  00795E  5004               	movf	?_rotate_right+3,w,c
  2635  007960  1823               	xorwf	??_calc_sha_256+3,w,c
  2636  007962  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  2637  007964  C210  F001         	movff	calc_sha_256@ah+16,rotate_right@value
  2638  007968  C211  F002         	movff	calc_sha_256@ah+17,rotate_right@value+1
  2639  00796C  C212  F003         	movff	calc_sha_256@ah+18,rotate_right@value+2
  2640  007970  C213  F004         	movff	calc_sha_256@ah+19,rotate_right@value+3
  2641  007974  0E00               	movlw	0
  2642  007976  6E06               	movwf	rotate_right@count+1,c
  2643  007978  0E19               	movlw	25
  2644  00797A  6E05               	movwf	rotate_right@count,c
  2645  00797C  EC69  F034         	call	_rotate_right	;wreg free
  2646  007980  5001               	movf	?_rotate_right,w,c
  2647  007982  1824               	xorwf	??_calc_sha_256+4,w,c
  2648  007984  0100               	movlb	0	; () banked
  2649  007986  6FC8               	movwf	calc_sha_256@s1_114& (0+255),b
  2650  007988  5002               	movf	?_rotate_right+1,w,c
  2651  00798A  1825               	xorwf	??_calc_sha_256+5,w,c
  2652  00798C  6FC9               	movwf	(calc_sha_256@s1_114+1)& (0+255),b
  2653  00798E  5003               	movf	?_rotate_right+2,w,c
  2654  007990  1826               	xorwf	??_calc_sha_256+6,w,c
  2655  007992  6FCA               	movwf	(calc_sha_256@s1_114+2)& (0+255),b
  2656  007994  5004               	movf	?_rotate_right+3,w,c
  2657  007996  1827               	xorwf	??_calc_sha_256+7,w,c
  2658  007998  6FCB               	movwf	(calc_sha_256@s1_114+3)& (0+255),b
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 249: const uint32_t ch = (ah[4] & ah[5]) ^ (~ah[4] & ah[6]);
  2662  00799A  C210  F020         	movff	calc_sha_256@ah+16,??_calc_sha_256
  2663  00799E  C211  F021         	movff	calc_sha_256@ah+17,??_calc_sha_256+1
  2664  0079A2  C212  F022         	movff	calc_sha_256@ah+18,??_calc_sha_256+2
  2665  0079A6  C213  F023         	movff	calc_sha_256@ah+19,??_calc_sha_256+3
  2666  0079AA  1E20               	comf	??_calc_sha_256,f,c
  2667  0079AC  1E21               	comf	??_calc_sha_256+1,f,c
  2668  0079AE  1E22               	comf	??_calc_sha_256+2,f,c
  2669  0079B0  1E23               	comf	??_calc_sha_256+3,f,c
  2670  0079B2  0102               	movlb	2	; () banked
  2671  0079B4  5118               	movf	(calc_sha_256@ah+24)& (0+255),w,b
  2672  0079B6  1420               	andwf	??_calc_sha_256,w,c
  2673  0079B8  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  2674  0079BA  5119               	movf	(calc_sha_256@ah+25)& (0+255),w,b
  2675  0079BC  1421               	andwf	??_calc_sha_256+1,w,c
  2676  0079BE  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  2677  0079C0  511A               	movf	(calc_sha_256@ah+26)& (0+255),w,b
  2678  0079C2  1422               	andwf	??_calc_sha_256+2,w,c
  2679  0079C4  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  2680  0079C6  511B               	movf	(calc_sha_256@ah+27)& (0+255),w,b
  2681  0079C8  1423               	andwf	??_calc_sha_256+3,w,c
  2682  0079CA  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  2683  0079CC  5114               	movf	(calc_sha_256@ah+20)& (0+255),w,b
  2684  0079CE  1510               	andwf	(calc_sha_256@ah+16)& (0+255),w,b
  2685  0079D0  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2686  0079D2  5115               	movf	(calc_sha_256@ah+21)& (0+255),w,b
  2687  0079D4  1511               	andwf	(calc_sha_256@ah+17)& (0+255),w,b
  2688  0079D6  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2689  0079D8  5116               	movf	(calc_sha_256@ah+22)& (0+255),w,b
  2690  0079DA  1512               	andwf	(calc_sha_256@ah+18)& (0+255),w,b
  2691  0079DC  6E2A               	movwf	(??_calc_sha_256+10)& (0+255),c
  2692  0079DE  5117               	movf	(calc_sha_256@ah+23)& (0+255),w,b
  2693  0079E0  1513               	andwf	(calc_sha_256@ah+19)& (0+255),w,b
  2694  0079E2  6E2B               	movwf	(??_calc_sha_256+11)& (0+255),c
  2695  0079E4  5024               	movf	??_calc_sha_256+4,w,c
  2696  0079E6  1828               	xorwf	??_calc_sha_256+8,w,c
  2697  0079E8  0100               	movlb	0	; () banked
  2698  0079EA  6FCC               	movwf	calc_sha_256@ch& (0+255),b
  2699  0079EC  5025               	movf	??_calc_sha_256+5,w,c
  2700  0079EE  1829               	xorwf	??_calc_sha_256+9,w,c
  2701  0079F0  6FCD               	movwf	(calc_sha_256@ch+1)& (0+255),b
  2702  0079F2  5026               	movf	??_calc_sha_256+6,w,c
  2703  0079F4  182A               	xorwf	??_calc_sha_256+10,w,c
  2704  0079F6  6FCE               	movwf	(calc_sha_256@ch+2)& (0+255),b
  2705  0079F8  5027               	movf	??_calc_sha_256+7,w,c
  2706  0079FA  182B               	xorwf	??_calc_sha_256+11,w,c
  2707  0079FC  6FCF               	movwf	(calc_sha_256@ch+3)& (0+255),b
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;main.c: 250: const uint32_t temp1 = ah[7] + s1 + ch + k[i] + w[i];
  2711  0079FE  0E00               	movlw	low calc_sha_256@w
  2712  007A00  6E20               	movwf	??_calc_sha_256& (0+255),c
  2713  007A02  0E01               	movlw	high calc_sha_256@w
  2714  007A04  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2715  007A06  90D8               	bcf	status,0,c
  2716  007A08  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2717  007A0A  6ED9               	movwf	fsr2l,c
  2718  007A0C  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2719  007A0E  6EDA               	movwf	fsr2h,c
  2720  007A10  90D8               	bcf	status,0,c
  2721  007A12  36D9               	rlcf	fsr2l,f,c
  2722  007A14  36DA               	rlcf	fsr2h,f,c
  2723  007A16  5020               	movf	??_calc_sha_256,w,c
  2724  007A18  26D9               	addwf	fsr2l,f,c
  2725  007A1A  5021               	movf	??_calc_sha_256+1,w,c
  2726  007A1C  22DA               	addwfc	fsr2h,f,c
  2727  007A1E  CFDE F022          	movff	postinc2,??_calc_sha_256+2
  2728  007A22  CFDE F023          	movff	postinc2,??_calc_sha_256+3
  2729  007A26  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  2730  007A2A  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  2731  007A2E  C0EC  F026         	movff	calc_sha_256@i,??_calc_sha_256+6
  2732  007A32  C0ED  F027         	movff	calc_sha_256@i+1,??_calc_sha_256+7
  2733  007A36  90D8               	bcf	status,0,c
  2734  007A38  3626               	rlcf	??_calc_sha_256+6,f,c
  2735  007A3A  3627               	rlcf	??_calc_sha_256+7,f,c
  2736  007A3C  90D8               	bcf	status,0,c
  2737  007A3E  3626               	rlcf	??_calc_sha_256+6,f,c
  2738  007A40  3627               	rlcf	??_calc_sha_256+7,f,c
  2739  007A42  0EB7               	movlw	low _k
  2740  007A44  2426               	addwf	??_calc_sha_256+6,w,c
  2741  007A46  6EF6               	movwf	tblptrl,c
  2742  007A48  0E7E               	movlw	high _k
  2743  007A4A  2027               	addwfc	??_calc_sha_256+7,w,c
  2744  007A4C  6EF7               	movwf	tblptrh,c
  2745  007A4E                     	if	0	;There are less than 3 active tblptr bytes
  2746  007A4E                     	endif
  2747  007A4E  0009               	tblrd		*+
  2748  007A50  CFF5 F028          	movff	tablat,??_calc_sha_256+8
  2749  007A54  0009               	tblrd		*+
  2750  007A56  CFF5 F029          	movff	tablat,??_calc_sha_256+9
  2751  007A5A  0009               	tblrd		*+
  2752  007A5C  CFF5 F02A          	movff	tablat,??_calc_sha_256+10
  2753  007A60  0009               	tblrd		*+
  2754  007A62  CFF5 F02B          	movff	tablat,??_calc_sha_256+11
  2755  007A66  5028               	movf	??_calc_sha_256+8,w,c
  2756  007A68  0102               	movlb	2	; () banked
  2757  007A6A  251C               	addwf	(calc_sha_256@ah+28)& (0+255),w,b
  2758  007A6C  6E2C               	movwf	(??_calc_sha_256+12)& (0+255),c
  2759  007A6E  5029               	movf	??_calc_sha_256+9,w,c
  2760  007A70  211D               	addwfc	(calc_sha_256@ah+29)& (0+255),w,b
  2761  007A72  6E2D               	movwf	(??_calc_sha_256+13)& (0+255),c
  2762  007A74  502A               	movf	??_calc_sha_256+10,w,c
  2763  007A76  211E               	addwfc	(calc_sha_256@ah+30)& (0+255),w,b
  2764  007A78  6E2E               	movwf	(??_calc_sha_256+14)& (0+255),c
  2765  007A7A  502B               	movf	??_calc_sha_256+11,w,c
  2766  007A7C  211F               	addwfc	(calc_sha_256@ah+31)& (0+255),w,b
  2767  007A7E  6E2F               	movwf	(??_calc_sha_256+15)& (0+255),c
  2768  007A80  5022               	movf	??_calc_sha_256+2,w,c
  2769  007A82  242C               	addwf	??_calc_sha_256+12,w,c
  2770  007A84  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2771  007A86  5023               	movf	??_calc_sha_256+3,w,c
  2772  007A88  202D               	addwfc	??_calc_sha_256+13,w,c
  2773  007A8A  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2774  007A8C  5024               	movf	??_calc_sha_256+4,w,c
  2775  007A8E  202E               	addwfc	??_calc_sha_256+14,w,c
  2776  007A90  6E32               	movwf	(??_calc_sha_256+18)& (0+255),c
  2777  007A92  5025               	movf	??_calc_sha_256+5,w,c
  2778  007A94  202F               	addwfc	??_calc_sha_256+15,w,c
  2779  007A96  6E33               	movwf	(??_calc_sha_256+19)& (0+255),c
  2780  007A98  0100               	movlb	0	; () banked
  2781  007A9A  51C8               	movf	calc_sha_256@s1_114& (0+255),w,b
  2782  007A9C  2430               	addwf	??_calc_sha_256+16,w,c
  2783  007A9E  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2784  007AA0  51C9               	movf	(calc_sha_256@s1_114+1)& (0+255),w,b
  2785  007AA2  2031               	addwfc	??_calc_sha_256+17,w,c
  2786  007AA4  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2787  007AA6  51CA               	movf	(calc_sha_256@s1_114+2)& (0+255),w,b
  2788  007AA8  2032               	addwfc	??_calc_sha_256+18,w,c
  2789  007AAA  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2790  007AAC  51CB               	movf	(calc_sha_256@s1_114+3)& (0+255),w,b
  2791  007AAE  2033               	addwfc	??_calc_sha_256+19,w,c
  2792  007AB0  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2793  007AB2  51CC               	movf	calc_sha_256@ch& (0+255),w,b
  2794  007AB4  2434               	addwf	??_calc_sha_256+20,w,c
  2795  007AB6  6FDC               	movwf	calc_sha_256@temp1& (0+255),b
  2796  007AB8  51CD               	movf	(calc_sha_256@ch+1)& (0+255),w,b
  2797  007ABA  2035               	addwfc	??_calc_sha_256+21,w,c
  2798  007ABC  6FDD               	movwf	(calc_sha_256@temp1+1)& (0+255),b
  2799  007ABE  51CE               	movf	(calc_sha_256@ch+2)& (0+255),w,b
  2800  007AC0  2036               	addwfc	??_calc_sha_256+22,w,c
  2801  007AC2  6FDE               	movwf	(calc_sha_256@temp1+2)& (0+255),b
  2802  007AC4  51CF               	movf	(calc_sha_256@ch+3)& (0+255),w,b
  2803  007AC6  2037               	addwfc	??_calc_sha_256+23,w,c
  2804  007AC8  6FDF               	movwf	(calc_sha_256@temp1+3)& (0+255),b
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;main.c: 251: const uint32_t s0 = rotate_right(ah[0], 2) ^ rotate_right(ah[0], 13) ^ rot
      +                          ate_right(ah[0], 22);
  2808  007ACA  C200  F001         	movff	calc_sha_256@ah,rotate_right@value
  2809  007ACE  C201  F002         	movff	calc_sha_256@ah+1,rotate_right@value+1
  2810  007AD2  C202  F003         	movff	calc_sha_256@ah+2,rotate_right@value+2
  2811  007AD6  C203  F004         	movff	calc_sha_256@ah+3,rotate_right@value+3
  2812  007ADA  0E00               	movlw	0
  2813  007ADC  6E06               	movwf	rotate_right@count+1,c
  2814  007ADE  0E02               	movlw	2
  2815  007AE0  6E05               	movwf	rotate_right@count,c
  2816  007AE2  EC69  F034         	call	_rotate_right	;wreg free
  2817  007AE6  C001  F020         	movff	?_rotate_right,??_calc_sha_256
  2818  007AEA  C002  F021         	movff	?_rotate_right+1,??_calc_sha_256+1
  2819  007AEE  C003  F022         	movff	?_rotate_right+2,??_calc_sha_256+2
  2820  007AF2  C004  F023         	movff	?_rotate_right+3,??_calc_sha_256+3
  2821  007AF6  C200  F001         	movff	calc_sha_256@ah,rotate_right@value
  2822  007AFA  C201  F002         	movff	calc_sha_256@ah+1,rotate_right@value+1
  2823  007AFE  C202  F003         	movff	calc_sha_256@ah+2,rotate_right@value+2
  2824  007B02  C203  F004         	movff	calc_sha_256@ah+3,rotate_right@value+3
  2825  007B06  0E00               	movlw	0
  2826  007B08  6E06               	movwf	rotate_right@count+1,c
  2827  007B0A  0E0D               	movlw	13
  2828  007B0C  6E05               	movwf	rotate_right@count,c
  2829  007B0E  EC69  F034         	call	_rotate_right	;wreg free
  2830  007B12  5001               	movf	?_rotate_right,w,c
  2831  007B14  1820               	xorwf	??_calc_sha_256,w,c
  2832  007B16  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  2833  007B18  5002               	movf	?_rotate_right+1,w,c
  2834  007B1A  1821               	xorwf	??_calc_sha_256+1,w,c
  2835  007B1C  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  2836  007B1E  5003               	movf	?_rotate_right+2,w,c
  2837  007B20  1822               	xorwf	??_calc_sha_256+2,w,c
  2838  007B22  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  2839  007B24  5004               	movf	?_rotate_right+3,w,c
  2840  007B26  1823               	xorwf	??_calc_sha_256+3,w,c
  2841  007B28  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  2842  007B2A  C200  F001         	movff	calc_sha_256@ah,rotate_right@value
  2843  007B2E  C201  F002         	movff	calc_sha_256@ah+1,rotate_right@value+1
  2844  007B32  C202  F003         	movff	calc_sha_256@ah+2,rotate_right@value+2
  2845  007B36  C203  F004         	movff	calc_sha_256@ah+3,rotate_right@value+3
  2846  007B3A  0E00               	movlw	0
  2847  007B3C  6E06               	movwf	rotate_right@count+1,c
  2848  007B3E  0E16               	movlw	22
  2849  007B40  6E05               	movwf	rotate_right@count,c
  2850  007B42  EC69  F034         	call	_rotate_right	;wreg free
  2851  007B46  5001               	movf	?_rotate_right,w,c
  2852  007B48  1824               	xorwf	??_calc_sha_256+4,w,c
  2853  007B4A  0100               	movlb	0	; () banked
  2854  007B4C  6FD0               	movwf	calc_sha_256@s0_117& (0+255),b
  2855  007B4E  5002               	movf	?_rotate_right+1,w,c
  2856  007B50  1825               	xorwf	??_calc_sha_256+5,w,c
  2857  007B52  6FD1               	movwf	(calc_sha_256@s0_117+1)& (0+255),b
  2858  007B54  5003               	movf	?_rotate_right+2,w,c
  2859  007B56  1826               	xorwf	??_calc_sha_256+6,w,c
  2860  007B58  6FD2               	movwf	(calc_sha_256@s0_117+2)& (0+255),b
  2861  007B5A  5004               	movf	?_rotate_right+3,w,c
  2862  007B5C  1827               	xorwf	??_calc_sha_256+7,w,c
  2863  007B5E  6FD3               	movwf	(calc_sha_256@s0_117+3)& (0+255),b
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;main.c: 252: const uint32_t maj = (ah[0] & ah[1]) ^ (ah[0] & ah[2]) ^ (ah[1] & ah[2]);
  2867  007B60  0102               	movlb	2	; () banked
  2868  007B62  5108               	movf	(calc_sha_256@ah+8)& (0+255),w,b
  2869  007B64  1504               	andwf	(calc_sha_256@ah+4)& (0+255),w,b
  2870  007B66  6E20               	movwf	??_calc_sha_256& (0+255),c
  2871  007B68  5109               	movf	(calc_sha_256@ah+9)& (0+255),w,b
  2872  007B6A  1505               	andwf	(calc_sha_256@ah+5)& (0+255),w,b
  2873  007B6C  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2874  007B6E  510A               	movf	(calc_sha_256@ah+10)& (0+255),w,b
  2875  007B70  1506               	andwf	(calc_sha_256@ah+6)& (0+255),w,b
  2876  007B72  6E22               	movwf	(??_calc_sha_256+2)& (0+255),c
  2877  007B74  510B               	movf	(calc_sha_256@ah+11)& (0+255),w,b
  2878  007B76  1507               	andwf	(calc_sha_256@ah+7)& (0+255),w,b
  2879  007B78  6E23               	movwf	(??_calc_sha_256+3)& (0+255),c
  2880  007B7A  5100               	movf	calc_sha_256@ah& (0+255),w,b
  2881  007B7C  1508               	andwf	(calc_sha_256@ah+8)& (0+255),w,b
  2882  007B7E  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  2883  007B80  5101               	movf	(calc_sha_256@ah+1)& (0+255),w,b
  2884  007B82  1509               	andwf	(calc_sha_256@ah+9)& (0+255),w,b
  2885  007B84  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  2886  007B86  5102               	movf	(calc_sha_256@ah+2)& (0+255),w,b
  2887  007B88  150A               	andwf	(calc_sha_256@ah+10)& (0+255),w,b
  2888  007B8A  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  2889  007B8C  5103               	movf	(calc_sha_256@ah+3)& (0+255),w,b
  2890  007B8E  150B               	andwf	(calc_sha_256@ah+11)& (0+255),w,b
  2891  007B90  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  2892  007B92  5100               	movf	calc_sha_256@ah& (0+255),w,b
  2893  007B94  1504               	andwf	(calc_sha_256@ah+4)& (0+255),w,b
  2894  007B96  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2895  007B98  5101               	movf	(calc_sha_256@ah+1)& (0+255),w,b
  2896  007B9A  1505               	andwf	(calc_sha_256@ah+5)& (0+255),w,b
  2897  007B9C  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2898  007B9E  5102               	movf	(calc_sha_256@ah+2)& (0+255),w,b
  2899  007BA0  1506               	andwf	(calc_sha_256@ah+6)& (0+255),w,b
  2900  007BA2  6E2A               	movwf	(??_calc_sha_256+10)& (0+255),c
  2901  007BA4  5103               	movf	(calc_sha_256@ah+3)& (0+255),w,b
  2902  007BA6  1507               	andwf	(calc_sha_256@ah+7)& (0+255),w,b
  2903  007BA8  6E2B               	movwf	(??_calc_sha_256+11)& (0+255),c
  2904  007BAA  5024               	movf	??_calc_sha_256+4,w,c
  2905  007BAC  1828               	xorwf	??_calc_sha_256+8,w,c
  2906  007BAE  6E2C               	movwf	(??_calc_sha_256+12)& (0+255),c
  2907  007BB0  5025               	movf	??_calc_sha_256+5,w,c
  2908  007BB2  1829               	xorwf	??_calc_sha_256+9,w,c
  2909  007BB4  6E2D               	movwf	(??_calc_sha_256+13)& (0+255),c
  2910  007BB6  5026               	movf	??_calc_sha_256+6,w,c
  2911  007BB8  182A               	xorwf	??_calc_sha_256+10,w,c
  2912  007BBA  6E2E               	movwf	(??_calc_sha_256+14)& (0+255),c
  2913  007BBC  5027               	movf	??_calc_sha_256+7,w,c
  2914  007BBE  182B               	xorwf	??_calc_sha_256+11,w,c
  2915  007BC0  6E2F               	movwf	(??_calc_sha_256+15)& (0+255),c
  2916  007BC2  5020               	movf	??_calc_sha_256,w,c
  2917  007BC4  182C               	xorwf	??_calc_sha_256+12,w,c
  2918  007BC6  0100               	movlb	0	; () banked
  2919  007BC8  6FD4               	movwf	calc_sha_256@maj& (0+255),b
  2920  007BCA  5021               	movf	??_calc_sha_256+1,w,c
  2921  007BCC  182D               	xorwf	??_calc_sha_256+13,w,c
  2922  007BCE  6FD5               	movwf	(calc_sha_256@maj+1)& (0+255),b
  2923  007BD0  5022               	movf	??_calc_sha_256+2,w,c
  2924  007BD2  182E               	xorwf	??_calc_sha_256+14,w,c
  2925  007BD4  6FD6               	movwf	(calc_sha_256@maj+2)& (0+255),b
  2926  007BD6  5023               	movf	??_calc_sha_256+3,w,c
  2927  007BD8  182F               	xorwf	??_calc_sha_256+15,w,c
  2928  007BDA  6FD7               	movwf	(calc_sha_256@maj+3)& (0+255),b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;main.c: 253: const uint32_t temp2 = s0 + maj;
  2932  007BDC  51D4               	movf	calc_sha_256@maj& (0+255),w,b
  2933  007BDE  25D0               	addwf	calc_sha_256@s0_117& (0+255),w,b
  2934  007BE0  6FD8               	movwf	calc_sha_256@temp2& (0+255),b
  2935  007BE2  51D5               	movf	(calc_sha_256@maj+1)& (0+255),w,b
  2936  007BE4  21D1               	addwfc	(calc_sha_256@s0_117+1)& (0+255),w,b
  2937  007BE6  6FD9               	movwf	(calc_sha_256@temp2+1)& (0+255),b
  2938  007BE8  51D6               	movf	(calc_sha_256@maj+2)& (0+255),w,b
  2939  007BEA  21D2               	addwfc	(calc_sha_256@s0_117+2)& (0+255),w,b
  2940  007BEC  6FDA               	movwf	(calc_sha_256@temp2+2)& (0+255),b
  2941  007BEE  51D7               	movf	(calc_sha_256@maj+3)& (0+255),w,b
  2942  007BF0  21D3               	addwfc	(calc_sha_256@s0_117+3)& (0+255),w,b
  2943  007BF2  6FDB               	movwf	(calc_sha_256@temp2+3)& (0+255),b
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;main.c: 255: ah[7] = ah[6];
  2947  007BF4  C218  F21C         	movff	calc_sha_256@ah+24,calc_sha_256@ah+28
  2948  007BF8  C219  F21D         	movff	calc_sha_256@ah+25,calc_sha_256@ah+29
  2949  007BFC  C21A  F21E         	movff	calc_sha_256@ah+26,calc_sha_256@ah+30
  2950  007C00  C21B  F21F         	movff	calc_sha_256@ah+27,calc_sha_256@ah+31
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;main.c: 256: ah[6] = ah[5];
  2954  007C04  C214  F218         	movff	calc_sha_256@ah+20,calc_sha_256@ah+24
  2955  007C08  C215  F219         	movff	calc_sha_256@ah+21,calc_sha_256@ah+25
  2956  007C0C  C216  F21A         	movff	calc_sha_256@ah+22,calc_sha_256@ah+26
  2957  007C10  C217  F21B         	movff	calc_sha_256@ah+23,calc_sha_256@ah+27
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;main.c: 257: ah[5] = ah[4];
  2961  007C14  C210  F214         	movff	calc_sha_256@ah+16,calc_sha_256@ah+20
  2962  007C18  C211  F215         	movff	calc_sha_256@ah+17,calc_sha_256@ah+21
  2963  007C1C  C212  F216         	movff	calc_sha_256@ah+18,calc_sha_256@ah+22
  2964  007C20  C213  F217         	movff	calc_sha_256@ah+19,calc_sha_256@ah+23
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 258: ah[4] = ah[3] + temp1;
  2968  007C24  51DC               	movf	calc_sha_256@temp1& (0+255),w,b
  2969  007C26  0102               	movlb	2	; () banked
  2970  007C28  250C               	addwf	(calc_sha_256@ah+12)& (0+255),w,b
  2971  007C2A  6F10               	movwf	(calc_sha_256@ah+16)& (0+255),b
  2972  007C2C  0100               	movlb	0	; () banked
  2973  007C2E  51DD               	movf	(calc_sha_256@temp1+1)& (0+255),w,b
  2974  007C30  0102               	movlb	2	; () banked
  2975  007C32  210D               	addwfc	(calc_sha_256@ah+13)& (0+255),w,b
  2976  007C34  6F11               	movwf	(calc_sha_256@ah+17)& (0+255),b
  2977  007C36  0100               	movlb	0	; () banked
  2978  007C38  51DE               	movf	(calc_sha_256@temp1+2)& (0+255),w,b
  2979  007C3A  0102               	movlb	2	; () banked
  2980  007C3C  210E               	addwfc	(calc_sha_256@ah+14)& (0+255),w,b
  2981  007C3E  6F12               	movwf	(calc_sha_256@ah+18)& (0+255),b
  2982  007C40  0100               	movlb	0	; () banked
  2983  007C42  51DF               	movf	(calc_sha_256@temp1+3)& (0+255),w,b
  2984  007C44  0102               	movlb	2	; () banked
  2985  007C46  210F               	addwfc	(calc_sha_256@ah+15)& (0+255),w,b
  2986  007C48  6F13               	movwf	(calc_sha_256@ah+19)& (0+255),b
  2987                           
  2988                           ; BSR set to: 2
  2989                           ;main.c: 259: ah[3] = ah[2];
  2990  007C4A  C208  F20C         	movff	calc_sha_256@ah+8,calc_sha_256@ah+12
  2991  007C4E  C209  F20D         	movff	calc_sha_256@ah+9,calc_sha_256@ah+13
  2992  007C52  C20A  F20E         	movff	calc_sha_256@ah+10,calc_sha_256@ah+14
  2993  007C56  C20B  F20F         	movff	calc_sha_256@ah+11,calc_sha_256@ah+15
  2994                           
  2995                           ; BSR set to: 2
  2996                           ;main.c: 260: ah[2] = ah[1];
  2997  007C5A  C204  F208         	movff	calc_sha_256@ah+4,calc_sha_256@ah+8
  2998  007C5E  C205  F209         	movff	calc_sha_256@ah+5,calc_sha_256@ah+9
  2999  007C62  C206  F20A         	movff	calc_sha_256@ah+6,calc_sha_256@ah+10
  3000  007C66  C207  F20B         	movff	calc_sha_256@ah+7,calc_sha_256@ah+11
  3001                           
  3002                           ; BSR set to: 2
  3003                           ;main.c: 261: ah[1] = ah[0];
  3004  007C6A  C200  F204         	movff	calc_sha_256@ah,calc_sha_256@ah+4
  3005  007C6E  C201  F205         	movff	calc_sha_256@ah+1,calc_sha_256@ah+5
  3006  007C72  C202  F206         	movff	calc_sha_256@ah+2,calc_sha_256@ah+6
  3007  007C76  C203  F207         	movff	calc_sha_256@ah+3,calc_sha_256@ah+7
  3008                           
  3009                           ; BSR set to: 2
  3010                           ;main.c: 262: ah[0] = temp1 + temp2;
  3011  007C7A  0100               	movlb	0	; () banked
  3012  007C7C  51D8               	movf	calc_sha_256@temp2& (0+255),w,b
  3013  007C7E  25DC               	addwf	calc_sha_256@temp1& (0+255),w,b
  3014  007C80  0102               	movlb	2	; () banked
  3015  007C82  6F00               	movwf	calc_sha_256@ah& (0+255),b
  3016  007C84  0100               	movlb	0	; () banked
  3017  007C86  51D9               	movf	(calc_sha_256@temp2+1)& (0+255),w,b
  3018  007C88  21DD               	addwfc	(calc_sha_256@temp1+1)& (0+255),w,b
  3019  007C8A  0102               	movlb	2	; () banked
  3020  007C8C  6F01               	movwf	(calc_sha_256@ah+1)& (0+255),b
  3021  007C8E  0100               	movlb	0	; () banked
  3022  007C90  51DA               	movf	(calc_sha_256@temp2+2)& (0+255),w,b
  3023  007C92  21DE               	addwfc	(calc_sha_256@temp1+2)& (0+255),w,b
  3024  007C94  0102               	movlb	2	; () banked
  3025  007C96  6F02               	movwf	(calc_sha_256@ah+2)& (0+255),b
  3026  007C98  0100               	movlb	0	; () banked
  3027  007C9A  51DB               	movf	(calc_sha_256@temp2+3)& (0+255),w,b
  3028  007C9C  21DF               	addwfc	(calc_sha_256@temp1+3)& (0+255),w,b
  3029  007C9E  0102               	movlb	2	; () banked
  3030  007CA0  6F03               	movwf	(calc_sha_256@ah+3)& (0+255),b
  3031                           
  3032                           ; BSR set to: 2
  3033  007CA2  0100               	movlb	0	; () banked
  3034  007CA4  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  3035  007CA6  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  3036                           
  3037                           ; BSR set to: 0
  3038  007CA8  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3039  007CAA  D62C               	goto	l76
  3040  007CAC  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3041  007CAE  E101               	bnz	l2005
  3042  007CB0  D623               	goto	L3
  3043  007CB2                     u1910:
  3044  007CB2                     l2005:
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;main.c: 263: }
  3048                           ;main.c: 266: for (i = 0; i < 8; i++)
  3049  007CB2  0E00               	movlw	0
  3050  007CB4  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  3051  007CB6  0E00               	movlw	0
  3052  007CB8  6FEC               	movwf	calc_sha_256@i& (0+255),b
  3053  007CBA                     l2007:
  3054                           
  3055                           ; BSR set to: 0
  3056  007CBA  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3057  007CBC  D006               	goto	l78
  3058  007CBE  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3059  007CC0  E137               	bnz	l2017
  3060  007CC2  0E08               	movlw	8
  3061  007CC4  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  3062  007CC6  B0D8               	btfsc	status,0,c
  3063  007CC8  D033               	goto	u1930
  3064  007CCA                     l78:
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;main.c: 267: h[i] += ah[i];
  3068                           
  3069                           ; BSR set to: 0
  3070  007CCA  0E00               	movlw	low calc_sha_256@ah
  3071  007CCC  6E20               	movwf	??_calc_sha_256& (0+255),c
  3072  007CCE  0E02               	movlw	high calc_sha_256@ah
  3073  007CD0  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3074  007CD2  90D8               	bcf	status,0,c
  3075  007CD4  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3076  007CD6  6ED9               	movwf	fsr2l,c
  3077  007CD8  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3078  007CDA  6EDA               	movwf	fsr2h,c
  3079  007CDC  90D8               	bcf	status,0,c
  3080  007CDE  36D9               	rlcf	fsr2l,f,c
  3081  007CE0  36DA               	rlcf	fsr2h,f,c
  3082  007CE2  5020               	movf	??_calc_sha_256,w,c
  3083  007CE4  26D9               	addwf	fsr2l,f,c
  3084  007CE6  5021               	movf	??_calc_sha_256+1,w,c
  3085  007CE8  22DA               	addwfc	fsr2h,f,c
  3086  007CEA  CFDE F022          	movff	postinc2,??_calc_sha_256+2
  3087  007CEE  CFDE F023          	movff	postinc2,??_calc_sha_256+3
  3088  007CF2  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  3089  007CF6  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  3090  007CFA  0EA0               	movlw	low calc_sha_256@h
  3091  007CFC  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  3092  007CFE  0E00               	movlw	high calc_sha_256@h
  3093  007D00  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  3094  007D02  90D8               	bcf	status,0,c
  3095  007D04  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3096  007D06  6ED9               	movwf	fsr2l,c
  3097  007D08  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3098  007D0A  6EDA               	movwf	fsr2h,c
  3099  007D0C  90D8               	bcf	status,0,c
  3100  007D0E  36D9               	rlcf	fsr2l,f,c
  3101  007D10  36DA               	rlcf	fsr2h,f,c
  3102  007D12  5026               	movf	??_calc_sha_256+6,w,c
  3103  007D14  26D9               	addwf	fsr2l,f,c
  3104  007D16  5027               	movf	??_calc_sha_256+7,w,c
  3105  007D18  22DA               	addwfc	fsr2h,f,c
  3106  007D1A  5022               	movf	??_calc_sha_256+2,w,c
  3107  007D1C  26DE               	addwf	postinc2,f,c
  3108  007D1E  5023               	movf	??_calc_sha_256+3,w,c
  3109  007D20  22DE               	addwfc	postinc2,f,c
  3110  007D22  5024               	movf	??_calc_sha_256+4,w,c
  3111  007D24  22DE               	addwfc	postinc2,f,c
  3112  007D26  5025               	movf	??_calc_sha_256+5,w,c
  3113  007D28  22DE               	addwfc	postinc2,f,c
  3114                           
  3115                           ; BSR set to: 0
  3116  007D2A  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  3117  007D2C  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  3118  007D2E  D7C5               	goto	l2007
  3119  007D30                     u1930:
  3120  007D30                     l2017:
  3121  007D30  0E60               	movlw	low calc_sha_256@chunk
  3122  007D32  6E0C               	movwf	calc_chunk@chunk,c
  3123  007D34  0E00               	movlw	high calc_sha_256@chunk
  3124  007D36  6E0D               	movwf	calc_chunk@chunk+1,c
  3125  007D38  0EE2               	movlw	low calc_sha_256@state
  3126  007D3A  6E0E               	movwf	calc_chunk@state,c
  3127  007D3C  0E00               	movlw	high calc_sha_256@state
  3128  007D3E  6E0F               	movwf	calc_chunk@state+1,c
  3129  007D40  EC7C  F037         	call	_calc_chunk	;wreg free
  3130  007D44  500C               	movf	?_calc_chunk,w,c
  3131  007D46  100D               	iorwf	?_calc_chunk+1,w,c
  3132  007D48  A4D8               	btfss	status,2,c
  3133  007D4A  EFDB  F039         	goto	l69
  3134                           
  3135                           ;main.c: 268: }
  3136                           ;main.c: 271: for (i = 0, j = 0; i < 8; i++) {
  3137  007D4E  0E00               	movlw	0
  3138  007D50  0100               	movlb	0	; () banked
  3139  007D52  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  3140  007D54  0E00               	movlw	0
  3141  007D56  6FEC               	movwf	calc_sha_256@i& (0+255),b
  3142  007D58  0E00               	movlw	0
  3143  007D5A  6E3F               	movwf	calc_sha_256@j+1,c
  3144  007D5C  0E00               	movlw	0
  3145  007D5E  6E3E               	movwf	calc_sha_256@j,c
  3146                           
  3147                           ; BSR set to: 0
  3148  007D60  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3149  007D62  D008               	goto	l81
  3150  007D64  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3151  007D66  E105               	bnz	u1950
  3152  007D68  0E08               	movlw	8
  3153  007D6A  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  3154  007D6C  B0D8               	btfsc	status,0,c
  3155  007D6E  0012               	return	
  3156  007D70  D001               	goto	l81
  3157  007D72                     u1950:
  3158                           
  3159                           ; BSR set to: 0
  3160  007D72  0012               	return	
  3161  007D74                     l81:
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;main.c: 272: hash[j++] = (uint8_t) (h[i] >> 24);
  3165                           
  3166                           ; BSR set to: 0
  3167  007D74  503E               	movf	calc_sha_256@j,w,c
  3168  007D76  241A               	addwf	calc_sha_256@hash,w,c
  3169  007D78  6ED9               	movwf	fsr2l,c
  3170  007D7A  503F               	movf	calc_sha_256@j+1,w,c
  3171  007D7C  201B               	addwfc	calc_sha_256@hash+1,w,c
  3172  007D7E  6EDA               	movwf	fsr2h,c
  3173  007D80  0EA0               	movlw	low calc_sha_256@h
  3174  007D82  6E20               	movwf	??_calc_sha_256& (0+255),c
  3175  007D84  0E00               	movlw	high calc_sha_256@h
  3176  007D86  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3177  007D88  90D8               	bcf	status,0,c
  3178  007D8A  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3179  007D8C  6EE1               	movwf	fsr1l,c
  3180  007D8E  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3181  007D90  6EE2               	movwf	fsr1h,c
  3182  007D92  90D8               	bcf	status,0,c
  3183  007D94  36E1               	rlcf	fsr1l,f,c
  3184  007D96  36E2               	rlcf	fsr1h,f,c
  3185  007D98  5020               	movf	??_calc_sha_256,w,c
  3186  007D9A  26E1               	addwf	fsr1l,f,c
  3187  007D9C  5021               	movf	??_calc_sha_256+1,w,c
  3188  007D9E  22E2               	addwfc	fsr1h,f,c
  3189  007DA0  CFE6 F022          	movff	postinc1,??_calc_sha_256+2
  3190  007DA4  CFE6 F023          	movff	postinc1,??_calc_sha_256+3
  3191  007DA8  CFE6 F024          	movff	postinc1,??_calc_sha_256+4
  3192  007DAC  CFE6 F025          	movff	postinc1,??_calc_sha_256+5
  3193  007DB0  0E19               	movlw	25
  3194  007DB2  D005               	goto	u1960
  3195  007DB4                     u1965:
  3196  007DB4  90D8               	bcf	status,0,c
  3197  007DB6  3225               	rrcf	??_calc_sha_256+5,f,c
  3198  007DB8  3224               	rrcf	??_calc_sha_256+4,f,c
  3199  007DBA  3223               	rrcf	??_calc_sha_256+3,f,c
  3200  007DBC  3222               	rrcf	??_calc_sha_256+2,f,c
  3201  007DBE                     u1960:
  3202  007DBE  2EE8               	decfsz	wreg,f,c
  3203  007DC0  D7F9               	goto	u1965
  3204  007DC2  5022               	movf	??_calc_sha_256+2,w,c
  3205  007DC4  6EDF               	movwf	indf2,c
  3206                           
  3207                           ; BSR set to: 0
  3208  007DC6  4A3E               	infsnz	calc_sha_256@j,f,c
  3209  007DC8  2A3F               	incf	calc_sha_256@j+1,f,c
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;main.c: 273: hash[j++] = (uint8_t) (h[i] >> 16);
  3213  007DCA  503E               	movf	calc_sha_256@j,w,c
  3214  007DCC  241A               	addwf	calc_sha_256@hash,w,c
  3215  007DCE  6ED9               	movwf	fsr2l,c
  3216  007DD0  503F               	movf	calc_sha_256@j+1,w,c
  3217  007DD2  201B               	addwfc	calc_sha_256@hash+1,w,c
  3218  007DD4  6EDA               	movwf	fsr2h,c
  3219  007DD6  0EA0               	movlw	low calc_sha_256@h
  3220  007DD8  6E20               	movwf	??_calc_sha_256& (0+255),c
  3221  007DDA  0E00               	movlw	high calc_sha_256@h
  3222  007DDC  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3223  007DDE  90D8               	bcf	status,0,c
  3224  007DE0  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3225  007DE2  6EE1               	movwf	fsr1l,c
  3226  007DE4  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3227  007DE6  6EE2               	movwf	fsr1h,c
  3228  007DE8  90D8               	bcf	status,0,c
  3229  007DEA  36E1               	rlcf	fsr1l,f,c
  3230  007DEC  36E2               	rlcf	fsr1h,f,c
  3231  007DEE  5020               	movf	??_calc_sha_256,w,c
  3232  007DF0  26E1               	addwf	fsr1l,f,c
  3233  007DF2  5021               	movf	??_calc_sha_256+1,w,c
  3234  007DF4  22E2               	addwfc	fsr1h,f,c
  3235  007DF6  CFE6 F022          	movff	postinc1,??_calc_sha_256+2
  3236  007DFA  CFE6 F023          	movff	postinc1,??_calc_sha_256+3
  3237  007DFE  CFE6 F024          	movff	postinc1,??_calc_sha_256+4
  3238  007E02  CFE6 F025          	movff	postinc1,??_calc_sha_256+5
  3239  007E06  0E11               	movlw	17
  3240  007E08  D005               	goto	u1970
  3241  007E0A                     u1975:
  3242  007E0A  90D8               	bcf	status,0,c
  3243  007E0C  3225               	rrcf	??_calc_sha_256+5,f,c
  3244  007E0E  3224               	rrcf	??_calc_sha_256+4,f,c
  3245  007E10  3223               	rrcf	??_calc_sha_256+3,f,c
  3246  007E12  3222               	rrcf	??_calc_sha_256+2,f,c
  3247  007E14                     u1970:
  3248  007E14  2EE8               	decfsz	wreg,f,c
  3249  007E16  D7F9               	goto	u1975
  3250  007E18  5022               	movf	??_calc_sha_256+2,w,c
  3251  007E1A  6EDF               	movwf	indf2,c
  3252  007E1C  4A3E               	infsnz	calc_sha_256@j,f,c
  3253  007E1E  2A3F               	incf	calc_sha_256@j+1,f,c
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;main.c: 274: hash[j++] = (uint8_t) (h[i] >> 8);
  3257  007E20  503E               	movf	calc_sha_256@j,w,c
  3258  007E22  241A               	addwf	calc_sha_256@hash,w,c
  3259  007E24  6ED9               	movwf	fsr2l,c
  3260  007E26  503F               	movf	calc_sha_256@j+1,w,c
  3261  007E28  201B               	addwfc	calc_sha_256@hash+1,w,c
  3262  007E2A  6EDA               	movwf	fsr2h,c
  3263  007E2C  0EA0               	movlw	low calc_sha_256@h
  3264  007E2E  6E20               	movwf	??_calc_sha_256& (0+255),c
  3265  007E30  0E00               	movlw	high calc_sha_256@h
  3266  007E32  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3267  007E34  90D8               	bcf	status,0,c
  3268  007E36  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3269  007E38  6EE1               	movwf	fsr1l,c
  3270  007E3A  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3271  007E3C  6EE2               	movwf	fsr1h,c
  3272  007E3E  90D8               	bcf	status,0,c
  3273  007E40  36E1               	rlcf	fsr1l,f,c
  3274  007E42  36E2               	rlcf	fsr1h,f,c
  3275  007E44  5020               	movf	??_calc_sha_256,w,c
  3276  007E46  26E1               	addwf	fsr1l,f,c
  3277  007E48  5021               	movf	??_calc_sha_256+1,w,c
  3278  007E4A  22E2               	addwfc	fsr1h,f,c
  3279  007E4C  CFE6 F022          	movff	postinc1,??_calc_sha_256+2
  3280  007E50  CFE6 F023          	movff	postinc1,??_calc_sha_256+3
  3281  007E54  CFE6 F024          	movff	postinc1,??_calc_sha_256+4
  3282  007E58  CFE6 F025          	movff	postinc1,??_calc_sha_256+5
  3283  007E5C  C023  F022         	movff	??_calc_sha_256+3,??_calc_sha_256+2
  3284  007E60  C024  F023         	movff	??_calc_sha_256+4,??_calc_sha_256+3
  3285  007E64  C025  F024         	movff	??_calc_sha_256+5,??_calc_sha_256+4
  3286  007E68  6A25               	clrf	??_calc_sha_256+5,c
  3287  007E6A  5022               	movf	??_calc_sha_256+2,w,c
  3288  007E6C  6EDF               	movwf	indf2,c
  3289                           
  3290                           ; BSR set to: 0
  3291  007E6E  4A3E               	infsnz	calc_sha_256@j,f,c
  3292  007E70  2A3F               	incf	calc_sha_256@j+1,f,c
  3293                           
  3294                           ;main.c: 275: hash[j++] = (uint8_t) h[i];
  3295  007E72  0EA0               	movlw	low calc_sha_256@h
  3296  007E74  6E20               	movwf	??_calc_sha_256& (0+255),c
  3297  007E76  0E00               	movlw	high calc_sha_256@h
  3298  007E78  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3299  007E7A  90D8               	bcf	status,0,c
  3300  007E7C  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3301  007E7E  6ED9               	movwf	fsr2l,c
  3302  007E80  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3303  007E82  6EDA               	movwf	fsr2h,c
  3304  007E84  90D8               	bcf	status,0,c
  3305  007E86  36D9               	rlcf	fsr2l,f,c
  3306  007E88  36DA               	rlcf	fsr2h,f,c
  3307  007E8A  5020               	movf	??_calc_sha_256,w,c
  3308  007E8C  26D9               	addwf	fsr2l,f,c
  3309  007E8E  5021               	movf	??_calc_sha_256+1,w,c
  3310  007E90  22DA               	addwfc	fsr2h,f,c
  3311  007E92  503E               	movf	calc_sha_256@j,w,c
  3312  007E94  241A               	addwf	calc_sha_256@hash,w,c
  3313  007E96  6EE1               	movwf	fsr1l,c
  3314  007E98  503F               	movf	calc_sha_256@j+1,w,c
  3315  007E9A  201B               	addwfc	calc_sha_256@hash+1,w,c
  3316  007E9C  6EE2               	movwf	fsr1h,c
  3317  007E9E  CFDF FFE7          	movff	indf2,indf1
  3318                           
  3319                           ; BSR set to: 0
  3320  007EA2  4A3E               	infsnz	calc_sha_256@j,f,c
  3321  007EA4  2A3F               	incf	calc_sha_256@j+1,f,c
  3322                           
  3323                           ; BSR set to: 0
  3324  007EA6  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  3325  007EA8  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  3326                           
  3327                           ; BSR set to: 0
  3328  007EAA  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3329  007EAC  D763               	goto	l81
  3330  007EAE  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3331  007EB0  E101               	bnz	l83
  3332  007EB2  D75A               	goto	L4
  3333  007EB4                     l83:
  3334                           
  3335                           ; BSR set to: 0
  3336  007EB4  0012               	return		;funcret
  3337  007EB6                     __end_of_calc_sha_256:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           indf1	equ	0xFE7
  3348                           postinc1	equ	0xFE6
  3349                           postdec1	equ	0xFE5
  3350                           plusw1	equ	0xFE3
  3351                           fsr1h	equ	0xFE2
  3352                           fsr1l	equ	0xFE1
  3353                           indf2	equ	0xFDF
  3354                           postinc2	equ	0xFDE
  3355                           postdec2	equ	0xFDD
  3356                           plusw2	equ	0xFDB
  3357                           fsr2h	equ	0xFDA
  3358                           fsr2l	equ	0xFD9
  3359                           status	equ	0xFD8
  3360                           
  3361 ;; *************** function _rotate_right *****************
  3362 ;; Defined at:
  3363 ;;		line 138 in file "main.c"
  3364 ;; Parameters:    Size  Location     Type
  3365 ;;  value           4    0[COMRAM] unsigned long 
  3366 ;;  count           2    4[COMRAM] unsigned int 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;                  4    0[COMRAM] unsigned long 
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0
  3373 ;; Tracked objects:
  3374 ;;		On entry : 0/0
  3375 ;;		On exit  : 0/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3378 ;;      Params:         6       0       0       0       0       0       0       0       0
  3379 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3380 ;;      Temps:          9       0       0       0       0       0       0       0       0
  3381 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3382 ;;Total ram usage:       15 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_calc_sha_256
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text7
  3392  0068D2                     __ptext7:
  3393                           	opt stack 0
  3394  0068D2                     _rotate_right:
  3395                           	opt stack 29
  3396                           
  3397                           ;main.c: 139: return value >> count | value << (32 - count);
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;incstack = 0
  3401  0068D2  5005               	movf	rotate_right@count,w,c
  3402  0068D4  0800               	sublw	0
  3403  0068D6  6E07               	movwf	??_rotate_right& (0+255),c
  3404  0068D8  0E20               	movlw	32
  3405  0068DA  2607               	addwf	??_rotate_right,f,c
  3406  0068DC  C001  F008         	movff	rotate_right@value,??_rotate_right+1
  3407  0068E0  C002  F009         	movff	rotate_right@value+1,??_rotate_right+2
  3408  0068E4  C003  F00A         	movff	rotate_right@value+2,??_rotate_right+3
  3409  0068E8  C004  F00B         	movff	rotate_right@value+3,??_rotate_right+4
  3410  0068EC  2A07               	incf	??_rotate_right,f,c
  3411  0068EE  D005               	goto	u1190
  3412  0068F0                     u1195:
  3413  0068F0  90D8               	bcf	status,0,c
  3414  0068F2  3608               	rlcf	??_rotate_right+1,f,c
  3415  0068F4  3609               	rlcf	??_rotate_right+2,f,c
  3416  0068F6  360A               	rlcf	??_rotate_right+3,f,c
  3417  0068F8  360B               	rlcf	??_rotate_right+4,f,c
  3418  0068FA                     u1190:
  3419  0068FA  2E07               	decfsz	??_rotate_right,f,c
  3420  0068FC  D7F9               	goto	u1195
  3421  0068FE  5005               	movf	rotate_right@count,w,c
  3422  006900  C001  F00C         	movff	rotate_right@value,??_rotate_right+5
  3423  006904  C002  F00D         	movff	rotate_right@value+1,??_rotate_right+6
  3424  006908  C003  F00E         	movff	rotate_right@value+2,??_rotate_right+7
  3425  00690C  C004  F00F         	movff	rotate_right@value+3,??_rotate_right+8
  3426  006910  2AE8               	incf	wreg,f,c
  3427  006912  D005               	goto	u1200
  3428  006914                     u1205:
  3429  006914  90D8               	bcf	status,0,c
  3430  006916  320F               	rrcf	??_rotate_right+8,f,c
  3431  006918  320E               	rrcf	??_rotate_right+7,f,c
  3432  00691A  320D               	rrcf	??_rotate_right+6,f,c
  3433  00691C  320C               	rrcf	??_rotate_right+5,f,c
  3434  00691E                     u1200:
  3435  00691E  2EE8               	decfsz	wreg,f,c
  3436  006920  D7F9               	goto	u1205
  3437  006922  5008               	movf	??_rotate_right+1,w,c
  3438  006924  100C               	iorwf	??_rotate_right+5,w,c
  3439  006926  6E01               	movwf	?_rotate_right,c
  3440  006928  5009               	movf	??_rotate_right+2,w,c
  3441  00692A  100D               	iorwf	??_rotate_right+6,w,c
  3442  00692C  6E02               	movwf	?_rotate_right+1,c
  3443  00692E  500A               	movf	??_rotate_right+3,w,c
  3444  006930  100E               	iorwf	??_rotate_right+7,w,c
  3445  006932  6E03               	movwf	?_rotate_right+2,c
  3446  006934  500B               	movf	??_rotate_right+4,w,c
  3447  006936  100F               	iorwf	??_rotate_right+8,w,c
  3448  006938  6E04               	movwf	?_rotate_right+3,c
  3449  00693A  0012               	return	
  3450  00693C                     __end_of_rotate_right:
  3451                           	opt stack 0
  3452                           tblptru	equ	0xFF8
  3453                           tblptrh	equ	0xFF7
  3454                           tblptrl	equ	0xFF6
  3455                           tablat	equ	0xFF5
  3456                           prodh	equ	0xFF4
  3457                           prodl	equ	0xFF3
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           indf1	equ	0xFE7
  3461                           postinc1	equ	0xFE6
  3462                           postdec1	equ	0xFE5
  3463                           plusw1	equ	0xFE3
  3464                           fsr1h	equ	0xFE2
  3465                           fsr1l	equ	0xFE1
  3466                           indf2	equ	0xFDF
  3467                           postinc2	equ	0xFDE
  3468                           postdec2	equ	0xFDD
  3469                           plusw2	equ	0xFDB
  3470                           fsr2h	equ	0xFDA
  3471                           fsr2l	equ	0xFD9
  3472                           status	equ	0xFD8
  3473                           
  3474 ;; *************** function _init_buf_state *****************
  3475 ;; Defined at:
  3476 ;;		line 129 in file "main.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;  state           2    0[COMRAM] PTR struct buffer_state
  3479 ;;		 -> calc_sha_256@state(10), 
  3480 ;;  input           2    2[COMRAM] PTR const void 
  3481 ;;		 -> string(16), 
  3482 ;;  len             2    4[COMRAM] unsigned int 
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;		None
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  1    wreg      void 
  3487 ;; Registers used:
  3488 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3494 ;;      Params:         6       0       0       0       0       0       0       0       0
  3495 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3496 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3497 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3498 ;;Total ram usage:        6 bytes
  3499 ;; Hardware stack levels used:    1
  3500 ;; This function calls:
  3501 ;;		Nothing
  3502 ;; This function is called by:
  3503 ;;		_calc_sha_256
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507                           	psect	text8
  3508  006870                     __ptext8:
  3509                           	opt stack 0
  3510  006870                     _init_buf_state:
  3511                           	opt stack 29
  3512                           
  3513                           ;main.c: 130: state->p = input;
  3514                           
  3515                           ;incstack = 0
  3516  006870  C001  FFD9         	movff	init_buf_state@state,fsr2l
  3517  006874  C002  FFDA         	movff	init_buf_state@state+1,fsr2h
  3518  006878  C003  FFDE         	movff	init_buf_state@input,postinc2
  3519  00687C  C004  FFDD         	movff	init_buf_state@input+1,postdec2
  3520                           
  3521                           ;main.c: 131: state->len = len;
  3522  006880  EE20 F002          	lfsr	2,2
  3523  006884  5001               	movf	init_buf_state@state,w,c
  3524  006886  26D9               	addwf	fsr2l,f,c
  3525  006888  5002               	movf	init_buf_state@state+1,w,c
  3526  00688A  22DA               	addwfc	fsr2h,f,c
  3527  00688C  C005  FFDE         	movff	init_buf_state@len,postinc2
  3528  006890  C006  FFDD         	movff	init_buf_state@len+1,postdec2
  3529                           
  3530                           ;main.c: 132: state->total_len = len;
  3531  006894  EE20 F004          	lfsr	2,4
  3532  006898  5001               	movf	init_buf_state@state,w,c
  3533  00689A  26D9               	addwf	fsr2l,f,c
  3534  00689C  5002               	movf	init_buf_state@state+1,w,c
  3535  00689E  22DA               	addwfc	fsr2h,f,c
  3536  0068A0  C005  FFDE         	movff	init_buf_state@len,postinc2
  3537  0068A4  C006  FFDD         	movff	init_buf_state@len+1,postdec2
  3538                           
  3539                           ;main.c: 133: state->single_one_delivered = 0;
  3540  0068A8  EE20 F006          	lfsr	2,6
  3541  0068AC  5001               	movf	init_buf_state@state,w,c
  3542  0068AE  26D9               	addwf	fsr2l,f,c
  3543  0068B0  5002               	movf	init_buf_state@state+1,w,c
  3544  0068B2  22DA               	addwfc	fsr2h,f,c
  3545  0068B4  0E00               	movlw	0
  3546  0068B6  6EDE               	movwf	postinc2,c
  3547  0068B8  0E00               	movlw	0
  3548  0068BA  6EDD               	movwf	postdec2,c
  3549                           
  3550                           ;main.c: 134: state->total_len_delivered = 0;
  3551  0068BC  EE20 F008          	lfsr	2,8
  3552  0068C0  5001               	movf	init_buf_state@state,w,c
  3553  0068C2  26D9               	addwf	fsr2l,f,c
  3554  0068C4  5002               	movf	init_buf_state@state+1,w,c
  3555  0068C6  22DA               	addwfc	fsr2h,f,c
  3556  0068C8  0E00               	movlw	0
  3557  0068CA  6EDE               	movwf	postinc2,c
  3558  0068CC  0E00               	movlw	0
  3559  0068CE  6EDD               	movwf	postdec2,c
  3560  0068D0  0012               	return		;funcret
  3561  0068D2                     __end_of_init_buf_state:
  3562                           	opt stack 0
  3563                           tblptru	equ	0xFF8
  3564                           tblptrh	equ	0xFF7
  3565                           tblptrl	equ	0xFF6
  3566                           tablat	equ	0xFF5
  3567                           prodh	equ	0xFF4
  3568                           prodl	equ	0xFF3
  3569                           postinc0	equ	0xFEE
  3570                           wreg	equ	0xFE8
  3571                           indf1	equ	0xFE7
  3572                           postinc1	equ	0xFE6
  3573                           postdec1	equ	0xFE5
  3574                           plusw1	equ	0xFE3
  3575                           fsr1h	equ	0xFE2
  3576                           fsr1l	equ	0xFE1
  3577                           indf2	equ	0xFDF
  3578                           postinc2	equ	0xFDE
  3579                           postdec2	equ	0xFDD
  3580                           plusw2	equ	0xFDB
  3581                           fsr2h	equ	0xFDA
  3582                           fsr2l	equ	0xFD9
  3583                           status	equ	0xFD8
  3584                           
  3585 ;; *************** function _calc_chunk *****************
  3586 ;; Defined at:
  3587 ;;		line 143 in file "main.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  chunk           2   11[COMRAM] PTR unsigned char 
  3590 ;;		 -> calc_sha_256@chunk(64), 
  3591 ;;  state           2   13[COMRAM] PTR struct buffer_state
  3592 ;;		 -> calc_sha_256@state(10), 
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;  i               2   23[COMRAM] int 
  3595 ;;  len             2   19[COMRAM] unsigned int 
  3596 ;;  left            2   17[COMRAM] const unsigned int 
  3597 ;;  space_in_chu    2   21[COMRAM] unsigned int 
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  2   11[COMRAM] int 
  3600 ;; Registers used:
  3601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3607 ;;      Params:         4       0       0       0       0       0       0       0       0
  3608 ;;      Locals:         8       0       0       0       0       0       0       0       0
  3609 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3610 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3611 ;;Total ram usage:       14 bytes
  3612 ;; Hardware stack levels used:    1
  3613 ;; Hardware stack levels required when called:    1
  3614 ;; This function calls:
  3615 ;;		_memcpy
  3616 ;;		_memset
  3617 ;; This function is called by:
  3618 ;;		_calc_sha_256
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text9
  3623  006EF8                     __ptext9:
  3624                           	opt stack 0
  3625  006EF8                     _calc_chunk:
  3626                           	opt stack 28
  3627                           
  3628                           ;main.c: 144: size_t space_in_chunk;
  3629                           ;main.c: 147: if (state->total_len_delivered) {
  3630                           
  3631                           ;incstack = 0
  3632  006EF8  EE20 F008          	lfsr	2,8
  3633  006EFC  500E               	movf	calc_chunk@state,w,c
  3634  006EFE  26D9               	addwf	fsr2l,f,c
  3635  006F00  500F               	movf	calc_chunk@state+1,w,c
  3636  006F02  22DA               	addwfc	fsr2h,f,c
  3637  006F04  50DE               	movf	postinc2,w,c
  3638  006F06  10DE               	iorwf	postinc2,w,c
  3639  006F08  B4D8               	btfsc	status,2,c
  3640  006F0A  D005               	goto	l56
  3641                           
  3642                           ;main.c: 148: return 0;
  3643  006F0C  0E00               	movlw	0
  3644  006F0E  6E0D               	movwf	?_calc_chunk+1,c
  3645  006F10  0E00               	movlw	0
  3646  006F12  6E0C               	movwf	?_calc_chunk,c
  3647  006F14  0012               	return	
  3648  006F16                     l56:
  3649                           
  3650                           ;main.c: 149: }
  3651                           ;main.c: 152: if (state->len >= 64) {
  3652  006F16  EE20 F002          	lfsr	2,2
  3653  006F1A  500E               	movf	calc_chunk@state,w,c
  3654  006F1C  26D9               	addwf	fsr2l,f,c
  3655  006F1E  500F               	movf	calc_chunk@state+1,w,c
  3656  006F20  22DA               	addwfc	fsr2h,f,c
  3657  006F22  0E01               	movlw	1
  3658  006F24  50DB               	movf	plusw2,w,c
  3659  006F26  E104               	bnz	u1220
  3660  006F28  0E40               	movlw	64
  3661  006F2A  5CDE               	subwf	postinc2,w,c
  3662  006F2C  A0D8               	btfss	status,0,c
  3663  006F2E  D029               	goto	l58
  3664  006F30                     u1220:
  3665                           
  3666                           ;main.c: 153: memcpy(chunk, state->p, 64);
  3667  006F30  C00C  F001         	movff	calc_chunk@chunk,memcpy@d1
  3668  006F34  C00D  F002         	movff	calc_chunk@chunk+1,memcpy@d1+1
  3669  006F38  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  3670  006F3C  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  3671  006F40  CFDE F003          	movff	postinc2,memcpy@s1
  3672  006F44  CFDD F004          	movff	postdec2,memcpy@s1+1
  3673  006F48  0E00               	movlw	0
  3674  006F4A  6E06               	movwf	memcpy@n+1,c
  3675  006F4C  0E40               	movlw	64
  3676  006F4E  6E05               	movwf	memcpy@n,c
  3677  006F50  EC9C  F033         	call	_memcpy	;wreg free
  3678                           
  3679                           ;main.c: 154: state->p += 64;
  3680  006F54  0E40               	movlw	64
  3681  006F56  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  3682  006F5A  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  3683  006F5E  26DE               	addwf	postinc2,f,c
  3684  006F60  0E00               	movlw	0
  3685  006F62  22DD               	addwfc	postdec2,f,c
  3686                           
  3687                           ;main.c: 155: state->len -= 64;
  3688  006F64  EE20 F002          	lfsr	2,2
  3689  006F68  500E               	movf	calc_chunk@state,w,c
  3690  006F6A  26D9               	addwf	fsr2l,f,c
  3691  006F6C  500F               	movf	calc_chunk@state+1,w,c
  3692  006F6E  22DA               	addwfc	fsr2h,f,c
  3693  006F70  0E40               	movlw	64
  3694  006F72  5EDE               	subwf	postinc2,f,c
  3695  006F74  0E00               	movlw	0
  3696  006F76  5ADD               	subwfb	postdec2,f,c
  3697                           
  3698                           ;main.c: 156: return 1;
  3699  006F78  0E00               	movlw	0
  3700  006F7A  6E0D               	movwf	?_calc_chunk+1,c
  3701  006F7C  0E01               	movlw	1
  3702  006F7E  6E0C               	movwf	?_calc_chunk,c
  3703  006F80  0012               	return	
  3704  006F82                     l58:
  3705                           
  3706                           ;main.c: 157: }
  3707                           ;main.c: 160: memcpy(chunk, state->p, state->len);
  3708  006F82  C00C  F001         	movff	calc_chunk@chunk,memcpy@d1
  3709  006F86  C00D  F002         	movff	calc_chunk@chunk+1,memcpy@d1+1
  3710  006F8A  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  3711  006F8E  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  3712  006F92  CFDE F003          	movff	postinc2,memcpy@s1
  3713  006F96  CFDD F004          	movff	postdec2,memcpy@s1+1
  3714  006F9A  EE20 F002          	lfsr	2,2
  3715  006F9E  500E               	movf	calc_chunk@state,w,c
  3716  006FA0  26D9               	addwf	fsr2l,f,c
  3717  006FA2  500F               	movf	calc_chunk@state+1,w,c
  3718  006FA4  22DA               	addwfc	fsr2h,f,c
  3719  006FA6  CFDE F005          	movff	postinc2,memcpy@n
  3720  006FAA  CFDD F006          	movff	postdec2,memcpy@n+1
  3721  006FAE  EC9C  F033         	call	_memcpy	;wreg free
  3722                           
  3723                           ;main.c: 161: chunk += state->len;
  3724  006FB2  EE20 F002          	lfsr	2,2
  3725  006FB6  500E               	movf	calc_chunk@state,w,c
  3726  006FB8  26D9               	addwf	fsr2l,f,c
  3727  006FBA  500F               	movf	calc_chunk@state+1,w,c
  3728  006FBC  22DA               	addwfc	fsr2h,f,c
  3729  006FBE  50DE               	movf	postinc2,w,c
  3730  006FC0  260C               	addwf	calc_chunk@chunk,f,c
  3731  006FC2  50DD               	movf	postdec2,w,c
  3732  006FC4  220D               	addwfc	calc_chunk@chunk+1,f,c
  3733                           
  3734                           ;main.c: 162: space_in_chunk = 64 - state->len;
  3735  006FC6  EE20 F002          	lfsr	2,2
  3736  006FCA  500E               	movf	calc_chunk@state,w,c
  3737  006FCC  26D9               	addwf	fsr2l,f,c
  3738  006FCE  500F               	movf	calc_chunk@state+1,w,c
  3739  006FD0  22DA               	addwfc	fsr2h,f,c
  3740  006FD2  CFDE F010          	movff	postinc2,??_calc_chunk
  3741  006FD6  CFDD F011          	movff	postdec2,??_calc_chunk+1
  3742  006FDA  1E10               	comf	??_calc_chunk,f,c
  3743  006FDC  1E11               	comf	??_calc_chunk+1,f,c
  3744  006FDE  4A10               	infsnz	??_calc_chunk,f,c
  3745  006FE0  2A11               	incf	??_calc_chunk+1,f,c
  3746  006FE2  0E40               	movlw	64
  3747  006FE4  2410               	addwf	??_calc_chunk,w,c
  3748  006FE6  6E16               	movwf	calc_chunk@space_in_chunk,c
  3749  006FE8  0E00               	movlw	0
  3750  006FEA  2011               	addwfc	??_calc_chunk+1,w,c
  3751  006FEC  6E17               	movwf	calc_chunk@space_in_chunk+1,c
  3752                           
  3753                           ;main.c: 163: state->p += state->len;
  3754  006FEE  EE20 F002          	lfsr	2,2
  3755  006FF2  500E               	movf	calc_chunk@state,w,c
  3756  006FF4  26D9               	addwf	fsr2l,f,c
  3757  006FF6  500F               	movf	calc_chunk@state+1,w,c
  3758  006FF8  22DA               	addwfc	fsr2h,f,c
  3759  006FFA  CFDE F010          	movff	postinc2,??_calc_chunk
  3760  006FFE  CFDD F011          	movff	postdec2,??_calc_chunk+1
  3761  007002  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  3762  007006  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  3763  00700A  5010               	movf	??_calc_chunk,w,c
  3764  00700C  26DE               	addwf	postinc2,f,c
  3765  00700E  5011               	movf	??_calc_chunk+1,w,c
  3766  007010  22DD               	addwfc	postdec2,f,c
  3767                           
  3768                           ;main.c: 164: state->len = 0;
  3769  007012  EE20 F002          	lfsr	2,2
  3770  007016  500E               	movf	calc_chunk@state,w,c
  3771  007018  26D9               	addwf	fsr2l,f,c
  3772  00701A  500F               	movf	calc_chunk@state+1,w,c
  3773  00701C  22DA               	addwfc	fsr2h,f,c
  3774  00701E  0E00               	movlw	0
  3775  007020  6EDE               	movwf	postinc2,c
  3776  007022  0E00               	movlw	0
  3777  007024  6EDD               	movwf	postdec2,c
  3778                           
  3779                           ;main.c: 167: if (!state->single_one_delivered) {
  3780  007026  EE20 F006          	lfsr	2,6
  3781  00702A  500E               	movf	calc_chunk@state,w,c
  3782  00702C  26D9               	addwf	fsr2l,f,c
  3783  00702E  500F               	movf	calc_chunk@state+1,w,c
  3784  007030  22DA               	addwfc	fsr2h,f,c
  3785  007032  50DE               	movf	postinc2,w,c
  3786  007034  10DE               	iorwf	postinc2,w,c
  3787  007036  A4D8               	btfss	status,2,c
  3788  007038  D015               	goto	l59
  3789                           
  3790                           ;main.c: 168: *chunk++ = 0x80;
  3791  00703A  C00C  FFD9         	movff	calc_chunk@chunk,fsr2l
  3792  00703E  C00D  FFDA         	movff	calc_chunk@chunk+1,fsr2h
  3793  007042  0E80               	movlw	128
  3794  007044  6EDF               	movwf	indf2,c
  3795  007046  4A0C               	infsnz	calc_chunk@chunk,f,c
  3796  007048  2A0D               	incf	calc_chunk@chunk+1,f,c
  3797                           
  3798                           ;main.c: 169: space_in_chunk -= 1;
  3799  00704A  0616               	decf	calc_chunk@space_in_chunk,f,c
  3800  00704C  A0D8               	btfss	status,0,c
  3801  00704E  0617               	decf	calc_chunk@space_in_chunk+1,f,c
  3802                           
  3803                           ;main.c: 170: state->single_one_delivered = 1;
  3804  007050  EE20 F006          	lfsr	2,6
  3805  007054  500E               	movf	calc_chunk@state,w,c
  3806  007056  26D9               	addwf	fsr2l,f,c
  3807  007058  500F               	movf	calc_chunk@state+1,w,c
  3808  00705A  22DA               	addwfc	fsr2h,f,c
  3809  00705C  0E01               	movlw	1
  3810  00705E  6EDE               	movwf	postinc2,c
  3811  007060  0E00               	movlw	0
  3812  007062  6EDD               	movwf	postdec2,c
  3813  007064                     l59:
  3814                           
  3815                           ;main.c: 171: }
  3816                           ;main.c: 178: if (space_in_chunk >= 8) {
  3817  007064  5017               	movf	calc_chunk@space_in_chunk+1,w,c
  3818  007066  E104               	bnz	u1240
  3819  007068  0E08               	movlw	8
  3820  00706A  5C16               	subwf	calc_chunk@space_in_chunk,w,c
  3821  00706C  A0D8               	btfss	status,0,c
  3822  00706E  D053               	goto	l60
  3823  007070                     u1240:
  3824                           
  3825                           ;main.c: 179: const size_t left = space_in_chunk - 8;
  3826  007070  0EF8               	movlw	248
  3827  007072  2416               	addwf	calc_chunk@space_in_chunk,w,c
  3828  007074  6E12               	movwf	calc_chunk@left,c
  3829  007076  0EFF               	movlw	255
  3830  007078  2017               	addwfc	calc_chunk@space_in_chunk+1,w,c
  3831  00707A  6E13               	movwf	calc_chunk@left+1,c
  3832                           
  3833                           ;main.c: 180: size_t len = state->total_len;
  3834  00707C  EE20 F004          	lfsr	2,4
  3835  007080  500E               	movf	calc_chunk@state,w,c
  3836  007082  26D9               	addwf	fsr2l,f,c
  3837  007084  500F               	movf	calc_chunk@state+1,w,c
  3838  007086  22DA               	addwfc	fsr2h,f,c
  3839  007088  CFDE F014          	movff	postinc2,calc_chunk@len
  3840  00708C  CFDD F015          	movff	postdec2,calc_chunk@len+1
  3841                           
  3842                           ;main.c: 181: int i;
  3843                           ;main.c: 182: memset(chunk, 0x00, left);
  3844  007090  C00C  F001         	movff	calc_chunk@chunk,memset@p1
  3845  007094  C00D  F002         	movff	calc_chunk@chunk+1,memset@p1+1
  3846  007098  0E00               	movlw	0
  3847  00709A  6E04               	movwf	memset@c+1,c
  3848  00709C  0E00               	movlw	0
  3849  00709E  6E03               	movwf	memset@c,c
  3850  0070A0  C012  F005         	movff	calc_chunk@left,memset@n
  3851  0070A4  C013  F006         	movff	calc_chunk@left+1,memset@n+1
  3852  0070A8  EC6B  F033         	call	_memset	;wreg free
  3853                           
  3854                           ;main.c: 183: chunk += left;
  3855  0070AC  5012               	movf	calc_chunk@left,w,c
  3856  0070AE  260C               	addwf	calc_chunk@chunk,f,c
  3857  0070B0  5013               	movf	calc_chunk@left+1,w,c
  3858  0070B2  220D               	addwfc	calc_chunk@chunk+1,f,c
  3859                           
  3860                           ;main.c: 186: chunk[7] = (uint8_t) (len << 3);
  3861  0070B4  EE20 F007          	lfsr	2,7
  3862  0070B8  500C               	movf	calc_chunk@chunk,w,c
  3863  0070BA  26D9               	addwf	fsr2l,f,c
  3864  0070BC  500D               	movf	calc_chunk@chunk+1,w,c
  3865  0070BE  22DA               	addwfc	fsr2h,f,c
  3866  0070C0  3814               	swapf	calc_chunk@len,w,c
  3867  0070C2  42E8               	rrncf	wreg,f,c
  3868  0070C4  0BF8               	andlw	248
  3869  0070C6  6EDF               	movwf	indf2,c
  3870                           
  3871                           ;main.c: 187: len >>= 5;
  3872  0070C8  0E05               	movlw	5
  3873  0070CA  6E10               	movwf	??_calc_chunk& (0+255),c
  3874  0070CC                     u1255:
  3875  0070CC  90D8               	bcf	status,0,c
  3876  0070CE  3215               	rrcf	calc_chunk@len+1,f,c
  3877  0070D0  3214               	rrcf	calc_chunk@len,f,c
  3878  0070D2  2E10               	decfsz	??_calc_chunk& (0+255),f,c
  3879  0070D4  D7FB               	goto	u1255
  3880                           
  3881                           ;main.c: 188: for (i = 6; i >= 0; i--) {
  3882  0070D6  0E00               	movlw	0
  3883  0070D8  6E19               	movwf	calc_chunk@i+1,c
  3884  0070DA  0E06               	movlw	6
  3885  0070DC  6E18               	movwf	calc_chunk@i,c
  3886  0070DE                     l1603:
  3887  0070DE  BE19               	btfsc	calc_chunk@i+1,7,c
  3888  0070E0  D00F               	goto	u1270
  3889                           
  3890                           ;main.c: 189: chunk[i] = (uint8_t) len;
  3891  0070E2  5018               	movf	calc_chunk@i,w,c
  3892  0070E4  240C               	addwf	calc_chunk@chunk,w,c
  3893  0070E6  6ED9               	movwf	fsr2l,c
  3894  0070E8  5019               	movf	calc_chunk@i+1,w,c
  3895  0070EA  200D               	addwfc	calc_chunk@chunk+1,w,c
  3896  0070EC  6EDA               	movwf	fsr2h,c
  3897  0070EE  C014  FFDF         	movff	calc_chunk@len,indf2
  3898                           
  3899                           ;main.c: 190: len >>= 8;
  3900  0070F2  5015               	movf	calc_chunk@len+1,w,c
  3901  0070F4  6E14               	movwf	calc_chunk@len,c
  3902  0070F6  6A15               	clrf	calc_chunk@len+1,c
  3903  0070F8  0618               	decf	calc_chunk@i,f,c
  3904  0070FA  A0D8               	btfss	status,0,c
  3905  0070FC  0619               	decf	calc_chunk@i+1,f,c
  3906  0070FE  D7EF               	goto	l1603
  3907  007100                     u1270:
  3908                           
  3909                           ;main.c: 191: }
  3910                           ;main.c: 192: state->total_len_delivered = 1;
  3911  007100  EE20 F008          	lfsr	2,8
  3912  007104  500E               	movf	calc_chunk@state,w,c
  3913  007106  26D9               	addwf	fsr2l,f,c
  3914  007108  500F               	movf	calc_chunk@state+1,w,c
  3915  00710A  22DA               	addwfc	fsr2h,f,c
  3916  00710C  0E01               	movlw	1
  3917  00710E  6EDE               	movwf	postinc2,c
  3918  007110  0E00               	movlw	0
  3919  007112  6EDD               	movwf	postdec2,c
  3920                           
  3921                           ;main.c: 193: } else {
  3922  007114  D00E               	goto	l63
  3923  007116                     l60:
  3924                           
  3925                           ;main.c: 195: memset(chunk, 0x00, space_in_chunk);
  3926  007116  C00C  F001         	movff	calc_chunk@chunk,memset@p1
  3927  00711A  C00D  F002         	movff	calc_chunk@chunk+1,memset@p1+1
  3928  00711E  0E00               	movlw	0
  3929  007120  6E04               	movwf	memset@c+1,c
  3930  007122  0E00               	movlw	0
  3931  007124  6E03               	movwf	memset@c,c
  3932  007126  C016  F005         	movff	calc_chunk@space_in_chunk,memset@n
  3933  00712A  C017  F006         	movff	calc_chunk@space_in_chunk+1,memset@n+1
  3934  00712E  EC6B  F033         	call	_memset	;wreg free
  3935  007132                     l63:
  3936                           
  3937                           ;main.c: 196: }
  3938                           ;main.c: 198: return 1;
  3939  007132  0E00               	movlw	0
  3940  007134  6E0D               	movwf	?_calc_chunk+1,c
  3941  007136  0E01               	movlw	1
  3942  007138  6E0C               	movwf	?_calc_chunk,c
  3943  00713A  0012               	return	
  3944  00713C                     __end_of_calc_chunk:
  3945                           	opt stack 0
  3946                           tblptru	equ	0xFF8
  3947                           tblptrh	equ	0xFF7
  3948                           tblptrl	equ	0xFF6
  3949                           tablat	equ	0xFF5
  3950                           prodh	equ	0xFF4
  3951                           prodl	equ	0xFF3
  3952                           postinc0	equ	0xFEE
  3953                           wreg	equ	0xFE8
  3954                           indf1	equ	0xFE7
  3955                           postinc1	equ	0xFE6
  3956                           postdec1	equ	0xFE5
  3957                           plusw1	equ	0xFE3
  3958                           fsr1h	equ	0xFE2
  3959                           fsr1l	equ	0xFE1
  3960                           indf2	equ	0xFDF
  3961                           postinc2	equ	0xFDE
  3962                           postdec2	equ	0xFDD
  3963                           plusw2	equ	0xFDB
  3964                           fsr2h	equ	0xFDA
  3965                           fsr2l	equ	0xFD9
  3966                           status	equ	0xFD8
  3967                           
  3968 ;; *************** function _memset *****************
  3969 ;; Defined at:
  3970 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\memset.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  p1              2    0[COMRAM] PTR void 
  3973 ;;		 -> calc_sha_256@w(256), calc_sha_256@chunk(64), 
  3974 ;;  c               2    2[COMRAM] int 
  3975 ;;  n               2    4[COMRAM] unsigned int 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  p               2    6[COMRAM] PTR unsigned char 
  3978 ;;		 -> calc_sha_256@w(256), calc_sha_256@chunk(64), 
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  2    0[COMRAM] PTR void 
  3981 ;; Registers used:
  3982 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3983 ;; Tracked objects:
  3984 ;;		On entry : 0/0
  3985 ;;		On exit  : 0/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3988 ;;      Params:         6       0       0       0       0       0       0       0       0
  3989 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3990 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3991 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3992 ;;Total ram usage:        8 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; This function calls:
  3995 ;;		Nothing
  3996 ;; This function is called by:
  3997 ;;		_calc_chunk
  3998 ;;		_calc_sha_256
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text10
  4003  0066D6                     __ptext10:
  4004                           	opt stack 0
  4005  0066D6                     _memset:
  4006                           	opt stack 29
  4007                           
  4008                           ;incstack = 0
  4009  0066D6  C001  F007         	movff	memset@p1,memset@p
  4010  0066DA  C002  F008         	movff	memset@p1+1,memset@p+1
  4011  0066DE  D008               	goto	l583
  4012  0066E0                     l1449:
  4013  0066E0  C007  FFD9         	movff	memset@p,fsr2l
  4014  0066E4  C008  FFDA         	movff	memset@p+1,fsr2h
  4015  0066E8  C003  FFDF         	movff	memset@c,indf2
  4016  0066EC  4A07               	infsnz	memset@p,f,c
  4017  0066EE  2A08               	incf	memset@p+1,f,c
  4018  0066F0                     l583:
  4019  0066F0  0605               	decf	memset@n,f,c
  4020  0066F2  A0D8               	btfss	status,0,c
  4021  0066F4  0606               	decf	memset@n+1,f,c
  4022  0066F6  2805               	incf	memset@n,w,c
  4023  0066F8  E1F3               	bnz	l1449
  4024  0066FA  2806               	incf	memset@n+1,w,c
  4025  0066FC  B4D8               	btfsc	status,2,c
  4026  0066FE  0012               	return	
  4027  006700  D7EF               	goto	l584
  4028  006702                     __end_of_memset:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           postinc0	equ	0xFEE
  4037                           wreg	equ	0xFE8
  4038                           indf1	equ	0xFE7
  4039                           postinc1	equ	0xFE6
  4040                           postdec1	equ	0xFE5
  4041                           plusw1	equ	0xFE3
  4042                           fsr1h	equ	0xFE2
  4043                           fsr1l	equ	0xFE1
  4044                           indf2	equ	0xFDF
  4045                           postinc2	equ	0xFDE
  4046                           postdec2	equ	0xFDD
  4047                           plusw2	equ	0xFDB
  4048                           fsr2h	equ	0xFDA
  4049                           fsr2l	equ	0xFD9
  4050                           status	equ	0xFD8
  4051                           
  4052 ;; *************** function _memcpy *****************
  4053 ;; Defined at:
  4054 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\memcpy.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  d1              2    0[COMRAM] PTR void 
  4057 ;;		 -> calc_sha_256@chunk(64), 
  4058 ;;  s1              2    2[COMRAM] PTR const void 
  4059 ;;		 -> string(16), 
  4060 ;;  n               2    4[COMRAM] unsigned int 
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;  s               2    8[COMRAM] PTR const unsigned char 
  4063 ;;		 -> string(16), 
  4064 ;;  d               2    6[COMRAM] PTR unsigned char 
  4065 ;;		 -> calc_sha_256@chunk(64), 
  4066 ;;  tmp             1   10[COMRAM] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  2    0[COMRAM] PTR void 
  4069 ;; Registers used:
  4070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4076 ;;      Params:         6       0       0       0       0       0       0       0       0
  4077 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4078 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4079 ;;      Totals:        11       0       0       0       0       0       0       0       0
  4080 ;;Total ram usage:       11 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; This function calls:
  4083 ;;		Nothing
  4084 ;; This function is called by:
  4085 ;;		_calc_chunk
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text11
  4090  006738                     __ptext11:
  4091                           	opt stack 0
  4092  006738                     _memcpy:
  4093                           	opt stack 28
  4094                           
  4095                           ;incstack = 0
  4096  006738  C003  F009         	movff	memcpy@s1,memcpy@s
  4097  00673C  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  4098  006740  C001  F007         	movff	memcpy@d1,memcpy@d
  4099  006744  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  4100  006748  D011               	goto	l577
  4101  00674A                     l1437:
  4102  00674A  C009  FFF6         	movff	memcpy@s,tblptrl
  4103  00674E  C00A  FFF7         	movff	memcpy@s+1,tblptrh
  4104  006752                     	if	0	;tblptru may be non-zero
  4105  006752                     	endif
  4106  006752                     	if	0	;tblptru may be non-zero
  4107  006752                     	endif
  4108  006752  0008               	tblrd		*
  4109  006754  CFF5 F00B          	movff	tablat,memcpy@tmp
  4110  006758  4A09               	infsnz	memcpy@s,f,c
  4111  00675A  2A0A               	incf	memcpy@s+1,f,c
  4112  00675C  C007  FFD9         	movff	memcpy@d,fsr2l
  4113  006760  C008  FFDA         	movff	memcpy@d+1,fsr2h
  4114  006764  C00B  FFDF         	movff	memcpy@tmp,indf2
  4115  006768  4A07               	infsnz	memcpy@d,f,c
  4116  00676A  2A08               	incf	memcpy@d+1,f,c
  4117  00676C                     l577:
  4118  00676C  0605               	decf	memcpy@n,f,c
  4119  00676E  A0D8               	btfss	status,0,c
  4120  006770  0606               	decf	memcpy@n+1,f,c
  4121  006772  2805               	incf	memcpy@n,w,c
  4122  006774  E1EA               	bnz	l1437
  4123  006776  2806               	incf	memcpy@n+1,w,c
  4124  006778  B4D8               	btfsc	status,2,c
  4125  00677A  0012               	return	
  4126  00677C  D7E6               	goto	l578
  4127  00677E                     __end_of_memcpy:
  4128                           	opt stack 0
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           indf1	equ	0xFE7
  4138                           postinc1	equ	0xFE6
  4139                           postdec1	equ	0xFE5
  4140                           plusw1	equ	0xFE3
  4141                           fsr1h	equ	0xFE2
  4142                           fsr1l	equ	0xFE1
  4143                           indf2	equ	0xFDF
  4144                           postinc2	equ	0xFDE
  4145                           postdec2	equ	0xFDD
  4146                           plusw2	equ	0xFDB
  4147                           fsr2h	equ	0xFDA
  4148                           fsr2l	equ	0xFD9
  4149                           status	equ	0xFD8
  4150                           
  4151 ;; *************** function _USART_SendString *****************
  4152 ;; Defined at:
  4153 ;;		line 81 in file "main.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;  out             2    1[COMRAM] PTR const unsigned char 
  4156 ;;		 -> STR_3(11), STR_2(14), main@hash_string(65), 
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;		None
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      void 
  4161 ;; Registers used:
  4162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4168 ;;      Params:         2       0       0       0       0       0       0       0       0
  4169 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4170 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4171 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4172 ;;Total ram usage:        2 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    1
  4175 ;; This function calls:
  4176 ;;		_USART_TxChar
  4177 ;; This function is called by:
  4178 ;;		_main
  4179 ;; This function uses a non-reentrant model
  4180 ;;
  4181                           
  4182                           	psect	text12
  4183  0067CC                     __ptext12:
  4184                           	opt stack 0
  4185  0067CC                     _USART_SendString:
  4186                           	opt stack 29
  4187                           
  4188                           ;main.c: 83: while(*out!='\0')
  4189                           
  4190                           ;incstack = 0
  4191  0067CC  D014               	goto	l34
  4192  0067CE                     
  4193                           ;main.c: 84: {
  4194                           ;main.c: 85: USART_TxChar(*out);
  4195  0067CE  C002  FFF6         	movff	USART_SendString@out,tblptrl
  4196  0067D2  C003  FFF7         	movff	USART_SendString@out+1,tblptrh
  4197  0067D6  6AF8               	clrf	tblptru,c
  4198  0067D8  0E07               	movlw	(high __ramtop+-1)
  4199  0067DA  64F7               	cpfsgt	tblptrh,c
  4200  0067DC  D003               	bra	u1787
  4201  0067DE  0008               	tblrd		*
  4202  0067E0  50F5               	movf	tablat,w,c
  4203  0067E2  D005               	bra	u1780
  4204  0067E4                     u1787:
  4205  0067E4  CFF6 FFE1          	movff	tblptrl,fsr1l
  4206  0067E8  CFF7 FFE2          	movff	tblptrh,fsr1h
  4207  0067EC  50E7               	movf	indf1,w,c
  4208  0067EE                     u1780:
  4209  0067EE  EC33  F033         	call	_USART_TxChar
  4210                           
  4211                           ;main.c: 86: out++;
  4212  0067F2  4A02               	infsnz	USART_SendString@out,f,c
  4213  0067F4  2A03               	incf	USART_SendString@out+1,f,c
  4214  0067F6                     l34:
  4215  0067F6  C002  FFF6         	movff	USART_SendString@out,tblptrl
  4216  0067FA  C003  FFF7         	movff	USART_SendString@out+1,tblptrh
  4217  0067FE  6AF8               	clrf	tblptru,c
  4218  006800  0E07               	movlw	(high __ramtop+-1)
  4219  006802  64F7               	cpfsgt	tblptrh,c
  4220  006804  D003               	bra	u1797
  4221  006806  0008               	tblrd		*
  4222  006808  50F5               	movf	tablat,w,c
  4223  00680A  D005               	bra	u1790
  4224  00680C                     u1797:
  4225  00680C  CFF6 FFE1          	movff	tblptrl,fsr1l
  4226  006810  CFF7 FFE2          	movff	tblptrh,fsr1h
  4227  006814  50E7               	movf	indf1,w,c
  4228  006816                     u1790:
  4229  006816  0900               	iorlw	0
  4230  006818  B4D8               	btfsc	status,2,c
  4231  00681A  0012               	return	
  4232  00681C  D7D8               	goto	l35
  4233  00681E                     __end_of_USART_SendString:
  4234                           	opt stack 0
  4235                           tblptru	equ	0xFF8
  4236                           tblptrh	equ	0xFF7
  4237                           tblptrl	equ	0xFF6
  4238                           tablat	equ	0xFF5
  4239                           prodh	equ	0xFF4
  4240                           prodl	equ	0xFF3
  4241                           postinc0	equ	0xFEE
  4242                           wreg	equ	0xFE8
  4243                           indf1	equ	0xFE7
  4244                           postinc1	equ	0xFE6
  4245                           postdec1	equ	0xFE5
  4246                           plusw1	equ	0xFE3
  4247                           fsr1h	equ	0xFE2
  4248                           fsr1l	equ	0xFE1
  4249                           indf2	equ	0xFDF
  4250                           postinc2	equ	0xFDE
  4251                           postdec2	equ	0xFDD
  4252                           plusw2	equ	0xFDB
  4253                           fsr2h	equ	0xFDA
  4254                           fsr2l	equ	0xFD9
  4255                           status	equ	0xFD8
  4256                           
  4257 ;; *************** function _USART_TxChar *****************
  4258 ;; Defined at:
  4259 ;;		line 74 in file "main.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;  out             1    wreg     unsigned char 
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;  out             1    0[COMRAM] unsigned char 
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      void 
  4266 ;; Registers used:
  4267 ;;		wreg
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4273 ;;      Params:         0       0       0       0       0       0       0       0       0
  4274 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4276 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4277 ;;Total ram usage:        1 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		_USART_SendString
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text13
  4287  006666                     __ptext13:
  4288                           	opt stack 0
  4289  006666                     _USART_TxChar:
  4290                           	opt stack 29
  4291                           
  4292                           ;incstack = 0
  4293                           ;USART_TxChar@out stored from wreg
  4294  006666  6E01               	movwf	USART_TxChar@out,c
  4295  006668                     
  4296                           ;main.c: 76: while(TXIF==0);
  4297  006668  A89E               	btfss	3998,4,c	;volatile
  4298  00666A  D7FE               	goto	l1531
  4299                           
  4300                           ;main.c: 77: TXREG=out;
  4301  00666C  C001  FFAD         	movff	USART_TxChar@out,4013	;volatile
  4302  006670  0012               	return		;funcret
  4303  006672                     __end_of_USART_TxChar:
  4304                           	opt stack 0
  4305                           tblptru	equ	0xFF8
  4306                           tblptrh	equ	0xFF7
  4307                           tblptrl	equ	0xFF6
  4308                           tablat	equ	0xFF5
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           postinc0	equ	0xFEE
  4312                           wreg	equ	0xFE8
  4313                           indf1	equ	0xFE7
  4314                           postinc1	equ	0xFE6
  4315                           postdec1	equ	0xFE5
  4316                           plusw1	equ	0xFE3
  4317                           fsr1h	equ	0xFE2
  4318                           fsr1l	equ	0xFE1
  4319                           indf2	equ	0xFDF
  4320                           postinc2	equ	0xFDE
  4321                           postdec2	equ	0xFDD
  4322                           plusw2	equ	0xFDB
  4323                           fsr2h	equ	0xFDA
  4324                           fsr2l	equ	0xFD9
  4325                           status	equ	0xFD8
  4326                           
  4327 ;; *************** function _USART_Init *****************
  4328 ;; Defined at:
  4329 ;;		line 63 in file "main.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  baud_rate       4   45[COMRAM] long 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  temp            3   49[COMRAM] float 
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  1    wreg      void 
  4336 ;; Registers used:
  4337 ;;		wreg, status,2, status,0, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4343 ;;      Params:         4       0       0       0       0       0       0       0       0
  4344 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4345 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4346 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4347 ;;Total ram usage:        7 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    2
  4350 ;; This function calls:
  4351 ;;		___altoft
  4352 ;;		___ftadd
  4353 ;;		___ftdiv
  4354 ;;		___fttol
  4355 ;; This function is called by:
  4356 ;;		_main
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text14
  4361  0069B4                     __ptext14:
  4362                           	opt stack 0
  4363  0069B4                     _USART_Init:
  4364                           	opt stack 28
  4365                           
  4366                           ;main.c: 65: float temp;
  4367                           ;main.c: 66: TRISC6=0;
  4368                           
  4369                           ;incstack = 0
  4370  0069B4  9C94               	bcf	3988,6,c	;volatile
  4371                           
  4372                           ;main.c: 67: TRISC7=1;
  4373  0069B6  8E94               	bsf	3988,7,c	;volatile
  4374                           
  4375                           ;main.c: 68: temp=(((float)(8000000/64)/(float)baud_rate)-1);
  4376  0069B8  C02E  F009         	movff	USART_Init@baud_rate,___altoft@c
  4377  0069BC  C02F  F00A         	movff	USART_Init@baud_rate+1,___altoft@c+1
  4378  0069C0  C030  F00B         	movff	USART_Init@baud_rate+2,___altoft@c+2
  4379  0069C4  C031  F00C         	movff	USART_Init@baud_rate+3,___altoft@c+3
  4380  0069C8  EC9E  F034         	call	___altoft	;wreg free
  4381  0069CC  C009  F016         	movff	?___altoft,___ftdiv@f2
  4382  0069D0  C00A  F017         	movff	?___altoft+1,___ftdiv@f2+1
  4383  0069D4  C00B  F018         	movff	?___altoft+2,___ftdiv@f2+2
  4384  0069D8  0E24               	movlw	36
  4385  0069DA  6E13               	movwf	___ftdiv@f1,c
  4386  0069DC  0EF4               	movlw	244
  4387  0069DE  6E14               	movwf	___ftdiv@f1+1,c
  4388  0069E0  0E47               	movlw	71
  4389  0069E2  6E15               	movwf	___ftdiv@f1+2,c
  4390  0069E4  ECB9  F035         	call	___ftdiv	;wreg free
  4391  0069E8  C013  F022         	movff	?___ftdiv,___ftadd@f1
  4392  0069EC  C014  F023         	movff	?___ftdiv+1,___ftadd@f1+1
  4393  0069F0  C015  F024         	movff	?___ftdiv+2,___ftadd@f1+2
  4394  0069F4  0E00               	movlw	0
  4395  0069F6  6E25               	movwf	___ftadd@f2,c
  4396  0069F8  0E80               	movlw	128
  4397  0069FA  6E26               	movwf	___ftadd@f2+1,c
  4398  0069FC  0EBF               	movlw	191
  4399  0069FE  6E27               	movwf	___ftadd@f2+2,c
  4400  006A00  ECA6  F036         	call	___ftadd	;wreg free
  4401  006A04  C022  F032         	movff	?___ftadd,USART_Init@temp
  4402  006A08  C023  F033         	movff	?___ftadd+1,USART_Init@temp+1
  4403  006A0C  C024  F034         	movff	?___ftadd+2,USART_Init@temp+2
  4404                           
  4405                           ;main.c: 69: SPBRG=(int)temp;
  4406  006A10  C032  F001         	movff	USART_Init@temp,___fttol@f1
  4407  006A14  C033  F002         	movff	USART_Init@temp+1,___fttol@f1+1
  4408  006A18  C034  F003         	movff	USART_Init@temp+2,___fttol@f1+2
  4409  006A1C  EC2C  F036         	call	___fttol	;wreg free
  4410  006A20  5001               	movf	?___fttol,w,c
  4411  006A22  6EAF               	movwf	4015,c	;volatile
  4412                           
  4413                           ;main.c: 70: TXSTA=0x20;
  4414  006A24  0E20               	movlw	32
  4415  006A26  6EAC               	movwf	4012,c	;volatile
  4416                           
  4417                           ;main.c: 71: RCSTA=0x80;
  4418  006A28  0E80               	movlw	128
  4419  006A2A  6EAB               	movwf	4011,c	;volatile
  4420  006A2C  0012               	return		;funcret
  4421  006A2E                     __end_of_USART_Init:
  4422                           	opt stack 0
  4423                           tblptru	equ	0xFF8
  4424                           tblptrh	equ	0xFF7
  4425                           tblptrl	equ	0xFF6
  4426                           tablat	equ	0xFF5
  4427                           prodh	equ	0xFF4
  4428                           prodl	equ	0xFF3
  4429                           postinc0	equ	0xFEE
  4430                           wreg	equ	0xFE8
  4431                           indf1	equ	0xFE7
  4432                           postinc1	equ	0xFE6
  4433                           postdec1	equ	0xFE5
  4434                           plusw1	equ	0xFE3
  4435                           fsr1h	equ	0xFE2
  4436                           fsr1l	equ	0xFE1
  4437                           indf2	equ	0xFDF
  4438                           postinc2	equ	0xFDE
  4439                           postdec2	equ	0xFDD
  4440                           plusw2	equ	0xFDB
  4441                           fsr2h	equ	0xFDA
  4442                           fsr2l	equ	0xFD9
  4443                           status	equ	0xFD8
  4444                           
  4445 ;; *************** function ___fttol *****************
  4446 ;; Defined at:
  4447 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\fttol.c"
  4448 ;; Parameters:    Size  Location     Type
  4449 ;;  f1              3    0[COMRAM] float 
  4450 ;; Auto vars:     Size  Location     Type
  4451 ;;  lval            4   10[COMRAM] unsigned long 
  4452 ;;  exp1            1   14[COMRAM] unsigned char 
  4453 ;;  sign1           1    9[COMRAM] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  4    0[COMRAM] long 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4463 ;;      Params:         4       0       0       0       0       0       0       0       0
  4464 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4465 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4466 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4467 ;;Total ram usage:       15 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; This function calls:
  4470 ;;		Nothing
  4471 ;; This function is called by:
  4472 ;;		_USART_Init
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text15
  4477  006C58                     __ptext15:
  4478                           	opt stack 0
  4479  006C58                     ___fttol:
  4480                           	opt stack 29
  4481                           
  4482                           ;incstack = 0
  4483  006C58  C003  F005         	movff	___fttol@f1+2,??___fttol
  4484  006C5C  6A06               	clrf	(??___fttol+1)& (0+255),c
  4485  006C5E  6A07               	clrf	(??___fttol+2)& (0+255),c
  4486  006C60  3402               	rlcf	___fttol@f1+1,w,c
  4487  006C62  3605               	rlcf	??___fttol& (0+255),f,c
  4488  006C64  E301               	bnc	u1701
  4489  006C66  8006               	bsf	(??___fttol+1)& (0+255),0,c
  4490  006C68                     u1701:
  4491  006C68  5005               	movf	??___fttol,w,c
  4492  006C6A  6E0F               	movwf	___fttol@exp1,c
  4493  006C6C  500F               	movf	___fttol@exp1,w,c
  4494  006C6E  A4D8               	btfss	status,2,c
  4495  006C70  D009               	goto	l459
  4496  006C72  0E00               	movlw	0
  4497  006C74  6E01               	movwf	?___fttol,c
  4498  006C76  0E00               	movlw	0
  4499  006C78  6E02               	movwf	?___fttol+1,c
  4500  006C7A  0E00               	movlw	0
  4501  006C7C  6E03               	movwf	?___fttol+2,c
  4502  006C7E  0E00               	movlw	0
  4503  006C80  6E04               	movwf	?___fttol+3,c
  4504  006C82  0012               	return	
  4505  006C84                     l459:
  4506  006C84  0E17               	movlw	23
  4507  006C86  6E05               	movwf	??___fttol& (0+255),c
  4508  006C88  C001  F006         	movff	___fttol@f1,??___fttol+1
  4509  006C8C  C002  F007         	movff	___fttol@f1+1,??___fttol+2
  4510  006C90  C003  F008         	movff	___fttol@f1+2,??___fttol+3
  4511  006C94  2805               	incf	??___fttol,w,c
  4512  006C96  6E09               	movwf	(??___fttol+4)& (0+255),c
  4513  006C98  D004               	goto	u1720
  4514  006C9A                     u1725:
  4515  006C9A  90D8               	bcf	status,0,c
  4516  006C9C  3208               	rrcf	??___fttol+3,f,c
  4517  006C9E  3207               	rrcf	??___fttol+2,f,c
  4518  006CA0  3206               	rrcf	??___fttol+1,f,c
  4519  006CA2                     u1720:
  4520  006CA2  2E09               	decfsz	(??___fttol+4)& (0+255),f,c
  4521  006CA4  D7FA               	goto	u1725
  4522  006CA6  5006               	movf	??___fttol+1,w,c
  4523  006CA8  6E0A               	movwf	___fttol@sign1,c
  4524  006CAA  8E02               	bsf	___fttol@f1+1,7,c
  4525  006CAC  0EFF               	movlw	255
  4526  006CAE  1601               	andwf	___fttol@f1,f,c
  4527  006CB0  0EFF               	movlw	255
  4528  006CB2  1602               	andwf	___fttol@f1+1,f,c
  4529  006CB4  0E00               	movlw	0
  4530  006CB6  1603               	andwf	___fttol@f1+2,f,c
  4531  006CB8  5001               	movf	___fttol@f1,w,c
  4532  006CBA  6E0B               	movwf	___fttol@lval,c
  4533  006CBC  5002               	movf	___fttol@f1+1,w,c
  4534  006CBE  6E0C               	movwf	___fttol@lval+1,c
  4535  006CC0  5003               	movf	___fttol@f1+2,w,c
  4536  006CC2  6E0D               	movwf	___fttol@lval+2,c
  4537  006CC4  6A0E               	clrf	___fttol@lval+3,c
  4538  006CC6  0E8E               	movlw	142
  4539  006CC8  5E0F               	subwf	___fttol@exp1,f,c
  4540  006CCA  AE0F               	btfss	___fttol@exp1,7,c
  4541  006CCC  D016               	goto	l461
  4542  006CCE  500F               	movf	___fttol@exp1,w,c
  4543  006CD0  0A80               	xorlw	128
  4544  006CD2  0F8F               	addlw	143
  4545  006CD4  B0D8               	btfsc	status,0,c
  4546  006CD6  D009               	goto	l462
  4547  006CD8  0E00               	movlw	0
  4548  006CDA  6E01               	movwf	?___fttol,c
  4549  006CDC  0E00               	movlw	0
  4550  006CDE  6E02               	movwf	?___fttol+1,c
  4551  006CE0  0E00               	movlw	0
  4552  006CE2  6E03               	movwf	?___fttol+2,c
  4553  006CE4  0E00               	movlw	0
  4554  006CE6  6E04               	movwf	?___fttol+3,c
  4555  006CE8  0012               	return	
  4556  006CEA                     l462:
  4557  006CEA  90D8               	bcf	status,0,c
  4558  006CEC  320E               	rrcf	___fttol@lval+3,f,c
  4559  006CEE  320D               	rrcf	___fttol@lval+2,f,c
  4560  006CF0  320C               	rrcf	___fttol@lval+1,f,c
  4561  006CF2  320B               	rrcf	___fttol@lval,f,c
  4562  006CF4  3E0F               	incfsz	___fttol@exp1,f,c
  4563  006CF6  D7F9               	goto	l462
  4564  006CF8  D015               	goto	u1760
  4565  006CFA                     l461:
  4566  006CFA  0E17               	movlw	23
  4567  006CFC  640F               	cpfsgt	___fttol@exp1,c
  4568  006CFE  D00F               	goto	l467
  4569  006D00  0E00               	movlw	0
  4570  006D02  6E01               	movwf	?___fttol,c
  4571  006D04  0E00               	movlw	0
  4572  006D06  6E02               	movwf	?___fttol+1,c
  4573  006D08  0E00               	movlw	0
  4574  006D0A  6E03               	movwf	?___fttol+2,c
  4575  006D0C  0E00               	movlw	0
  4576  006D0E  6E04               	movwf	?___fttol+3,c
  4577  006D10  0012               	return	
  4578  006D12  90D8               	bcf	status,0,c
  4579  006D14  360B               	rlcf	___fttol@lval,f,c
  4580  006D16  360C               	rlcf	___fttol@lval+1,f,c
  4581  006D18  360D               	rlcf	___fttol@lval+2,f,c
  4582  006D1A  360E               	rlcf	___fttol@lval+3,f,c
  4583  006D1C  060F               	decf	___fttol@exp1,f,c
  4584  006D1E                     l467:
  4585  006D1E  500F               	movf	___fttol@exp1,w,c
  4586  006D20  A4D8               	btfss	status,2,c
  4587  006D22  D7F7               	goto	l468
  4588  006D24                     u1760:
  4589  006D24  500A               	movf	___fttol@sign1,w,c
  4590  006D26  B4D8               	btfsc	status,2,c
  4591  006D28  D008               	goto	l470
  4592  006D2A  1E0E               	comf	___fttol@lval+3,f,c
  4593  006D2C  1E0D               	comf	___fttol@lval+2,f,c
  4594  006D2E  1E0C               	comf	___fttol@lval+1,f,c
  4595  006D30  6C0B               	negf	___fttol@lval,c
  4596  006D32  0E00               	movlw	0
  4597  006D34  220C               	addwfc	___fttol@lval+1,f,c
  4598  006D36  220D               	addwfc	___fttol@lval+2,f,c
  4599  006D38  220E               	addwfc	___fttol@lval+3,f,c
  4600  006D3A                     l470:
  4601  006D3A  C00B  F001         	movff	___fttol@lval,?___fttol
  4602  006D3E  C00C  F002         	movff	___fttol@lval+1,?___fttol+1
  4603  006D42  C00D  F003         	movff	___fttol@lval+2,?___fttol+2
  4604  006D46  C00E  F004         	movff	___fttol@lval+3,?___fttol+3
  4605  006D4A  0012               	return	
  4606  006D4C                     __end_of___fttol:
  4607                           	opt stack 0
  4608                           tblptru	equ	0xFF8
  4609                           tblptrh	equ	0xFF7
  4610                           tblptrl	equ	0xFF6
  4611                           tablat	equ	0xFF5
  4612                           prodh	equ	0xFF4
  4613                           prodl	equ	0xFF3
  4614                           postinc0	equ	0xFEE
  4615                           wreg	equ	0xFE8
  4616                           indf1	equ	0xFE7
  4617                           postinc1	equ	0xFE6
  4618                           postdec1	equ	0xFE5
  4619                           plusw1	equ	0xFE3
  4620                           fsr1h	equ	0xFE2
  4621                           fsr1l	equ	0xFE1
  4622                           indf2	equ	0xFDF
  4623                           postinc2	equ	0xFDE
  4624                           postdec2	equ	0xFDD
  4625                           plusw2	equ	0xFDB
  4626                           fsr2h	equ	0xFDA
  4627                           fsr2l	equ	0xFD9
  4628                           status	equ	0xFD8
  4629                           
  4630 ;; *************** function ___ftdiv *****************
  4631 ;; Defined at:
  4632 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  f1              3   18[COMRAM] float 
  4635 ;;  f2              3   21[COMRAM] float 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  f3              3   28[COMRAM] float 
  4638 ;;  sign            1   32[COMRAM] unsigned char 
  4639 ;;  exp             1   31[COMRAM] unsigned char 
  4640 ;;  cntr            1   27[COMRAM] unsigned char 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  3   18[COMRAM] float 
  4643 ;; Registers used:
  4644 ;;		wreg, status,2, status,0, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4650 ;;      Params:         6       0       0       0       0       0       0       0       0
  4651 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4652 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4653 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4654 ;;Total ram usage:       15 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:    1
  4657 ;; This function calls:
  4658 ;;		___ftpack
  4659 ;; This function is called by:
  4660 ;;		_USART_Init
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           	psect	text16
  4665  006B72                     __ptext16:
  4666                           	opt stack 0
  4667  006B72                     ___ftdiv:
  4668                           	opt stack 28
  4669                           
  4670                           ;incstack = 0
  4671  006B72  C015  F019         	movff	___ftdiv@f1+2,??___ftdiv
  4672  006B76  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  4673  006B78  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  4674  006B7A  3414               	rlcf	___ftdiv@f1+1,w,c
  4675  006B7C  3619               	rlcf	??___ftdiv& (0+255),f,c
  4676  006B7E  E301               	bnc	u1651
  4677  006B80  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  4678  006B82                     u1651:
  4679  006B82  5019               	movf	??___ftdiv,w,c
  4680  006B84  6E20               	movwf	___ftdiv@exp,c
  4681  006B86  5020               	movf	___ftdiv@exp,w,c
  4682  006B88  A4D8               	btfss	status,2,c
  4683  006B8A  D007               	goto	l423
  4684  006B8C  0E00               	movlw	0
  4685  006B8E  6E13               	movwf	?___ftdiv,c
  4686  006B90  0E00               	movlw	0
  4687  006B92  6E14               	movwf	?___ftdiv+1,c
  4688  006B94  0E00               	movlw	0
  4689  006B96  6E15               	movwf	?___ftdiv+2,c
  4690  006B98  0012               	return	
  4691  006B9A                     l423:
  4692  006B9A  C018  F019         	movff	___ftdiv@f2+2,??___ftdiv
  4693  006B9E  6A1A               	clrf	(??___ftdiv+1)& (0+255),c
  4694  006BA0  6A1B               	clrf	(??___ftdiv+2)& (0+255),c
  4695  006BA2  3417               	rlcf	___ftdiv@f2+1,w,c
  4696  006BA4  3619               	rlcf	??___ftdiv& (0+255),f,c
  4697  006BA6  E301               	bnc	u1671
  4698  006BA8  801A               	bsf	(??___ftdiv+1)& (0+255),0,c
  4699  006BAA                     u1671:
  4700  006BAA  5019               	movf	??___ftdiv,w,c
  4701  006BAC  6E21               	movwf	___ftdiv@sign,c
  4702  006BAE  5021               	movf	___ftdiv@sign,w,c
  4703  006BB0  A4D8               	btfss	status,2,c
  4704  006BB2  D007               	goto	l425
  4705  006BB4  0E00               	movlw	0
  4706  006BB6  6E13               	movwf	?___ftdiv,c
  4707  006BB8  0E00               	movlw	0
  4708  006BBA  6E14               	movwf	?___ftdiv+1,c
  4709  006BBC  0E00               	movlw	0
  4710  006BBE  6E15               	movwf	?___ftdiv+2,c
  4711  006BC0  0012               	return	
  4712  006BC2                     l425:
  4713  006BC2  0E00               	movlw	0
  4714  006BC4  6E1D               	movwf	___ftdiv@f3,c
  4715  006BC6  0E00               	movlw	0
  4716  006BC8  6E1E               	movwf	___ftdiv@f3+1,c
  4717  006BCA  0E00               	movlw	0
  4718  006BCC  6E1F               	movwf	___ftdiv@f3+2,c
  4719  006BCE  5021               	movf	___ftdiv@sign,w,c
  4720  006BD0  0F89               	addlw	137
  4721  006BD2  5E20               	subwf	___ftdiv@exp,f,c
  4722  006BD4  C015  F021         	movff	___ftdiv@f1+2,___ftdiv@sign
  4723  006BD8  5018               	movf	___ftdiv@f2+2,w,c
  4724  006BDA  1A21               	xorwf	___ftdiv@sign,f,c
  4725  006BDC  0E80               	movlw	128
  4726  006BDE  1621               	andwf	___ftdiv@sign,f,c
  4727  006BE0  8E14               	bsf	___ftdiv@f1+1,7,c
  4728  006BE2  0EFF               	movlw	255
  4729  006BE4  1613               	andwf	___ftdiv@f1,f,c
  4730  006BE6  0EFF               	movlw	255
  4731  006BE8  1614               	andwf	___ftdiv@f1+1,f,c
  4732  006BEA  0E00               	movlw	0
  4733  006BEC  1615               	andwf	___ftdiv@f1+2,f,c
  4734  006BEE  8E17               	bsf	___ftdiv@f2+1,7,c
  4735  006BF0  0EFF               	movlw	255
  4736  006BF2  1616               	andwf	___ftdiv@f2,f,c
  4737  006BF4  0EFF               	movlw	255
  4738  006BF6  1617               	andwf	___ftdiv@f2+1,f,c
  4739  006BF8  0E00               	movlw	0
  4740  006BFA  1618               	andwf	___ftdiv@f2+2,f,c
  4741  006BFC  0E18               	movlw	24
  4742  006BFE  6E1C               	movwf	___ftdiv@cntr,c
  4743  006C00  90D8               	bcf	status,0,c
  4744  006C02  361D               	rlcf	___ftdiv@f3,f,c
  4745  006C04  361E               	rlcf	___ftdiv@f3+1,f,c
  4746  006C06  361F               	rlcf	___ftdiv@f3+2,f,c
  4747  006C08  5016               	movf	___ftdiv@f2,w,c
  4748  006C0A  5C13               	subwf	___ftdiv@f1,w,c
  4749  006C0C  5017               	movf	___ftdiv@f2+1,w,c
  4750  006C0E  5814               	subwfb	___ftdiv@f1+1,w,c
  4751  006C10  5018               	movf	___ftdiv@f2+2,w,c
  4752  006C12  5815               	subwfb	___ftdiv@f1+2,w,c
  4753  006C14  A0D8               	btfss	status,0,c
  4754  006C16  D007               	goto	l427
  4755  006C18  5016               	movf	___ftdiv@f2,w,c
  4756  006C1A  5E13               	subwf	___ftdiv@f1,f,c
  4757  006C1C  5017               	movf	___ftdiv@f2+1,w,c
  4758  006C1E  5A14               	subwfb	___ftdiv@f1+1,f,c
  4759  006C20  5018               	movf	___ftdiv@f2+2,w,c
  4760  006C22  5A15               	subwfb	___ftdiv@f1+2,f,c
  4761  006C24  801D               	bsf	___ftdiv@f3,0,c
  4762  006C26                     l427:
  4763  006C26  90D8               	bcf	status,0,c
  4764  006C28  3613               	rlcf	___ftdiv@f1,f,c
  4765  006C2A  3614               	rlcf	___ftdiv@f1+1,f,c
  4766  006C2C  3615               	rlcf	___ftdiv@f1+2,f,c
  4767  006C2E  2E1C               	decfsz	___ftdiv@cntr,f,c
  4768  006C30  D7E7               	goto	l426
  4769  006C32  C01D  F001         	movff	___ftdiv@f3,___ftpack@arg
  4770  006C36  C01E  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4771  006C3A  C01F  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4772  006C3E  C020  F004         	movff	___ftdiv@exp,___ftpack@exp
  4773  006C42  C021  F005         	movff	___ftdiv@sign,___ftpack@sign
  4774  006C46  EC62  F035         	call	___ftpack	;wreg free
  4775  006C4A  C001  F013         	movff	?___ftpack,?___ftdiv
  4776  006C4E  C002  F014         	movff	?___ftpack+1,?___ftdiv+1
  4777  006C52  C003  F015         	movff	?___ftpack+2,?___ftdiv+2
  4778  006C56  0012               	return	
  4779  006C58                     __end_of___ftdiv:
  4780                           	opt stack 0
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           prodh	equ	0xFF4
  4786                           prodl	equ	0xFF3
  4787                           postinc0	equ	0xFEE
  4788                           wreg	equ	0xFE8
  4789                           indf1	equ	0xFE7
  4790                           postinc1	equ	0xFE6
  4791                           postdec1	equ	0xFE5
  4792                           plusw1	equ	0xFE3
  4793                           fsr1h	equ	0xFE2
  4794                           fsr1l	equ	0xFE1
  4795                           indf2	equ	0xFDF
  4796                           postinc2	equ	0xFDE
  4797                           postdec2	equ	0xFDD
  4798                           plusw2	equ	0xFDB
  4799                           fsr2h	equ	0xFDA
  4800                           fsr2l	equ	0xFD9
  4801                           status	equ	0xFD8
  4802                           
  4803 ;; *************** function ___ftadd *****************
  4804 ;; Defined at:
  4805 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  f1              3   33[COMRAM] float 
  4808 ;;  f2              3   36[COMRAM] float 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  exp1            1   44[COMRAM] unsigned char 
  4811 ;;  exp2            1   43[COMRAM] unsigned char 
  4812 ;;  sign            1   42[COMRAM] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  3   33[COMRAM] float 
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4822 ;;      Params:         6       0       0       0       0       0       0       0       0
  4823 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4824 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4825 ;;      Totals:        12       0       0       0       0       0       0       0       0
  4826 ;;Total ram usage:       12 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    1
  4829 ;; This function calls:
  4830 ;;		___ftpack
  4831 ;; This function is called by:
  4832 ;;		_USART_Init
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text17
  4837  006D4C                     __ptext17:
  4838                           	opt stack 0
  4839  006D4C                     ___ftadd:
  4840                           	opt stack 28
  4841                           
  4842                           ;incstack = 0
  4843  006D4C  C024  F028         	movff	___ftadd@f1+2,??___ftadd
  4844  006D50  6A29               	clrf	(??___ftadd+1)& (0+255),c
  4845  006D52  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  4846  006D54  3423               	rlcf	___ftadd@f1+1,w,c
  4847  006D56  3628               	rlcf	??___ftadd& (0+255),f,c
  4848  006D58  E301               	bnc	u1441
  4849  006D5A  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  4850  006D5C                     u1441:
  4851  006D5C  5028               	movf	??___ftadd,w,c
  4852  006D5E  6E2D               	movwf	___ftadd@exp1,c
  4853  006D60  C027  F028         	movff	___ftadd@f2+2,??___ftadd
  4854  006D64  6A29               	clrf	(??___ftadd+1)& (0+255),c
  4855  006D66  6A2A               	clrf	(??___ftadd+2)& (0+255),c
  4856  006D68  3426               	rlcf	___ftadd@f2+1,w,c
  4857  006D6A  3628               	rlcf	??___ftadd& (0+255),f,c
  4858  006D6C  E301               	bnc	u1451
  4859  006D6E  8029               	bsf	(??___ftadd+1)& (0+255),0,c
  4860  006D70                     u1451:
  4861  006D70  5028               	movf	??___ftadd,w,c
  4862  006D72  6E2C               	movwf	___ftadd@exp2,c
  4863  006D74  502D               	movf	___ftadd@exp1,w,c
  4864  006D76  B4D8               	btfsc	status,2,c
  4865  006D78  D00B               	goto	u1480
  4866  006D7A  502C               	movf	___ftadd@exp2,w,c
  4867  006D7C  5C2D               	subwf	___ftadd@exp1,w,c
  4868  006D7E  B0D8               	btfsc	status,0,c
  4869  006D80  D00E               	goto	l390
  4870  006D82  502D               	movf	___ftadd@exp1,w,c
  4871  006D84  0800               	sublw	0
  4872  006D86  242C               	addwf	___ftadd@exp2,w,c
  4873  006D88  6E28               	movwf	??___ftadd& (0+255),c
  4874  006D8A  0E18               	movlw	24
  4875  006D8C  6428               	cpfsgt	??___ftadd,c
  4876  006D8E  D007               	goto	l390
  4877  006D90                     u1480:
  4878  006D90  C025  F022         	movff	___ftadd@f2,?___ftadd
  4879  006D94  C026  F023         	movff	___ftadd@f2+1,?___ftadd+1
  4880  006D98  C027  F024         	movff	___ftadd@f2+2,?___ftadd+2
  4881  006D9C  0012               	return	
  4882  006D9E                     l390:
  4883  006D9E  502C               	movf	___ftadd@exp2,w,c
  4884  006DA0  B4D8               	btfsc	status,2,c
  4885  006DA2  D00B               	goto	u1510
  4886  006DA4  502D               	movf	___ftadd@exp1,w,c
  4887  006DA6  5C2C               	subwf	___ftadd@exp2,w,c
  4888  006DA8  B0D8               	btfsc	status,0,c
  4889  006DAA  D00E               	goto	l394
  4890  006DAC  502C               	movf	___ftadd@exp2,w,c
  4891  006DAE  0800               	sublw	0
  4892  006DB0  242D               	addwf	___ftadd@exp1,w,c
  4893  006DB2  6E28               	movwf	??___ftadd& (0+255),c
  4894  006DB4  0E18               	movlw	24
  4895  006DB6  6428               	cpfsgt	??___ftadd,c
  4896  006DB8  D007               	goto	l394
  4897  006DBA                     u1510:
  4898  006DBA  C022  F022         	movff	___ftadd@f1,?___ftadd
  4899  006DBE  C023  F023         	movff	___ftadd@f1+1,?___ftadd+1
  4900  006DC2  C024  F024         	movff	___ftadd@f1+2,?___ftadd+2
  4901  006DC6  0012               	return	
  4902  006DC8                     l394:
  4903  006DC8  0E06               	movlw	6
  4904  006DCA  6E2B               	movwf	___ftadd@sign,c
  4905  006DCC  BE24               	btfsc	___ftadd@f1+2,7,c
  4906  006DCE  8E2B               	bsf	___ftadd@sign,7,c
  4907  006DD0  BE27               	btfsc	___ftadd@f2+2,7,c
  4908  006DD2  8C2B               	bsf	___ftadd@sign,6,c
  4909  006DD4  8E23               	bsf	___ftadd@f1+1,7,c
  4910  006DD6  0EFF               	movlw	255
  4911  006DD8  1622               	andwf	___ftadd@f1,f,c
  4912  006DDA  0EFF               	movlw	255
  4913  006DDC  1623               	andwf	___ftadd@f1+1,f,c
  4914  006DDE  0E00               	movlw	0
  4915  006DE0  1624               	andwf	___ftadd@f1+2,f,c
  4916  006DE2  8E26               	bsf	___ftadd@f2+1,7,c
  4917  006DE4  0EFF               	movlw	255
  4918  006DE6  1625               	andwf	___ftadd@f2,f,c
  4919  006DE8  0EFF               	movlw	255
  4920  006DEA  1626               	andwf	___ftadd@f2+1,f,c
  4921  006DEC  0E00               	movlw	0
  4922  006DEE  1627               	andwf	___ftadd@f2+2,f,c
  4923  006DF0  502C               	movf	___ftadd@exp2,w,c
  4924  006DF2  5C2D               	subwf	___ftadd@exp1,w,c
  4925  006DF4  B0D8               	btfsc	status,0,c
  4926  006DF6  D01B               	goto	l399
  4927  006DF8                     u1540:
  4928  006DF8  90D8               	bcf	status,0,c
  4929  006DFA  3625               	rlcf	___ftadd@f2,f,c
  4930  006DFC  3626               	rlcf	___ftadd@f2+1,f,c
  4931  006DFE  3627               	rlcf	___ftadd@f2+2,f,c
  4932  006E00  062C               	decf	___ftadd@exp2,f,c
  4933  006E02  502D               	movf	___ftadd@exp1,w,c
  4934  006E04  182C               	xorwf	___ftadd@exp2,w,c
  4935  006E06  B4D8               	btfsc	status,2,c
  4936  006E08  D00D               	goto	l404
  4937  006E0A  062B               	decf	___ftadd@sign,f,c
  4938  006E0C  C02B  F028         	movff	___ftadd@sign,??___ftadd
  4939  006E10  0E07               	movlw	7
  4940  006E12  1628               	andwf	??___ftadd,f,c
  4941  006E14  B4D8               	btfsc	status,2,c
  4942  006E16  D006               	goto	l404
  4943  006E18  D7EF               	goto	u1540
  4944  006E1A  90D8               	bcf	status,0,c
  4945  006E1C  3224               	rrcf	___ftadd@f1+2,f,c
  4946  006E1E  3223               	rrcf	___ftadd@f1+1,f,c
  4947  006E20  3222               	rrcf	___ftadd@f1,f,c
  4948  006E22  2A2D               	incf	___ftadd@exp1,f,c
  4949  006E24                     l404:
  4950  006E24  502C               	movf	___ftadd@exp2,w,c
  4951  006E26  182D               	xorwf	___ftadd@exp1,w,c
  4952  006E28  B4D8               	btfsc	status,2,c
  4953  006E2A  D01F               	goto	u1610
  4954  006E2C  D7F6               	goto	l405
  4955  006E2E                     l399:
  4956  006E2E  502D               	movf	___ftadd@exp1,w,c
  4957  006E30  5C2C               	subwf	___ftadd@exp2,w,c
  4958  006E32  B0D8               	btfsc	status,0,c
  4959  006E34  D01A               	goto	u1610
  4960  006E36                     u1580:
  4961  006E36  90D8               	bcf	status,0,c
  4962  006E38  3622               	rlcf	___ftadd@f1,f,c
  4963  006E3A  3623               	rlcf	___ftadd@f1+1,f,c
  4964  006E3C  3624               	rlcf	___ftadd@f1+2,f,c
  4965  006E3E  062D               	decf	___ftadd@exp1,f,c
  4966  006E40  502D               	movf	___ftadd@exp1,w,c
  4967  006E42  182C               	xorwf	___ftadd@exp2,w,c
  4968  006E44  B4D8               	btfsc	status,2,c
  4969  006E46  D00D               	goto	l413
  4970  006E48  062B               	decf	___ftadd@sign,f,c
  4971  006E4A  C02B  F028         	movff	___ftadd@sign,??___ftadd
  4972  006E4E  0E07               	movlw	7
  4973  006E50  1628               	andwf	??___ftadd,f,c
  4974  006E52  B4D8               	btfsc	status,2,c
  4975  006E54  D006               	goto	l413
  4976  006E56  D7EF               	goto	u1580
  4977  006E58  90D8               	bcf	status,0,c
  4978  006E5A  3227               	rrcf	___ftadd@f2+2,f,c
  4979  006E5C  3226               	rrcf	___ftadd@f2+1,f,c
  4980  006E5E  3225               	rrcf	___ftadd@f2,f,c
  4981  006E60  2A2C               	incf	___ftadd@exp2,f,c
  4982  006E62                     l413:
  4983  006E62  502C               	movf	___ftadd@exp2,w,c
  4984  006E64  182D               	xorwf	___ftadd@exp1,w,c
  4985  006E66  A4D8               	btfss	status,2,c
  4986  006E68  D7F7               	goto	l414
  4987  006E6A                     u1610:
  4988  006E6A  AE2B               	btfss	___ftadd@sign,7,c
  4989  006E6C  D00C               	goto	l416
  4990  006E6E  0EFF               	movlw	255
  4991  006E70  1A22               	xorwf	___ftadd@f1,f,c
  4992  006E72  0EFF               	movlw	255
  4993  006E74  1A23               	xorwf	___ftadd@f1+1,f,c
  4994  006E76  0EFF               	movlw	255
  4995  006E78  1A24               	xorwf	___ftadd@f1+2,f,c
  4996  006E7A  0E01               	movlw	1
  4997  006E7C  2622               	addwf	___ftadd@f1,f,c
  4998  006E7E  0E00               	movlw	0
  4999  006E80  2223               	addwfc	___ftadd@f1+1,f,c
  5000  006E82  0E00               	movlw	0
  5001  006E84  2224               	addwfc	___ftadd@f1+2,f,c
  5002  006E86                     l416:
  5003  006E86  AC2B               	btfss	___ftadd@sign,6,c
  5004  006E88  D00C               	goto	l417
  5005  006E8A  0EFF               	movlw	255
  5006  006E8C  1A25               	xorwf	___ftadd@f2,f,c
  5007  006E8E  0EFF               	movlw	255
  5008  006E90  1A26               	xorwf	___ftadd@f2+1,f,c
  5009  006E92  0EFF               	movlw	255
  5010  006E94  1A27               	xorwf	___ftadd@f2+2,f,c
  5011  006E96  0E01               	movlw	1
  5012  006E98  2625               	addwf	___ftadd@f2,f,c
  5013  006E9A  0E00               	movlw	0
  5014  006E9C  2226               	addwfc	___ftadd@f2+1,f,c
  5015  006E9E  0E00               	movlw	0
  5016  006EA0  2227               	addwfc	___ftadd@f2+2,f,c
  5017  006EA2                     l417:
  5018  006EA2  0E00               	movlw	0
  5019  006EA4  6E2B               	movwf	___ftadd@sign,c
  5020  006EA6  5022               	movf	___ftadd@f1,w,c
  5021  006EA8  2625               	addwf	___ftadd@f2,f,c
  5022  006EAA  5023               	movf	___ftadd@f1+1,w,c
  5023  006EAC  2226               	addwfc	___ftadd@f2+1,f,c
  5024  006EAE  5024               	movf	___ftadd@f1+2,w,c
  5025  006EB0  2227               	addwfc	___ftadd@f2+2,f,c
  5026  006EB2  AE27               	btfss	___ftadd@f2+2,7,c
  5027  006EB4  D00E               	goto	l418
  5028  006EB6  0EFF               	movlw	255
  5029  006EB8  1A25               	xorwf	___ftadd@f2,f,c
  5030  006EBA  0EFF               	movlw	255
  5031  006EBC  1A26               	xorwf	___ftadd@f2+1,f,c
  5032  006EBE  0EFF               	movlw	255
  5033  006EC0  1A27               	xorwf	___ftadd@f2+2,f,c
  5034  006EC2  0E01               	movlw	1
  5035  006EC4  2625               	addwf	___ftadd@f2,f,c
  5036  006EC6  0E00               	movlw	0
  5037  006EC8  2226               	addwfc	___ftadd@f2+1,f,c
  5038  006ECA  0E00               	movlw	0
  5039  006ECC  2227               	addwfc	___ftadd@f2+2,f,c
  5040  006ECE  0E01               	movlw	1
  5041  006ED0  6E2B               	movwf	___ftadd@sign,c
  5042  006ED2                     l418:
  5043  006ED2  C025  F001         	movff	___ftadd@f2,___ftpack@arg
  5044  006ED6  C026  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5045  006EDA  C027  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5046  006EDE  C02D  F004         	movff	___ftadd@exp1,___ftpack@exp
  5047  006EE2  C02B  F005         	movff	___ftadd@sign,___ftpack@sign
  5048  006EE6  EC62  F035         	call	___ftpack	;wreg free
  5049  006EEA  C001  F022         	movff	?___ftpack,?___ftadd
  5050  006EEE  C002  F023         	movff	?___ftpack+1,?___ftadd+1
  5051  006EF2  C003  F024         	movff	?___ftpack+2,?___ftadd+2
  5052  006EF6  0012               	return	
  5053  006EF8                     __end_of___ftadd:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           postinc0	equ	0xFEE
  5062                           wreg	equ	0xFE8
  5063                           indf1	equ	0xFE7
  5064                           postinc1	equ	0xFE6
  5065                           postdec1	equ	0xFE5
  5066                           plusw1	equ	0xFE3
  5067                           fsr1h	equ	0xFE2
  5068                           fsr1l	equ	0xFE1
  5069                           indf2	equ	0xFDF
  5070                           postinc2	equ	0xFDE
  5071                           postdec2	equ	0xFDD
  5072                           plusw2	equ	0xFDB
  5073                           fsr2h	equ	0xFDA
  5074                           fsr2l	equ	0xFD9
  5075                           status	equ	0xFD8
  5076                           
  5077 ;; *************** function ___altoft *****************
  5078 ;; Defined at:
  5079 ;;		line 42 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\altoft.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  c               4    8[COMRAM] long 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  sign            1   17[COMRAM] unsigned char 
  5084 ;;  exp             1   16[COMRAM] unsigned char 
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  3    8[COMRAM] float 
  5087 ;; Registers used:
  5088 ;;		wreg, status,2, status,0, cstack
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 0/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5094 ;;      Params:         4       0       0       0       0       0       0       0       0
  5095 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5096 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5097 ;;      Totals:        10       0       0       0       0       0       0       0       0
  5098 ;;Total ram usage:       10 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:    1
  5101 ;; This function calls:
  5102 ;;		___ftpack
  5103 ;; This function is called by:
  5104 ;;		_USART_Init
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text18
  5109  00693C                     __ptext18:
  5110                           	opt stack 0
  5111  00693C                     ___altoft:
  5112                           	opt stack 28
  5113                           
  5114                           ;incstack = 0
  5115  00693C  0E00               	movlw	0
  5116  00693E  6E12               	movwf	___altoft@sign,c
  5117  006940  0E8E               	movlw	142
  5118  006942  6E11               	movwf	___altoft@exp,c
  5119  006944  AE0C               	btfss	___altoft@c+3,7,c
  5120  006946  D011               	goto	l229
  5121  006948  1E0C               	comf	___altoft@c+3,f,c
  5122  00694A  1E0B               	comf	___altoft@c+2,f,c
  5123  00694C  1E0A               	comf	___altoft@c+1,f,c
  5124  00694E  6C09               	negf	___altoft@c,c
  5125  006950  0E00               	movlw	0
  5126  006952  220A               	addwfc	___altoft@c+1,f,c
  5127  006954  220B               	addwfc	___altoft@c+2,f,c
  5128  006956  220C               	addwfc	___altoft@c+3,f,c
  5129  006958  0E01               	movlw	1
  5130  00695A  6E12               	movwf	___altoft@sign,c
  5131  00695C  D006               	goto	l229
  5132  00695E  90D8               	bcf	status,0,c
  5133  006960  320C               	rrcf	___altoft@c+3,f,c
  5134  006962  320B               	rrcf	___altoft@c+2,f,c
  5135  006964  320A               	rrcf	___altoft@c+1,f,c
  5136  006966  3209               	rrcf	___altoft@c,f,c
  5137  006968  2A11               	incf	___altoft@exp,f,c
  5138  00696A                     l229:
  5139  00696A  0E00               	movlw	0
  5140  00696C  1409               	andwf	___altoft@c,w,c
  5141  00696E  6E0D               	movwf	??___altoft& (0+255),c
  5142  006970  0E00               	movlw	0
  5143  006972  140A               	andwf	___altoft@c+1,w,c
  5144  006974  6E0E               	movwf	(??___altoft+1)& (0+255),c
  5145  006976  0E00               	movlw	0
  5146  006978  140B               	andwf	___altoft@c+2,w,c
  5147  00697A  6E0F               	movwf	(??___altoft+2)& (0+255),c
  5148  00697C  0EFF               	movlw	255
  5149  00697E  140C               	andwf	___altoft@c+3,w,c
  5150  006980  6E10               	movwf	(??___altoft+3)& (0+255),c
  5151  006982  500D               	movf	??___altoft,w,c
  5152  006984  100E               	iorwf	??___altoft+1,w,c
  5153  006986  100F               	iorwf	??___altoft+2,w,c
  5154  006988  1010               	iorwf	??___altoft+3,w,c
  5155  00698A  A4D8               	btfss	status,2,c
  5156  00698C  D7E8               	goto	l230
  5157  00698E  C009  F001         	movff	___altoft@c,___ftpack@arg
  5158  006992  C00A  F002         	movff	___altoft@c+1,___ftpack@arg+1
  5159  006996  C00B  F003         	movff	___altoft@c+2,___ftpack@arg+2
  5160  00699A  C011  F004         	movff	___altoft@exp,___ftpack@exp
  5161  00699E  C012  F005         	movff	___altoft@sign,___ftpack@sign
  5162  0069A2  EC62  F035         	call	___ftpack	;wreg free
  5163  0069A6  C001  F009         	movff	?___ftpack,?___altoft
  5164  0069AA  C002  F00A         	movff	?___ftpack+1,?___altoft+1
  5165  0069AE  C003  F00B         	movff	?___ftpack+2,?___altoft+2
  5166  0069B2  0012               	return	
  5167  0069B4                     __end_of___altoft:
  5168                           	opt stack 0
  5169                           tblptru	equ	0xFF8
  5170                           tblptrh	equ	0xFF7
  5171                           tblptrl	equ	0xFF6
  5172                           tablat	equ	0xFF5
  5173                           prodh	equ	0xFF4
  5174                           prodl	equ	0xFF3
  5175                           postinc0	equ	0xFEE
  5176                           wreg	equ	0xFE8
  5177                           indf1	equ	0xFE7
  5178                           postinc1	equ	0xFE6
  5179                           postdec1	equ	0xFE5
  5180                           plusw1	equ	0xFE3
  5181                           fsr1h	equ	0xFE2
  5182                           fsr1l	equ	0xFE1
  5183                           indf2	equ	0xFDF
  5184                           postinc2	equ	0xFDE
  5185                           postdec2	equ	0xFDD
  5186                           plusw2	equ	0xFDB
  5187                           fsr2h	equ	0xFDA
  5188                           fsr2l	equ	0xFD9
  5189                           status	equ	0xFD8
  5190                           
  5191 ;; *************** function ___ftpack *****************
  5192 ;; Defined at:
  5193 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\float.c"
  5194 ;; Parameters:    Size  Location     Type
  5195 ;;  arg             3    0[COMRAM] unsigned um
  5196 ;;  exp             1    3[COMRAM] unsigned char 
  5197 ;;  sign            1    4[COMRAM] unsigned char 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;		None
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  3    0[COMRAM] float 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2, status,0
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5209 ;;      Params:         5       0       0       0       0       0       0       0       0
  5210 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5211 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5212 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5213 ;;Total ram usage:        8 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; This function calls:
  5216 ;;		Nothing
  5217 ;; This function is called by:
  5218 ;;		___altoft
  5219 ;;		___ftadd
  5220 ;;		___ftdiv
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           	psect	text19
  5225  006AC4                     __ptext19:
  5226                           	opt stack 0
  5227  006AC4                     ___ftpack:
  5228                           	opt stack 28
  5229                           
  5230                           ;incstack = 0
  5231  006AC4  5004               	movf	___ftpack@exp,w,c
  5232  006AC6  B4D8               	btfsc	status,2,c
  5233  006AC8  D005               	goto	u1080
  5234  006ACA  5001               	movf	___ftpack@arg,w,c
  5235  006ACC  1002               	iorwf	___ftpack@arg+1,w,c
  5236  006ACE  1003               	iorwf	___ftpack@arg+2,w,c
  5237  006AD0  A4D8               	btfss	status,2,c
  5238  006AD2  D00C               	goto	l359
  5239  006AD4                     u1080:
  5240  006AD4  0E00               	movlw	0
  5241  006AD6  6E01               	movwf	?___ftpack,c
  5242  006AD8  0E00               	movlw	0
  5243  006ADA  6E02               	movwf	?___ftpack+1,c
  5244  006ADC  0E00               	movlw	0
  5245  006ADE  6E03               	movwf	?___ftpack+2,c
  5246  006AE0  0012               	return	
  5247  006AE2  2A04               	incf	___ftpack@exp,f,c
  5248  006AE4  90D8               	bcf	status,0,c
  5249  006AE6  3203               	rrcf	___ftpack@arg+2,f,c
  5250  006AE8  3202               	rrcf	___ftpack@arg+1,f,c
  5251  006AEA  3201               	rrcf	___ftpack@arg,f,c
  5252  006AEC                     l359:
  5253  006AEC  0E00               	movlw	0
  5254  006AEE  1401               	andwf	___ftpack@arg,w,c
  5255  006AF0  6E06               	movwf	??___ftpack& (0+255),c
  5256  006AF2  0E00               	movlw	0
  5257  006AF4  1402               	andwf	___ftpack@arg+1,w,c
  5258  006AF6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5259  006AF8  0EFE               	movlw	254
  5260  006AFA  1403               	andwf	___ftpack@arg+2,w,c
  5261  006AFC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5262  006AFE  5006               	movf	??___ftpack,w,c
  5263  006B00  1007               	iorwf	??___ftpack+1,w,c
  5264  006B02  1008               	iorwf	??___ftpack+2,w,c
  5265  006B04  B4D8               	btfsc	status,2,c
  5266  006B06  D00C               	goto	l362
  5267  006B08  D7EC               	goto	l360
  5268  006B0A  2A04               	incf	___ftpack@exp,f,c
  5269  006B0C  0E01               	movlw	1
  5270  006B0E  2601               	addwf	___ftpack@arg,f,c
  5271  006B10  0E00               	movlw	0
  5272  006B12  2202               	addwfc	___ftpack@arg+1,f,c
  5273  006B14  0E00               	movlw	0
  5274  006B16  2203               	addwfc	___ftpack@arg+2,f,c
  5275  006B18  90D8               	bcf	status,0,c
  5276  006B1A  3203               	rrcf	___ftpack@arg+2,f,c
  5277  006B1C  3202               	rrcf	___ftpack@arg+1,f,c
  5278  006B1E  3201               	rrcf	___ftpack@arg,f,c
  5279  006B20                     l362:
  5280  006B20  0E00               	movlw	0
  5281  006B22  1401               	andwf	___ftpack@arg,w,c
  5282  006B24  6E06               	movwf	??___ftpack& (0+255),c
  5283  006B26  0E00               	movlw	0
  5284  006B28  1402               	andwf	___ftpack@arg+1,w,c
  5285  006B2A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5286  006B2C  0EFF               	movlw	255
  5287  006B2E  1403               	andwf	___ftpack@arg+2,w,c
  5288  006B30  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5289  006B32  5006               	movf	??___ftpack,w,c
  5290  006B34  1007               	iorwf	??___ftpack+1,w,c
  5291  006B36  1008               	iorwf	??___ftpack+2,w,c
  5292  006B38  B4D8               	btfsc	status,2,c
  5293  006B3A  D006               	goto	l365
  5294  006B3C  D7E6               	goto	l363
  5295  006B3E  0604               	decf	___ftpack@exp,f,c
  5296  006B40  90D8               	bcf	status,0,c
  5297  006B42  3601               	rlcf	___ftpack@arg,f,c
  5298  006B44  3602               	rlcf	___ftpack@arg+1,f,c
  5299  006B46  3603               	rlcf	___ftpack@arg+2,f,c
  5300  006B48                     l365:
  5301  006B48  BE02               	btfsc	___ftpack@arg+1,7,c
  5302  006B4A  D003               	goto	u1120
  5303  006B4C  0E02               	movlw	2
  5304  006B4E  6004               	cpfslt	___ftpack@exp,c
  5305  006B50  D7F6               	goto	l366
  5306  006B52                     u1120:
  5307  006B52  A004               	btfss	___ftpack@exp,0,c
  5308  006B54  9E02               	bcf	___ftpack@arg+1,7,c
  5309  006B56  90D8               	bcf	status,0,c
  5310  006B58  3204               	rrcf	___ftpack@exp,f,c
  5311  006B5A  5004               	movf	___ftpack@exp,w,c
  5312  006B5C  1203               	iorwf	___ftpack@arg+2,f,c
  5313  006B5E  5005               	movf	___ftpack@sign,w,c
  5314  006B60  A4D8               	btfss	status,2,c
  5315  006B62  8E03               	bsf	___ftpack@arg+2,7,c
  5316  006B64  C001  F001         	movff	___ftpack@arg,?___ftpack
  5317  006B68  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5318  006B6C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5319  006B70  0012               	return	
  5320  006B72                     __end_of___ftpack:
  5321                           	opt stack 0
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           postinc0	equ	0xFEE
  5329                           wreg	equ	0xFE8
  5330                           indf1	equ	0xFE7
  5331                           postinc1	equ	0xFE6
  5332                           postdec1	equ	0xFE5
  5333                           plusw1	equ	0xFE3
  5334                           fsr1h	equ	0xFE2
  5335                           fsr1l	equ	0xFE1
  5336                           indf2	equ	0xFDF
  5337                           postinc2	equ	0xFDE
  5338                           postdec2	equ	0xFDD
  5339                           plusw2	equ	0xFDB
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           tblptru	equ	0xFF8
  5344                           tblptrh	equ	0xFF7
  5345                           tblptrl	equ	0xFF6
  5346                           tablat	equ	0xFF5
  5347                           prodh	equ	0xFF4
  5348                           prodl	equ	0xFF3
  5349                           postinc0	equ	0xFEE
  5350                           wreg	equ	0xFE8
  5351                           indf1	equ	0xFE7
  5352                           postinc1	equ	0xFE6
  5353                           postdec1	equ	0xFE5
  5354                           plusw1	equ	0xFE3
  5355                           fsr1h	equ	0xFE2
  5356                           fsr1l	equ	0xFE1
  5357                           indf2	equ	0xFDF
  5358                           postinc2	equ	0xFDE
  5359                           postdec2	equ	0xFDD
  5360                           plusw2	equ	0xFDB
  5361                           fsr2h	equ	0xFDA
  5362                           fsr2l	equ	0xFD9
  5363                           status	equ	0xFD8
  5364                           
  5365                           	psect	rparam
  5366  0000                     tblptru	equ	0xFF8
  5367                           tblptrh	equ	0xFF7
  5368                           tblptrl	equ	0xFF6
  5369                           tablat	equ	0xFF5
  5370                           prodh	equ	0xFF4
  5371                           prodl	equ	0xFF3
  5372                           postinc0	equ	0xFEE
  5373                           wreg	equ	0xFE8
  5374                           indf1	equ	0xFE7
  5375                           postinc1	equ	0xFE6
  5376                           postdec1	equ	0xFE5
  5377                           plusw1	equ	0xFE3
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           plusw2	equ	0xFDB
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8


Data Sizes:
    Strings     47
    Constant    280
    Data        32
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     63      95
    BANK0           160    142     142
    BANK1           256    256     256
    BANK2           256    135     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 256
		 -> calc_sha_256@w(BANK1[256]), calc_sha_256@chunk(BANK0[64]), 

    memset@p	PTR unsigned char  size(2) Largest target is 256
		 -> calc_sha_256@w(BANK1[256]), calc_sha_256@chunk(BANK0[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 16
		 -> string(CODE[16]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 65
		 -> main@hash_string(BANK2[65]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    main@p_string	PTR unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    hash_to_string@hash	PTR const unsigned char  size(2) Largest target is 32
		 -> main@hash(BANK2[32]), 

    hash_to_string@string	PTR unsigned char  size(2) Largest target is 65
		 -> main@hash_string(BANK2[65]), 

    calc_sha_256@hash	PTR unsigned char  size(2) Largest target is 32
		 -> main@hash(BANK2[32]), 

    calc_sha_256@p	PTR const unsigned char  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    calc_sha_256@input	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    state.p	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    sp__memset	PTR void  size(2) Largest target is 256
		 -> calc_sha_256@w(BANK1[256]), calc_sha_256@chunk(BANK0[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    calc_chunk@chunk	PTR unsigned char  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    calc_chunk@state.p	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    calc_chunk@state	PTR struct buffer_state size(2) Largest target is 11
		 -> calc_sha_256@state(BANK0[10]), 

    S28buffer_state$p	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    init_buf_state@state.p	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    init_buf_state@input	PTR const void  size(2) Largest target is 16
		 -> string(CODE[16]), 

    init_buf_state@state	PTR struct buffer_state size(2) Largest target is 11
		 -> calc_sha_256@state(BANK0[10]), 

    USART_SendString@out	PTR const unsigned char  size(2) Largest target is 65
		 -> STR_3(CODE[11]), STR_2(CODE[14]), main@hash_string(BANK2[65]), 


Critical Paths under _main in COMRAM

    _main->_calc_sha_256
    _hash_to_string->_sprintf
    _sprintf->___lwdiv
    _calc_sha_256->_calc_chunk
    _calc_chunk->_memcpy
    _USART_SendString->_USART_TxChar
    _USART_Init->___ftadd
    ___ftdiv->___altoft
    ___ftadd->___ftdiv
    ___altoft->___ftpack

Critical Paths under _main in BANK0

    _main->_calc_sha_256

Critical Paths under _main in BANK1

    _main->_calc_sha_256

Critical Paths under _main in BANK2

    _main->_calc_sha_256

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               103   103      0   19903
                                             32 BANK2    103   103      0
                         _USART_Init
                   _USART_SendString
                       _calc_sha_256
                     _hash_to_string
 ---------------------------------------------------------------------------------
 (1) _hash_to_string                                       7     3      4    1887
                                             29 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             31    25      6    1622
                                              7 COMRAM    22    16      6
                            ___lwdiv
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _calc_sha_256                                       468   462      6    7840
                                             25 COMRAM    38    32      6
                                              0 BANK0    142   142      0
                                              0 BANK1    256   256      0
                                              0 BANK2     32    32      0
                         _calc_chunk
                     _init_buf_state
                             _memset
                       _rotate_right
 ---------------------------------------------------------------------------------
 (2) _rotate_right                                        15     9      6    1608
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) _init_buf_state                                       6     0      6     404
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _calc_chunk                                          14    10      4    2268
                                             11 COMRAM    14    10      4
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     780
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     599
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _USART_SendString                                     2     0      2     295
                                              1 COMRAM     2     0      2
                       _USART_TxChar
 ---------------------------------------------------------------------------------
 (2) _USART_TxChar                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           7     3      4    9746
                                             45 COMRAM     7     3      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     328
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2985
                                             18 COMRAM    15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    3671
                                             33 COMRAM    12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2641
                                              8 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2427
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
   _USART_SendString
     _USART_TxChar
   _calc_sha_256
     _calc_chunk
       _memcpy
       _memset
     _init_buf_state
     _memset
     _rotate_right
   _hash_to_string
     _sprintf
       ___lwdiv
       ___wmul
       _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     87      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8E      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3F      5F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B5      20        0.0%
DATA                 0      0     2B5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 28 18:25:57 2018

             ___altoft@exp 0011                          _k 7EB7              ___altoft@sign 0012  
                       l34 67F6                         l35 67CE                         l60 7116  
                       l70 73FA                         l63 7132                         l56 6F16  
                       l72 751C                         l81 7D74                         l58 6F82  
                       l74 7892                         l59 7064                         l83 7EB4  
                       l76 7904                         l69 73B6                         l78 7CCA  
                       l95 6A6E                         l88 67CA        ___wmul@multiplicand 0003  
              __CFG_BORV$3 000000               ___ftadd@exp1 002D               ___ftadd@exp2 002C  
             ___ftadd@sign 002B                        l110 714E                        l111 716C  
                      l121 720A                        l113 7180                        l130 7296  
                      l114 717A                        l131 729E                        l140 734E  
                      l132 72C6                        l141 72F6                        l230 695E  
                      l119 71AE                        l404 6E24                        l229 696A  
                      l413 6E62                        l405 6E1A                        l414 6E58  
                      l423 6B9A                        l360 6AE2                        l416 6E86  
                      l417 6EA2                        l425 6BC2                        l362 6B20  
                      l418 6ED2                        l426 6C00                        l363 6B0A  
                      l427 6C26                        l365 6B48                        l461 6CFA  
                      l366 6B3E                        l390 6D9E                        l470 6D3A  
                      l462 6CEA                        l359 6AEC                        l553 683C  
                      l394 6DC8                        l554 6834                        l474 6688  
                      l467 6D1E                        l459 6C84                        l468 6D12  
                      l557 685C                        l558 6866                        l399 6E2E  
                      l583 66F0                        l584 66E0                        l577 676C  
                      l578 674A               _rotate_right 68D2                        wreg 000FE8  
             __CFG_FOSC$HS 000000               __CFG_LVP$OFF 000000               ___ftdiv@cntr 001C  
             ___ftdiv@sign 0021               __CFG_WDT$OFF 000000                       l2005 7CB2  
                     l2007 7CBA                       l2017 7D30                       l2043 6786  
                     l1531 6668                       l1603 70DE                       l1437 674A  
                     l1449 66E0                       l1665 7246                       l1941 7500  
                     l1955 787A                       l1957 7882                       l1967 78E8  
                     STR_1 7FF9                       STR_2 7FE0                       STR_3 7FEE  
                     STR_4 7FCF                       u1120 6B52                       u1200 691E  
                     u2011 6A4A                       u1220 6F30                       u1205 6914  
                     u1080 6AD4                       u1240 7070                       u1160 6840  
                     u1400 7356                       u1410 736E                       u1330 7272  
                     u1510 6DBA                       u1270 7100                       u1190 68FA  
                     u1255 70CC                       u1441 6D5C                       u1610 6E6A  
                     u1451 6D70                       u1195 68F0                       u1540 6DF8  
                     u1380 72CE                       u1701 6C68                       u1390 72F0  
                     u1480 6D90                       u1720 6CA2                       u1651 6B82  
                     u1811 738E                       u1580 6E36                       u1900 7902  
                     u1820 73F8                       u1725 6C9A                       u1910 7CB2  
                     u1830 7500                       u1671 6BAA                       u1760 6D24  
                     u1840 751A                       u1930 7D30                       u1850 756A  
                     u1780 67EE                       u1860 7696                       u1790 6816  
                     u1950 7D72                       u1870 787A                       u1855 7560  
                     u1960 7DBE                       u1865 768C                       u1970 7E14  
                     u1890 78E8                       u1787 67E4                       u1797 680C  
                     u1965 7DB4                       u1975 7E0A                       _TXIF 007CF4  
                     _main 6A2E               ___ftpack@arg 0001               ___ftpack@exp 0004  
                     fsr1h 000FE2                       fsr2h 000FDA                       indf1 000FE7  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
 __end_of_USART_SendString 681E                       prodh 000FF4                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000               ___param_bank 000000  
             ___fttol@exp1 000F               ___fttol@lval 000B                      ?_main 0001  
          __end_of___ftadd 6EF8            __end_of___ftdiv 6C58            __end_of___fttol 6D4C  
          __end_of___lwdiv 6870                      _RCSTA 000FAB                      _SPBRG 000FAF  
                    _TXREG 000FAD                      _TXSTA 000FAC              __CFG_PWRT$OFF 000000  
             main@p_string 0285            __end_of_isdigit 6690              ___ftpack@sign 0005  
                    main@i 0281                      main@j 0283                      tablat 000FF5  
                    plusw1 000FE3                      plusw2 000FDB                      status 000FD8  
          __end_of_sprintf 7384                ?_USART_Init 002E             __CFG_MCLRE$OFF 000000  
    __size_of_calc_sha_256 0B32            __initialization 6702               __end_of_main 6AC4  
                   ??_main 0040              ___fttol@sign1 000A              __activetblptr 000002  
         ??_hash_to_string 0022           __end_of___altoft 69B4           __end_of___ftpack 6B72  
             _calc_sha_256 7384       hash_to_string@string 001E                     _TRISC6 007CA6  
                   _TRISC7 007CA7                     ___wmul 66B0                  ??___ftadd 0028  
           __CFG_STVREN$ON 000000                  ??___ftdiv 0019                  ??___fttol 0005  
                ??___lwdiv 0005                     _memcpy 6738                     _memset 66D6  
                   clear_0 6728                     _string 7FBF            hash_to_string@i 0023  
             __pdataCOMRAM 0040                  ??_isdigit 0001               __mediumconst 7EB6  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
      __size_of_USART_Init 007A                  ??_sprintf 000E                 __accesstop 0060  
  __end_of__initialization 672E                 ___altoft@c 0009            __CFG_PBADEN$OFF 000000  
               ___ftadd@f1 0022                 ___ftadd@f2 0025              ___rparam_used 000001  
               ___ftdiv@f1 0013                 ___ftdiv@f2 0016                 ___ftdiv@f3 001D  
               ___fttol@f1 0001             __pcstackCOMRAM 0001                 _calc_chunk 6EF8  
             sprintf@width 001B                 __pbssBANK2 0287          ?_USART_SendString 0002  
       ??_USART_SendString 0004                    ?___wmul 0001                  ?___altoft 0009  
                  ?_memcpy 0001                    ?_memset 0001                  ?___ftpack 0001  
 calc_chunk@space_in_chunk 0016               ??_USART_Init 0032                    __Hparam 0000  
                  __Lparam 0000    __size_of_init_buf_state 0062                    ___ftadd 6D4C  
                  ___ftdiv 6B72            __size_of___wmul 0026                    ___fttol 6C58  
                  ___lwdiv 681E                 ??___altoft 000D                    __pcinit 6702  
          __size_of_memcpy 0046                 ??___ftpack 0006            __size_of_memset 002C  
                  __ramtop 0800                    __ptext0 6A2E                    __ptext1 677E  
                  __ptext2 713C                    __ptext3 6672                    __ptext4 66B0  
                  __ptext5 681E                    __ptext6 7384                    __ptext7 68D2  
                  __ptext8 6870                    __ptext9 6EF8        USART_SendString@out 0002  
        __end_of_hexpowers 7FBF             USART_Init@temp 0032                    _isdigit 6672  
              ?_calc_chunk 000C         __end_of_USART_Init 6A2E                    _sprintf 713C  
     end_of_initialization 672E                    memcpy@d 0007                    memcpy@n 0005  
                  memcpy@s 0009                    memset@c 0003                    memset@n 0005  
                  memset@p 0007              __Lmediumconst 7EB6                    postdec1 000FE5  
                  postdec2 000FDD                    postinc0 000FEE                    postinc1 000FE6  
                  postinc2 000FDE        USART_Init@baud_rate 002E                ___ftdiv@exp 0020  
            ?_USART_TxChar 0001        __size_of_calc_chunk 0244             __end_of___wmul 66D6  
            __pidataCOMRAM 6690             __end_of_memcpy 677E             __end_of_memset 6702  
            ?_rotate_right 0001             __end_of_string 7FCF        start_initialization 6702  
           ??_USART_TxChar 0001    __size_of_hash_to_string 004E             _init_buf_state 6870  
                 ??___wmul 0005           __CFG_LPT1OSC$OFF 000000                   ??_memcpy 0007  
                 ??_memset 0007             ??_rotate_right 0007  __size_of_USART_SendString 0052  
        __size_of___altoft 0078          __size_of___ftpack 00AE              __pcstackBANK0 0060  
            __pcstackBANK1 0100              __pcstackBANK2 0200        init_buf_state@input 0003  
      init_buf_state@state 0001                  __end_of_k 7FB7                sprintf@ccnt 0016  
              sprintf@flag 0015                sprintf@prec 001A     __end_of_init_buf_state 68D2  
          main@hash_string 0220           ___lwdiv@dividend 0001              __pmediumconst 7EB6  
                 ?___ftadd 0022                   ?___ftdiv 0013                   ?___fttol 0001  
                 ?___lwdiv 0001               ??_calc_chunk 0010                   ?_isdigit 0001  
                _hexpowers 7FB7           ___lwdiv@quotient 0005                   ?_sprintf 0008  
            ?_calc_sha_256 001A             ___wmul@product 0005            ?_init_buf_state 0001  
       __end_of_calc_chunk 713C           __CFG_WDTPS$32768 000000                  main@F4162 0287  
              calc_chunk@i 0018       __end_of_USART_TxChar 6672          ___wmul@multiplier 0001  
                copy_data0 6716             ??_calc_sha_256 0020             _hash_to_string 677E  
     __end_of_rotate_right 693C         hash_to_string@hash 0020                   __Hrparam 0000  
                memcpy@tmp 000B                   __Lrparam 0000           __size_of___ftadd 01AC  
         __size_of___ftdiv 00E6                   ___altoft 693C           __size_of___fttol 00F4  
         __size_of___lwdiv 0052                   ___ftpack 6AC4          rotate_right@count 0005  
              _isdigit$391 0002          rotate_right@value 0001           _USART_SendString 67CC  
               sprintf@idx 0014                 sprintf@val 0018           __size_of_isdigit 001E  
          ___lwdiv@divisor 0003            ___lwdiv@counter 0007                   __ptext10 66D6  
                 __ptext11 6738                   __ptext12 67CC                   __ptext13 6666  
                 __ptext14 69B4                   __ptext15 6C58                   __ptext16 6B72  
                 __ptext17 6D4C                   __ptext18 693C                   __ptext19 6AC4  
   __end_of_hash_to_string 67CC           __size_of_sprintf 0248              __size_of_main 0096  
                 main@hash 0261                   memcpy@d1 0001                   memcpy@s1 0003  
                 isdigit@c 0003                   memset@p1 0001            USART_TxChar@out 0001  
        init_buf_state@len 0005            ?_hash_to_string 001E                  sprintf@ap 0012  
                sprintf@sp 0008            calc_chunk@chunk 000C            calc_chunk@state 000E  
    __size_of_USART_TxChar 000C       __end_of_calc_sha_256 7EB6                   sprintf@c 001D  
                 sprintf@f 000A             calc_chunk@left 0012          calc_sha_256@F4130 0040  
    __size_of_rotate_right 006A         calc_sha_256@s0_117 00D0         calc_sha_256@s1_114 00C8  
         ??_init_buf_state 0007              calc_chunk@len 0014               _USART_TxChar 6666  
        calc_sha_256@chunk 0060                 _USART_Init 69B4           calc_sha_256@hash 001A  
        calc_sha_256@input 001C          calc_sha_256@temp1 00DC          calc_sha_256@temp2 00D8  
           calc_sha_256@s0 00C0             calc_sha_256@s1 00C4            calc_sha_256@maj 00D4  
          calc_sha_256@len 001E             calc_sha_256@ah 0200             calc_sha_256@ch 00CC  
            calc_sha_256@h 00A0              calc_sha_256@i 00EC              calc_sha_256@j 003E  
            calc_sha_256@p 00E0              calc_sha_256@w 0100          calc_sha_256@state 00E2  
