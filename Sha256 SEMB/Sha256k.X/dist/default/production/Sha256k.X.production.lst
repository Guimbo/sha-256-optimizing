

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 28 17:25:14 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37  0000                     
    38                           ; Version 1.45
    39                           ; Generated 16/11/2017 GMT
    40                           ; 
    41                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    42                           ; All rights reserved.
    43                           ; 
    44                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    45                           ; 
    46                           ; Redistribution and use in source and binary forms, with or without modification, are
    47                           ; permitted provided that the following conditions are met:
    48                           ; 
    49                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    50                           ;        conditions and the following disclaimer.
    51                           ; 
    52                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    53                           ;        of conditions and the following disclaimer in the documentation and/or other
    54                           ;        materials provided with the distribution.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC18F45K50 Definitions
    70                           ; 
    71                           ; SFR Addresses
    72  0000                     
    73                           	psect	idataBANK2
    74  00681A                     __pidataBANK2:
    75                           	opt stack 0
    76                           
    77                           ;initializer for calc_sha_256@F6069
    78  00681A  E667               	dw	58983
    79  00681C  6A09               	dw	27145
    80  00681E  AE85               	dw	44677
    81  006820  BB67               	dw	47975
    82  006822  F372               	dw	62322
    83  006824  3C6E               	dw	15470
    84  006826  F53A               	dw	62778
    85  006828  A54F               	dw	42319
    86  00682A  527F               	dw	21119
    87  00682C  510E               	dw	20750
    88  00682E  688C               	dw	26764
    89  006830  9B05               	dw	39685
    90  006832  D9AB               	dw	55723
    91  006834  1F83               	dw	8067
    92  006836  CD19               	dw	52505
    93  006838  5BE0               	dw	23520
    94                           
    95                           	psect	mediumconst
    96  007EB8                     __pmediumconst:
    97                           	opt stack 0
    98  007EB8  00                 	db	0
    99  007EB9                     _k:
   100                           	opt stack 0
   101  007EB9  2F98               	dw	12184
   102  007EBB  428A               	dw	17034
   103  007EBD  4491               	dw	17553
   104  007EBF  7137               	dw	28983
   105  007EC1  FBCF               	dw	64463
   106  007EC3  B5C0               	dw	46528
   107  007EC5  DBA5               	dw	56229
   108  007EC7  E9B5               	dw	59829
   109  007EC9  C25B               	dw	49755
   110  007ECB  3956               	dw	14678
   111  007ECD  11F1               	dw	4593
   112  007ECF  59F1               	dw	23025
   113  007ED1  82A4               	dw	33444
   114  007ED3  923F               	dw	37439
   115  007ED5  5ED5               	dw	24277
   116  007ED7  AB1C               	dw	43804
   117  007ED9  AA98               	dw	43672
   118  007EDB  D807               	dw	55303
   119  007EDD  5B01               	dw	23297
   120  007EDF  1283               	dw	4739
   121  007EE1  85BE               	dw	34238
   122  007EE3  2431               	dw	9265
   123  007EE5  7DC3               	dw	32195
   124  007EE7  550C               	dw	21772
   125  007EE9  5D74               	dw	23924
   126  007EEB  72BE               	dw	29374
   127  007EED  B1FE               	dw	45566
   128  007EEF  80DE               	dw	32990
   129  007EF1  06A7               	dw	1703
   130  007EF3  9BDC               	dw	39900
   131  007EF5  F174               	dw	61812
   132  007EF7  C19B               	dw	49563
   133  007EF9  69C1               	dw	27073
   134  007EFB  E49B               	dw	58523
   135  007EFD  4786               	dw	18310
   136  007EFF  EFBE               	dw	61374
   137  007F01  9DC6               	dw	40390
   138  007F03  0FC1               	dw	4033
   139  007F05  A1CC               	dw	41420
   140  007F07  240C               	dw	9228
   141  007F09  2C6F               	dw	11375
   142  007F0B  2DE9               	dw	11753
   143  007F0D  84AA               	dw	33962
   144  007F0F  4A74               	dw	19060
   145  007F11  A9DC               	dw	43484
   146  007F13  5CB0               	dw	23728
   147  007F15  88DA               	dw	35034
   148  007F17  76F9               	dw	30457
   149  007F19  5152               	dw	20818
   150  007F1B  983E               	dw	38974
   151  007F1D  C66D               	dw	50797
   152  007F1F  A831               	dw	43057
   153  007F21  27C8               	dw	10184
   154  007F23  B003               	dw	45059
   155  007F25  7FC7               	dw	32711
   156  007F27  BF59               	dw	48985
   157  007F29  0BF3               	dw	3059
   158  007F2B  C6E0               	dw	50912
   159  007F2D  9147               	dw	37191
   160  007F2F  D5A7               	dw	54695
   161  007F31  6351               	dw	25425
   162  007F33  06CA               	dw	1738
   163  007F35  2967               	dw	10599
   164  007F37  1429               	dw	5161
   165  007F39  0A85               	dw	2693
   166  007F3B  27B7               	dw	10167
   167  007F3D  2138               	dw	8504
   168  007F3F  2E1B               	dw	11803
   169  007F41  6DFC               	dw	28156
   170  007F43  4D2C               	dw	19756
   171  007F45  0D13               	dw	3347
   172  007F47  5338               	dw	21304
   173  007F49  7354               	dw	29524
   174  007F4B  650A               	dw	25866
   175  007F4D  0ABB               	dw	2747
   176  007F4F  766A               	dw	30314
   177  007F51  C92E               	dw	51502
   178  007F53  81C2               	dw	33218
   179  007F55  2C85               	dw	11397
   180  007F57  9272               	dw	37490
   181  007F59  E8A1               	dw	59553
   182  007F5B  A2BF               	dw	41663
   183  007F5D  664B               	dw	26187
   184  007F5F  A81A               	dw	43034
   185  007F61  8B70               	dw	35696
   186  007F63  C24B               	dw	49739
   187  007F65  51A3               	dw	20899
   188  007F67  C76C               	dw	51052
   189  007F69  E819               	dw	59417
   190  007F6B  D192               	dw	53650
   191  007F6D  0624               	dw	1572
   192  007F6F  D699               	dw	54937
   193  007F71  3585               	dw	13701
   194  007F73  F40E               	dw	62478
   195  007F75  A070               	dw	41072
   196  007F77  106A               	dw	4202
   197  007F79  C116               	dw	49430
   198  007F7B  19A4               	dw	6564
   199  007F7D  6C08               	dw	27656
   200  007F7F  1E37               	dw	7735
   201  007F81  774C               	dw	30540
   202  007F83  2748               	dw	10056
   203  007F85  BCB5               	dw	48309
   204  007F87  34B0               	dw	13488
   205  007F89  0CB3               	dw	3251
   206  007F8B  391C               	dw	14620
   207  007F8D  AA4A               	dw	43594
   208  007F8F  4ED8               	dw	20184
   209  007F91  CA4F               	dw	51791
   210  007F93  5B9C               	dw	23452
   211  007F95  6FF3               	dw	28659
   212  007F97  682E               	dw	26670
   213  007F99  82EE               	dw	33518
   214  007F9B  748F               	dw	29839
   215  007F9D  636F               	dw	25455
   216  007F9F  78A5               	dw	30885
   217  007FA1  7814               	dw	30740
   218  007FA3  84C8               	dw	33992
   219  007FA5  0208               	dw	520
   220  007FA7  8CC7               	dw	36039
   221  007FA9  FFFA               	dw	65530
   222  007FAB  90BE               	dw	37054
   223  007FAD  6CEB               	dw	27883
   224  007FAF  A450               	dw	42064
   225  007FB1  A3F7               	dw	41975
   226  007FB3  BEF9               	dw	48889
   227  007FB5  78F2               	dw	30962
   228  007FB7  C671               	dw	50801
   229  007FB9                     __end_of_k:
   230                           	opt stack 0
   231  007FB9                     _hexpowers:
   232                           	opt stack 0
   233  007FB9  0001               	dw	1
   234  007FBB  0010               	dw	16
   235  007FBD  0100               	dw	256
   236  007FBF  1000               	dw	4096
   237  007FC1                     __end_of_hexpowers:
   238                           	opt stack 0
   239  007FC1                     _string:
   240                           	opt stack 0
   241  007FC1  61                 	db	97
   242  007FC2  62                 	db	98
   243  007FC3  63                 	db	99
   244  007FC4  64                 	db	100
   245  007FC5  61                 	db	97
   246  007FC6  62                 	db	98
   247  007FC7  63                 	db	99
   248  007FC8  64                 	db	100
   249  007FC9  61                 	db	97
   250  007FCA  62                 	db	98
   251  007FCB  63                 	db	99
   252  007FCC  64                 	db	100
   253  007FCD  61                 	db	97
   254  007FCE  62                 	db	98
   255  007FCF  63                 	db	99
   256  007FD0  64                 	db	100
   257  007FD1                     __end_of_string:
   258                           	opt stack 0
   259  0000                     _ANSELA	set	3931
   260  0000                     _ANSELE	set	3935
   261  0000                     _ANSELB	set	3932
   262  0000                     _ANSELC	set	3933
   263  0000                     _ANSELD	set	3934
   264  0000                     _ACTCON	set	4021
   265  0000                     _OSCTUNE	set	3995
   266  0000                     _OSCCON2	set	4050
   267  0000                     _OSCCON	set	4051
   268  0000                     _TXREG1	set	4013
   269  0000                     _RCREG1	set	4014
   270  0000                     _RCSTA1bits	set	4011
   271  0000                     _TXSTA1bits	set	4012
   272  0000                     _PIR1bits	set	3998
   273  0000                     _SPBRGH1	set	4016
   274  0000                     _SPBRG1	set	4015
   275  0000                     _TXSTA1	set	4012
   276  0000                     _RCSTA1	set	4011
   277  0000                     _BAUDCON1	set	4024
   278  0000                     _INTCON2bits	set	4081
   279  0000                     _WPUB	set	3973
   280  0000                     _TRISD	set	3989
   281  0000                     _TRISC	set	3988
   282  0000                     _TRISB	set	3987
   283  0000                     _TRISA	set	3986
   284  0000                     _TRISE	set	3990
   285  0000                     _LATC	set	3979
   286  0000                     _LATB	set	3978
   287  0000                     _LATA	set	3977
   288  0000                     _LATD	set	3980
   289  0000                     _LATE	set	3981
   290  007FD1                     STR_4:
   291  007FD1  30                 	db	48	;'0'
   292  007FD2  31                 	db	49	;'1'
   293  007FD3  32                 	db	50	;'2'
   294  007FD4  33                 	db	51	;'3'
   295  007FD5  34                 	db	52	;'4'
   296  007FD6  35                 	db	53	;'5'
   297  007FD7  36                 	db	54	;'6'
   298  007FD8  37                 	db	55	;'7'
   299  007FD9  38                 	db	56	;'8'
   300  007FDA  39                 	db	57	;'9'
   301  007FDB  61                 	db	97	;'a'
   302  007FDC  62                 	db	98	;'b'
   303  007FDD  63                 	db	99	;'c'
   304  007FDE  64                 	db	100	;'d'
   305  007FDF  65                 	db	101	;'e'
   306  007FE0  66                 	db	102	;'f'
   307  007FE1  00                 	db	0
   308  007FE2                     STR_2:
   309  007FE2  68                 	db	104	;'h'
   310  007FE3  61                 	db	97	;'a'
   311  007FE4  73                 	db	115	;'s'
   312  007FE5  68                 	db	104	;'h'
   313  007FE6  20                 	db	32
   314  007FE7  73                 	db	115	;'s'
   315  007FE8  74                 	db	116	;'t'
   316  007FE9  72                 	db	114	;'r'
   317  007FEA  69                 	db	105	;'i'
   318  007FEB  6E                 	db	110	;'n'
   319  007FEC  67                 	db	103	;'g'
   320  007FED  3A                 	db	58	;':'
   321  007FEE  20                 	db	32
   322  007FEF  25                 	db	37
   323  007FF0  73                 	db	115	;'s'
   324  007FF1  0A                 	db	10
   325  007FF2  00                 	db	0
   326  007FF3                     STR_3:
   327  007FF3  28                 	db	40
   328  007FF4  6E                 	db	110	;'n'
   329  007FF5  75                 	db	117	;'u'
   330  007FF6  6C                 	db	108	;'l'
   331  007FF7  6C                 	db	108	;'l'
   332  007FF8  29                 	db	41
   333  007FF9  00                 	db	0
   334  007FFA                     STR_1:
   335  007FFA  25                 	db	37
   336  007FFB  30                 	db	48	;'0'
   337  007FFC  32                 	db	50	;'2'
   338  007FFD  78                 	db	120	;'x'
   339  007FFE  00                 	db	0
   340                           
   341                           ; #config settings
   342  007FFF  00                 	db	0	; dummy byte at the end
   343  0000                     
   344                           	psect	cinit
   345  0068C2                     __pcinit:
   346                           	opt stack 0
   347  0068C2                     start_initialization:
   348                           	opt stack 0
   349  0068C2                     __initialization:
   350                           	opt stack 0
   351                           
   352                           ; Initialize objects allocated to BANK2 (32 bytes)
   353                           ; load TBLPTR registers with __pidataBANK2
   354  0068C2  0E1A               	movlw	low __pidataBANK2
   355  0068C4  6EF6               	movwf	tblptrl,c
   356  0068C6  0E68               	movlw	high __pidataBANK2
   357  0068C8  6EF7               	movwf	tblptrh,c
   358  0068CA  0E00               	movlw	low (__pidataBANK2 shr (0+16))
   359  0068CC  6EF8               	movwf	tblptru,c
   360  0068CE  EE02  F0C8         	lfsr	0,__pdataBANK2
   361  0068D2  EE10 F020          	lfsr	1,32
   362  0068D6                     copy_data0:
   363  0068D6  0009               	tblrd		*+
   364  0068D8  CFF5 FFEE          	movff	tablat,postinc0
   365  0068DC  50E5               	movf	postdec1,w,c
   366  0068DE  50E1               	movf	fsr1l,w,c
   367  0068E0  E1FA               	bnz	copy_data0
   368                           
   369                           ; Clear objects allocated to BANK2 (65 bytes)
   370  0068E2  EE02  F087         	lfsr	0,__pbssBANK2
   371  0068E6  0E41               	movlw	65
   372  0068E8                     clear_0:
   373  0068E8  6AEE               	clrf	postinc0,c
   374  0068EA  06E8               	decf	wreg,f,c
   375  0068EC  E1FD               	bnz	clear_0
   376  0068EE                     end_of_initialization:
   377                           	opt stack 0
   378  0068EE                     __end_of__initialization:
   379                           	opt stack 0
   380  0068EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   381  0068F0  6EF8               	movwf	tblptru,c
   382  0068F2  0100               	movlb	0
   383  0068F4  EFA3  F035         	goto	_main	;jump to C main() function
   384                           tblptru	equ	0xFF8
   385                           tblptrh	equ	0xFF7
   386                           tblptrl	equ	0xFF6
   387                           tablat	equ	0xFF5
   388                           postinc0	equ	0xFEE
   389                           wreg	equ	0xFE8
   390                           postdec1	equ	0xFE5
   391                           fsr1l	equ	0xFE1
   392                           
   393                           	psect	bssBANK2
   394  000287                     __pbssBANK2:
   395                           	opt stack 0
   396  000287                     main@F6102:
   397                           	opt stack 0
   398  000287                     	ds	65
   399                           tblptru	equ	0xFF8
   400                           tblptrh	equ	0xFF7
   401                           tblptrl	equ	0xFF6
   402                           tablat	equ	0xFF5
   403                           postinc0	equ	0xFEE
   404                           wreg	equ	0xFE8
   405                           postdec1	equ	0xFE5
   406                           fsr1l	equ	0xFE1
   407                           
   408                           	psect	dataBANK2
   409  0002C8                     __pdataBANK2:
   410                           	opt stack 0
   411  0002C8                     calc_sha_256@F6069:
   412                           	opt stack 0
   413  0002C8                     	ds	32
   414                           tblptru	equ	0xFF8
   415                           tblptrh	equ	0xFF7
   416                           tblptrl	equ	0xFF6
   417                           tablat	equ	0xFF5
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           postdec1	equ	0xFE5
   421                           fsr1l	equ	0xFE1
   422                           
   423                           	psect	cstackBANK2
   424  000200                     __pcstackBANK2:
   425                           	opt stack 0
   426  000200                     calc_sha_256@ah:
   427                           	opt stack 0
   428                           
   429                           ; 32 bytes @ 0x0
   430  000200                     	ds	32
   431  000220                     main@hash_string:
   432                           	opt stack 0
   433                           
   434                           ; 65 bytes @ 0x20
   435  000220                     	ds	65
   436  000261                     main@hash:
   437                           	opt stack 0
   438                           
   439                           ; 32 bytes @ 0x61
   440  000261                     	ds	32
   441  000281                     main@i:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x81
   445  000281                     	ds	2
   446  000283                     main@j:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x83
   450  000283                     	ds	2
   451  000285                     main@p_string:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x85
   455  000285                     	ds	2
   456                           tblptru	equ	0xFF8
   457                           tblptrh	equ	0xFF7
   458                           tblptrl	equ	0xFF6
   459                           tablat	equ	0xFF5
   460                           postinc0	equ	0xFEE
   461                           wreg	equ	0xFE8
   462                           postdec1	equ	0xFE5
   463                           fsr1l	equ	0xFE1
   464                           
   465                           	psect	cstackBANK1
   466  000100                     __pcstackBANK1:
   467                           	opt stack 0
   468  000100                     calc_sha_256@w:
   469                           	opt stack 0
   470                           
   471                           ; 256 bytes @ 0x0
   472  000100                     	ds	256
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1l	equ	0xFE1
   481                           
   482                           	psect	cstackBANK0
   483  000060                     __pcstackBANK0:
   484                           	opt stack 0
   485  000060                     calc_sha_256@chunk:
   486                           	opt stack 0
   487                           
   488                           ; 64 bytes @ 0x0
   489  000060                     	ds	64
   490  0000A0                     calc_sha_256@h:
   491                           	opt stack 0
   492                           
   493                           ; 32 bytes @ 0x40
   494  0000A0                     	ds	32
   495  0000C0                     calc_sha_256@s0:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0x60
   499  0000C0                     	ds	4
   500  0000C4                     calc_sha_256@s1:
   501                           	opt stack 0
   502                           
   503                           ; 4 bytes @ 0x64
   504  0000C4                     	ds	4
   505  0000C8                     calc_sha_256@s1_406:
   506                           	opt stack 0
   507                           
   508                           ; 4 bytes @ 0x68
   509  0000C8                     	ds	4
   510  0000CC                     calc_sha_256@ch:
   511                           	opt stack 0
   512                           
   513                           ; 4 bytes @ 0x6C
   514  0000CC                     	ds	4
   515  0000D0                     calc_sha_256@s0_409:
   516                           	opt stack 0
   517                           
   518                           ; 4 bytes @ 0x70
   519  0000D0                     	ds	4
   520  0000D4                     calc_sha_256@maj:
   521                           	opt stack 0
   522                           
   523                           ; 4 bytes @ 0x74
   524  0000D4                     	ds	4
   525  0000D8                     calc_sha_256@temp2:
   526                           	opt stack 0
   527                           
   528                           ; 4 bytes @ 0x78
   529  0000D8                     	ds	4
   530  0000DC                     calc_sha_256@temp1:
   531                           	opt stack 0
   532                           
   533                           ; 4 bytes @ 0x7C
   534  0000DC                     	ds	4
   535  0000E0                     calc_sha_256@p:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x80
   539  0000E0                     	ds	2
   540  0000E2                     calc_sha_256@state:
   541                           	opt stack 0
   542                           
   543                           ; 10 bytes @ 0x82
   544  0000E2                     	ds	10
   545  0000EC                     calc_sha_256@i:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x8C
   549  0000EC                     	ds	2
   550                           tblptru	equ	0xFF8
   551                           tblptrh	equ	0xFF7
   552                           tblptrl	equ	0xFF6
   553                           tablat	equ	0xFF5
   554                           postinc0	equ	0xFEE
   555                           wreg	equ	0xFE8
   556                           postdec1	equ	0xFE5
   557                           fsr1l	equ	0xFE1
   558                           
   559                           	psect	cstackCOMRAM
   560  000001                     __pcstackCOMRAM:
   561                           	opt stack 0
   562  000001                     ??_isdigit:
   563  000001                     ?___wmul:
   564                           	opt stack 0
   565  000001                     ?___lwdiv:
   566                           	opt stack 0
   567  000001                     ?_rotate_right:
   568                           	opt stack 0
   569  000001                     EUSART1_Write@txData:
   570                           	opt stack 0
   571  000001                     init_buf_state@state:
   572                           	opt stack 0
   573  000001                     ___wmul@multiplier:
   574                           	opt stack 0
   575  000001                     ___lwdiv@dividend:
   576                           	opt stack 0
   577  000001                     memcpy@d1:
   578                           	opt stack 0
   579  000001                     memset@p1:
   580                           	opt stack 0
   581  000001                     rotate_right@value:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x0
   585  000001                     	ds	1
   586  000002                     putch@txData:
   587                           	opt stack 0
   588  000002                     _isdigit$694:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x1
   592  000002                     	ds	1
   593  000003                     isdigit@c:
   594                           	opt stack 0
   595  000003                     init_buf_state@input:
   596                           	opt stack 0
   597  000003                     ___wmul@multiplicand:
   598                           	opt stack 0
   599  000003                     ___lwdiv@divisor:
   600                           	opt stack 0
   601  000003                     memcpy@s1:
   602                           	opt stack 0
   603  000003                     memset@c:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x2
   607  000003                     	ds	2
   608  000005                     init_buf_state@len:
   609                           	opt stack 0
   610  000005                     rotate_right@count:
   611                           	opt stack 0
   612  000005                     ___wmul@product:
   613                           	opt stack 0
   614  000005                     ___lwdiv@quotient:
   615                           	opt stack 0
   616  000005                     memcpy@n:
   617                           	opt stack 0
   618  000005                     memset@n:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x4
   622  000005                     	ds	2
   623  000007                     ??_rotate_right:
   624  000007                     ___lwdiv@counter:
   625                           	opt stack 0
   626  000007                     memcpy@d:
   627                           	opt stack 0
   628  000007                     memset@p:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x6
   632  000007                     	ds	1
   633  000008                     ?__doprnt:
   634                           	opt stack 0
   635  000008                     __doprnt@pb:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x7
   639  000008                     	ds	1
   640  000009                     memcpy@s:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x8
   644  000009                     	ds	1
   645  00000A                     __doprnt@f:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x9
   649  00000A                     	ds	1
   650  00000B                     memcpy@tmp:
   651                           	opt stack 0
   652                           
   653                           ; 1 bytes @ 0xA
   654  00000B                     	ds	1
   655  00000C                     ?_calc_chunk:
   656                           	opt stack 0
   657  00000C                     calc_chunk@chunk:
   658                           	opt stack 0
   659  00000C                     __doprnt@ap:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0xB
   663  00000C                     	ds	2
   664  00000E                     ??__doprnt:
   665  00000E                     calc_chunk@state:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0xD
   669  00000E                     	ds	2
   670  000010                     ??_calc_chunk:
   671                           
   672                           ; 1 bytes @ 0xF
   673  000010                     	ds	2
   674  000012                     __doprnt@idx:
   675                           	opt stack 0
   676  000012                     calc_chunk@left:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x11
   680  000012                     	ds	1
   681  000013                     __doprnt@flag:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x12
   685  000013                     	ds	1
   686  000014                     calc_chunk@len:
   687                           	opt stack 0
   688  000014                     __doprnt@val:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x13
   692  000014                     	ds	2
   693  000016                     __doprnt@prec:
   694                           	opt stack 0
   695  000016                     calc_chunk@space_in_chunk:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x15
   699  000016                     	ds	1
   700  000017                     __doprnt@ccnt:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x16
   704  000017                     	ds	1
   705  000018                     calc_chunk@i:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x17
   709  000018                     	ds	1
   710  000019                     __doprnt@len:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x18
   714  000019                     	ds	1
   715  00001A                     calc_sha_256@hash:
   716                           	opt stack 0
   717                           
   718                           ; 2 bytes @ 0x19
   719  00001A                     	ds	1
   720  00001B                     __doprnt@cp:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x1A
   724  00001B                     	ds	1
   725  00001C                     calc_sha_256@input:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x1B
   729  00001C                     	ds	1
   730  00001D                     __doprnt@width:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x1C
   734  00001D                     	ds	1
   735  00001E                     calc_sha_256@len:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x1D
   739  00001E                     	ds	1
   740  00001F                     __doprnt@c:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x1E
   744  00001F                     	ds	1
   745  000020                     ??_calc_sha_256:
   746  000020                     ?_sprintf:
   747                           	opt stack 0
   748  000020                     ?_printf:
   749                           	opt stack 0
   750  000020                     printf@f:
   751                           	opt stack 0
   752  000020                     sprintf@wh:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x1F
   756  000020                     	ds	2
   757  000022                     sprintf@f:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x21
   761  000022                     	ds	2
   762  000024                     printf@ap:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x23
   766  000024                     	ds	2
   767  000026                     ??_sprintf:
   768  000026                     printf@pb:
   769                           	opt stack 0
   770                           
   771                           ; 4 bytes @ 0x25
   772  000026                     	ds	2
   773  000028                     sprintf@ap:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x27
   777  000028                     	ds	2
   778  00002A                     sprintf@pb:
   779                           	opt stack 0
   780                           
   781                           ; 4 bytes @ 0x29
   782  00002A                     	ds	4
   783  00002E                     hash_to_string@string:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x2D
   787  00002E                     	ds	2
   788  000030                     hash_to_string@hash:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x2F
   792  000030                     	ds	2
   793  000032                     ??_hash_to_string:
   794                           
   795                           ; 1 bytes @ 0x31
   796  000032                     	ds	1
   797  000033                     hash_to_string@i:
   798                           	opt stack 0
   799                           
   800                           ; 2 bytes @ 0x32
   801  000033                     	ds	11
   802  00003E                     calc_sha_256@j:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x3D
   806  00003E                     	ds	2
   807  000040                     ??_main:
   808                           
   809                           ; 1 bytes @ 0x3F
   810  000040                     	ds	2
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           postdec1	equ	0xFE5
   818                           fsr1l	equ	0xFE1
   819                           
   820 ;;
   821 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   822 ;;
   823 ;; *************** function _main *****************
   824 ;; Defined at:
   825 ;;		line 287 in file "main.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;		None
   828 ;; Auto vars:     Size  Location     Type
   829 ;;  hash_string    65   32[BANK2 ] unsigned char [65]
   830 ;;  hash           32   97[BANK2 ] unsigned char [32]
   831 ;;  p_string        2  133[BANK2 ] PTR unsigned char 
   832 ;;		 -> string(16), 
   833 ;;  j               2  131[BANK2 ] int 
   834 ;;  i               2  129[BANK2 ] int 
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   844 ;;      Params:         0       0       0       0       0       0       0       0       0
   845 ;;      Locals:         0       0       0     103       0       0       0       0       0
   846 ;;      Temps:          2       0       0       0       0       0       0       0       0
   847 ;;      Totals:         2       0       0     103       0       0       0       0       0
   848 ;;Total ram usage:      105 bytes
   849 ;; Hardware stack levels required when called:    5
   850 ;; This function calls:
   851 ;;		_SYSTEM_Initialize
   852 ;;		_calc_sha_256
   853 ;;		_hash_to_string
   854 ;;		_printf
   855 ;; This function is called by:
   856 ;;		Startup code after reset
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text0
   861  006B46                     __ptext0:
   862                           	opt stack 0
   863  006B46                     _main:
   864                           	opt stack 26
   865                           
   866                           ;main.c: 290: SYSTEM_Initialize();
   867                           
   868                           ;incstack = 0
   869  006B46  ECE3  F033         	call	_SYSTEM_Initialize	;wreg free
   870                           
   871                           ;main.c: 292: int i = 0;
   872  006B4A  0E00               	movlw	0
   873  006B4C  0102               	movlb	2	; () banked
   874  006B4E  6F82               	movwf	(main@i+1)& (0+255),b
   875  006B50  0E00               	movlw	0
   876  006B52  6F81               	movwf	main@i& (0+255),b
   877                           
   878                           ; BSR set to: 2
   879                           ;main.c: 294: int j = 0;
   880  006B54  0E00               	movlw	0
   881  006B56  6F84               	movwf	(main@j+1)& (0+255),b
   882  006B58  0E00               	movlw	0
   883  006B5A  6F83               	movwf	main@j& (0+255),b
   884                           
   885                           ; BSR set to: 2
   886                           ;main.c: 299: char hash_string[65]={'\0'};
   887  006B5C  EE22  F087         	lfsr	2,main@F6102
   888  006B60  EE12  F020         	lfsr	1,main@hash_string
   889  006B64  0E40               	movlw	64
   890  006B66                     u1481:
   891  006B66  CFDB FFE3          	movff	plusw2,plusw1
   892  006B6A  06E8               	decf	wreg,f,c
   893  006B6C  E2FC               	bc	u1481
   894                           
   895                           ; BSR set to: 2
   896                           ;main.c: 302: uint8_t hash[32];
   897                           ;main.c: 305: char *p_string;
   898                           ;main.c: 306: p_string = string;
   899  006B6E  0EC1               	movlw	low _string
   900  006B70  6F85               	movwf	main@p_string& (0+255),b
   901  006B72  0E7F               	movlw	high _string
   902  006B74  6F86               	movwf	(main@p_string+1)& (0+255),b
   903  006B76                     
   904                           ;main.c: 311: calc_sha_256(hash, p_string, 16);
   905                           
   906                           ; BSR set to: 2
   907  006B76  0E61               	movlw	low main@hash
   908  006B78  6E1A               	movwf	calc_sha_256@hash,c
   909  006B7A  0E02               	movlw	high main@hash
   910  006B7C  6E1B               	movwf	calc_sha_256@hash+1,c
   911  006B7E  C285  F01C         	movff	main@p_string,calc_sha_256@input
   912  006B82  C286  F01D         	movff	main@p_string+1,calc_sha_256@input+1
   913  006B86  0E00               	movlw	0
   914  006B88  6E1F               	movwf	calc_sha_256@len+1,c
   915  006B8A  0E10               	movlw	16
   916  006B8C  6E1E               	movwf	calc_sha_256@len,c
   917  006B8E  ECC3  F039         	call	_calc_sha_256	;wreg free
   918                           
   919                           ;main.c: 314: hash_to_string(hash_string, hash);
   920  006B92  0E20               	movlw	low main@hash_string
   921  006B94  6E2E               	movwf	hash_to_string@string,c
   922  006B96  0E02               	movlw	high main@hash_string
   923  006B98  6E2F               	movwf	hash_to_string@string+1,c
   924  006B9A  0E61               	movlw	low main@hash
   925  006B9C  6E30               	movwf	hash_to_string@hash,c
   926  006B9E  0E02               	movlw	high main@hash
   927  006BA0  6E31               	movwf	hash_to_string@hash+1,c
   928  006BA2  ECBE  F034         	call	_hash_to_string	;wreg free
   929                           
   930                           ;main.c: 316: printf("hash string: %s\n",hash_string);
   931  006BA6  0EE2               	movlw	low STR_2
   932  006BA8  6E20               	movwf	printf@f,c
   933  006BAA  0E7F               	movlw	high STR_2
   934  006BAC  6E21               	movwf	printf@f+1,c
   935  006BAE  0E20               	movlw	low main@hash_string
   936  006BB0  6E22               	movwf	?_printf+2,c
   937  006BB2  0E02               	movlw	high main@hash_string
   938  006BB4  6E23               	movwf	?_printf+3,c
   939  006BB6  EC46  F034         	call	_printf	;wreg free
   940                           
   941                           ;main.c: 317: _delay((unsigned long)((1000000)*(80000/4000.0)));
   942  006BBA  0E66               	movlw	102
   943  006BBC  6E41               	movwf	(??_main+1)& (0+255),c
   944  006BBE  0E76               	movlw	118
   945  006BC0  6E40               	movwf	??_main& (0+255),c
   946  006BC2  0EC1               	movlw	193
   947  006BC4                     u1497:
   948  006BC4  2EE8               	decfsz	wreg,f,c
   949  006BC6  D7FE               	bra	u1497
   950  006BC8  2E40               	decfsz	??_main& (0+255),f,c
   951  006BCA  D7FC               	bra	u1497
   952  006BCC  2E41               	decfsz	(??_main+1)& (0+255),f,c
   953  006BCE  D7FA               	bra	u1497
   954  006BD0  F000               	nop	
   955  006BD2  D7D1               	goto	l177
   956  006BD4                     __end_of_main:
   957                           	opt stack 0
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postdec1	equ	0xFE5
   965                           plusw1	equ	0xFE3
   966                           fsr1l	equ	0xFE1
   967                           plusw2	equ	0xFDB
   968                           
   969 ;; *************** function _printf *****************
   970 ;; Defined at:
   971 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\printf.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;  f               2   31[COMRAM] PTR const unsigned char 
   974 ;;		 -> STR_2(17), 
   975 ;; Auto vars:     Size  Location     Type
   976 ;;  pb              4   37[COMRAM] struct __prbuf
   977 ;;  ap              2   35[COMRAM] PTR void [1]
   978 ;;		 -> ?_sprintf(2), ?_printf(2), 
   979 ;; Return value:  Size  Location     Type
   980 ;;                  2   31[COMRAM] int 
   981 ;; Registers used:
   982 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   988 ;;      Params:         4       0       0       0       0       0       0       0       0
   989 ;;      Locals:         6       0       0       0       0       0       0       0       0
   990 ;;      Temps:          0       0       0       0       0       0       0       0       0
   991 ;;      Totals:        10       0       0       0       0       0       0       0       0
   992 ;;Total ram usage:       10 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    3
   995 ;; This function calls:
   996 ;;		__doprnt
   997 ;; This function is called by:
   998 ;;		_main
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text1
  1003  00688C                     __ptext1:
  1004                           	opt stack 0
  1005  00688C                     _printf:
  1006                           	opt stack 27
  1007                           
  1008                           ;incstack = 0
  1009  00688C  0E00               	movlw	0
  1010  00688E  6E26               	movwf	printf@pb,c
  1011  006890  0E00               	movlw	0
  1012  006892  6E27               	movwf	printf@pb+1,c
  1013  006894  0EB0               	movlw	low _putch
  1014  006896  6E28               	movwf	printf@pb+2,c
  1015  006898  0E67               	movlw	high _putch
  1016  00689A  6E29               	movwf	printf@pb+3,c
  1017  00689C  0E22               	movlw	low (?_printf+2)
  1018  00689E  6E24               	movwf	printf@ap,c
  1019  0068A0  0E00               	movlw	high (?_printf+2)
  1020  0068A2  6E25               	movwf	printf@ap+1,c
  1021                           
  1022                           ;	Return value of _printf is never used
  1023  0068A4  0E26               	movlw	low printf@pb
  1024  0068A6  6E08               	movwf	__doprnt@pb,c
  1025  0068A8  0E00               	movlw	high printf@pb
  1026  0068AA  6E09               	movwf	__doprnt@pb+1,c
  1027  0068AC  C020  F00A         	movff	printf@f,__doprnt@f
  1028  0068B0  C021  F00B         	movff	printf@f+1,__doprnt@f+1
  1029  0068B4  0E24               	movlw	low printf@ap
  1030  0068B6  6E0C               	movwf	__doprnt@ap,c
  1031  0068B8  0E00               	movlw	high printf@ap
  1032  0068BA  6E0D               	movwf	__doprnt@ap+1,c
  1033  0068BC  EC0C  F037         	call	__doprnt	;wreg free
  1034  0068C0  0012               	return	
  1035  0068C2                     __end_of_printf:
  1036                           	opt stack 0
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           postdec1	equ	0xFE5
  1044                           plusw1	equ	0xFE3
  1045                           fsr1l	equ	0xFE1
  1046                           plusw2	equ	0xFDB
  1047                           
  1048 ;; *************** function _hash_to_string *****************
  1049 ;; Defined at:
  1050 ;;		line 270 in file "main.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;  string          2   45[COMRAM] PTR unsigned char 
  1053 ;;		 -> main@hash_string(65), 
  1054 ;;  hash            2   47[COMRAM] PTR const unsigned char 
  1055 ;;		 -> main@hash(32), 
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  i               2   50[COMRAM] unsigned int 
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1067 ;;      Params:         4       0       0       0       0       0       0       0       0
  1068 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1069 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1070 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1071 ;;Total ram usage:        7 bytes
  1072 ;; Hardware stack levels used:    1
  1073 ;; Hardware stack levels required when called:    4
  1074 ;; This function calls:
  1075 ;;		_sprintf
  1076 ;; This function is called by:
  1077 ;;		_main
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           	psect	text2
  1082  00697C                     __ptext2:
  1083                           	opt stack 0
  1084  00697C                     _hash_to_string:
  1085                           	opt stack 26
  1086                           
  1087                           ;main.c: 272: size_t i;
  1088                           ;main.c: 273: for (i = 0; i < 32; i++) {
  1089                           
  1090                           ;incstack = 0
  1091  00697C  0E00               	movlw	0
  1092  00697E  6E34               	movwf	hash_to_string@i+1,c
  1093  006980  0E00               	movlw	0
  1094  006982  6E33               	movwf	hash_to_string@i,c
  1095  006984                     l1908:
  1096  006984  5034               	movf	hash_to_string@i+1,w,c
  1097  006986  E120               	bnz	l170
  1098  006988  0E20               	movlw	32
  1099  00698A  5C33               	subwf	hash_to_string@i,w,c
  1100  00698C  B0D8               	btfsc	status,0,c
  1101  00698E  0012               	return	
  1102                           
  1103                           ;main.c: 274: string += sprintf(string, "%02x", hash[i]);
  1104  006990  C02E  F020         	movff	hash_to_string@string,sprintf@wh
  1105  006994  C02F  F021         	movff	hash_to_string@string+1,sprintf@wh+1
  1106  006998  0EFA               	movlw	low STR_1
  1107  00699A  6E22               	movwf	sprintf@f,c
  1108  00699C  0E7F               	movlw	high STR_1
  1109  00699E  6E23               	movwf	sprintf@f+1,c
  1110  0069A0  5033               	movf	hash_to_string@i,w,c
  1111  0069A2  2430               	addwf	hash_to_string@hash,w,c
  1112  0069A4  6ED9               	movwf	fsr2l,c
  1113  0069A6  5034               	movf	hash_to_string@i+1,w,c
  1114  0069A8  2031               	addwfc	hash_to_string@hash+1,w,c
  1115  0069AA  6EDA               	movwf	fsr2h,c
  1116  0069AC  50DF               	movf	indf2,w,c
  1117  0069AE  6E32               	movwf	??_hash_to_string& (0+255),c
  1118  0069B0  5032               	movf	??_hash_to_string,w,c
  1119  0069B2  6E24               	movwf	?_sprintf+4,c
  1120  0069B4  6A25               	clrf	?_sprintf+5,c
  1121  0069B6  EC0E  F035         	call	_sprintf	;wreg free
  1122  0069BA  5020               	movf	?_sprintf,w,c
  1123  0069BC  262E               	addwf	hash_to_string@string,f,c
  1124  0069BE  5021               	movf	?_sprintf+1,w,c
  1125  0069C0  222F               	addwfc	hash_to_string@string+1,f,c
  1126  0069C2  4A33               	infsnz	hash_to_string@i,f,c
  1127  0069C4  2A34               	incf	hash_to_string@i+1,f,c
  1128  0069C6  D7DE               	goto	l1908
  1129  0069C8                     l170:
  1130  0069C8  0012               	return		;funcret
  1131  0069CA                     __end_of_hash_to_string:
  1132                           	opt stack 0
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           postinc0	equ	0xFEE
  1138                           wreg	equ	0xFE8
  1139                           postdec1	equ	0xFE5
  1140                           plusw1	equ	0xFE3
  1141                           fsr1l	equ	0xFE1
  1142                           indf2	equ	0xFDF
  1143                           plusw2	equ	0xFDB
  1144                           fsr2h	equ	0xFDA
  1145                           fsr2l	equ	0xFD9
  1146                           status	equ	0xFD8
  1147                           
  1148 ;; *************** function _sprintf *****************
  1149 ;; Defined at:
  1150 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\sprintf.c"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;  wh              2   31[COMRAM] PTR unsigned char 
  1153 ;;		 -> main@hash_string(65), 
  1154 ;;  f               2   33[COMRAM] PTR const unsigned char 
  1155 ;;		 -> STR_1(5), 
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;  pb              4   41[COMRAM] struct __prbuf
  1158 ;;  ap              2   39[COMRAM] PTR void [1]
  1159 ;;		 -> ?_sprintf(2), ?_printf(2), 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  2   31[COMRAM] int 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1169 ;;      Params:         6       0       0       0       0       0       0       0       0
  1170 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1171 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1172 ;;      Totals:        14       0       0       0       0       0       0       0       0
  1173 ;;Total ram usage:       14 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    3
  1176 ;; This function calls:
  1177 ;;		__doprnt
  1178 ;; This function is called by:
  1179 ;;		_hash_to_string
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182                           
  1183                           	psect	text3
  1184  006A1C                     __ptext3:
  1185                           	opt stack 0
  1186  006A1C                     _sprintf:
  1187                           	opt stack 26
  1188                           
  1189                           ;incstack = 0
  1190  006A1C  C020  F02A         	movff	sprintf@wh,sprintf@pb
  1191  006A20  C021  F02B         	movff	sprintf@wh+1,sprintf@pb+1
  1192  006A24  0E00               	movlw	0
  1193  006A26  6E2C               	movwf	sprintf@pb+2,c
  1194  006A28  0E00               	movlw	0
  1195  006A2A  6E2D               	movwf	sprintf@pb+3,c
  1196  006A2C  0E24               	movlw	low (?_sprintf+4)
  1197  006A2E  6E28               	movwf	sprintf@ap,c
  1198  006A30  0E00               	movlw	high (?_sprintf+4)
  1199  006A32  6E29               	movwf	sprintf@ap+1,c
  1200  006A34  0E2A               	movlw	low sprintf@pb
  1201  006A36  6E08               	movwf	__doprnt@pb,c
  1202  006A38  0E00               	movlw	high sprintf@pb
  1203  006A3A  6E09               	movwf	__doprnt@pb+1,c
  1204  006A3C  C022  F00A         	movff	sprintf@f,__doprnt@f
  1205  006A40  C023  F00B         	movff	sprintf@f+1,__doprnt@f+1
  1206  006A44  0E28               	movlw	low sprintf@ap
  1207  006A46  6E0C               	movwf	__doprnt@ap,c
  1208  006A48  0E00               	movlw	high sprintf@ap
  1209  006A4A  6E0D               	movwf	__doprnt@ap+1,c
  1210  006A4C  EC0C  F037         	call	__doprnt	;wreg free
  1211  006A50  C02A  FFD9         	movff	sprintf@pb,fsr2l
  1212  006A54  C02B  FFDA         	movff	sprintf@pb+1,fsr2h
  1213  006A58  0E00               	movlw	0
  1214  006A5A  6EDF               	movwf	indf2,c
  1215  006A5C  C020  F026         	movff	sprintf@wh,??_sprintf
  1216  006A60  C021  F027         	movff	sprintf@wh+1,??_sprintf+1
  1217  006A64  1E26               	comf	??_sprintf,f,c
  1218  006A66  1E27               	comf	??_sprintf+1,f,c
  1219  006A68  4A26               	infsnz	??_sprintf,f,c
  1220  006A6A  2A27               	incf	??_sprintf+1,f,c
  1221  006A6C  502A               	movf	sprintf@pb,w,c
  1222  006A6E  2426               	addwf	??_sprintf,w,c
  1223  006A70  6E20               	movwf	?_sprintf,c
  1224  006A72  502B               	movf	sprintf@pb+1,w,c
  1225  006A74  2027               	addwfc	??_sprintf+1,w,c
  1226  006A76  6E21               	movwf	?_sprintf+1,c
  1227  006A78  0012               	return	
  1228  006A7A                     __end_of_sprintf:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           plusw1	equ	0xFE3
  1238                           fsr1l	equ	0xFE1
  1239                           indf2	equ	0xFDF
  1240                           plusw2	equ	0xFDB
  1241                           fsr2h	equ	0xFDA
  1242                           fsr2l	equ	0xFD9
  1243                           status	equ	0xFD8
  1244                           
  1245 ;; *************** function __doprnt *****************
  1246 ;; Defined at:
  1247 ;;		line 458 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  pb              2    7[COMRAM] PTR struct __prbuf
  1250 ;;		 -> sprintf@pb(4), printf@pb(4), 
  1251 ;;  f               2    9[COMRAM] PTR const unsigned char 
  1252 ;;		 -> STR_2(17), STR_1(5), 
  1253 ;;  ap              2   11[COMRAM] PTR PTR void 
  1254 ;;		 -> sprintf@ap(2), printf@ap(2), 
  1255 ;; Auto vars:     Size  Location     Type
  1256 ;;  idx             1   17[COMRAM] unsigned char 
  1257 ;;  tmpval          4    0        struct .
  1258 ;;  width           2   28[COMRAM] int 
  1259 ;;  cp              2   26[COMRAM] PTR const unsigned char 
  1260 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_3(7), 
  1261 ;;		 -> main@hash_string(65), 
  1262 ;;  len             2   24[COMRAM] unsigned int 
  1263 ;;  ccnt            2   22[COMRAM] int 
  1264 ;;  val             2   19[COMRAM] unsigned int 
  1265 ;;  c               1   30[COMRAM] char 
  1266 ;;  prec            1   21[COMRAM] char 
  1267 ;;  flag            1   18[COMRAM] unsigned char 
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  2    7[COMRAM] int 
  1270 ;; Registers used:
  1271 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1277 ;;      Params:         6       0       0       0       0       0       0       0       0
  1278 ;;      Locals:        14       0       0       0       0       0       0       0       0
  1279 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1280 ;;      Totals:        24       0       0       0       0       0       0       0       0
  1281 ;;Total ram usage:       24 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; Hardware stack levels required when called:    2
  1284 ;; This function calls:
  1285 ;;		Absolute function
  1286 ;;		___lwdiv
  1287 ;;		___wmul
  1288 ;;		_isdigit
  1289 ;;		_putch
  1290 ;; This function is called by:
  1291 ;;		_printf
  1292 ;;		_sprintf
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	text4
  1297  006E18                     __ptext4:
  1298                           	opt stack 0
  1299  006E18                     __doprnt:
  1300                           	opt stack 27
  1301                           
  1302                           ;doprnt.c: 499: signed char c;
  1303                           ;doprnt.c: 501: int width;
  1304                           ;doprnt.c: 506: signed char prec;
  1305                           ;doprnt.c: 508: unsigned char flag;
  1306                           ;doprnt.c: 510: int ccnt = 0;
  1307                           
  1308                           ;incstack = 0
  1309  006E18  0E00               	movlw	0
  1310  006E1A  6E18               	movwf	__doprnt@ccnt+1,c
  1311  006E1C  0E00               	movlw	0
  1312  006E1E  6E17               	movwf	__doprnt@ccnt,c
  1313                           
  1314                           ;doprnt.c: 523: union {
  1315                           ;doprnt.c: 524: unsigned long vd;
  1316                           ;doprnt.c: 525: double integ;
  1317                           ;doprnt.c: 526: } tmpval;
  1318                           ;doprnt.c: 528: unsigned int val;
  1319                           ;doprnt.c: 529: unsigned len;
  1320                           ;doprnt.c: 530: const char * cp;
  1321                           ;doprnt.c: 536: while(c = *f++) {
  1322  006E20  D2A1               	goto	u1170
  1323  006E22                     
  1324                           ;doprnt.c: 538: if(c != '%')
  1325  006E22  0E25               	movlw	37
  1326  006E24  181F               	xorwf	__doprnt@c,w,c
  1327  006E26  B4D8               	btfsc	status,2,c
  1328  006E28  D035               	goto	l191
  1329                           
  1330                           ;doprnt.c: 540: {
  1331                           ;doprnt.c: 541: if(pb->func) (pb->func(c)),(++ccnt); else ((*pb->ptr++ = c),(++ccnt));
  1332  006E2A  EE20 F002          	lfsr	2,2
  1333  006E2E  5008               	movf	__doprnt@pb,w,c
  1334  006E30  26D9               	addwf	fsr2l,f,c
  1335  006E32  5009               	movf	__doprnt@pb+1,w,c
  1336  006E34  22DA               	addwfc	fsr2h,f,c
  1337  006E36  50DE               	movf	postinc2,w,c
  1338  006E38  10DE               	iorwf	postinc2,w,c
  1339  006E3A  B4D8               	btfsc	status,2,c
  1340  006E3C  D013               	goto	l192
  1341  006E3E  EE20 F002          	lfsr	2,2
  1342  006E42  5008               	movf	__doprnt@pb,w,c
  1343  006E44  26D9               	addwf	fsr2l,f,c
  1344  006E46  5009               	movf	__doprnt@pb+1,w,c
  1345  006E48  22DA               	addwfc	fsr2h,f,c
  1346  006E4A  D801               	call	u878
  1347  006E4C  D020               	goto	l1516
  1348  006E4E                     u878:
  1349  006E4E  0005               	push	
  1350  006E50  6EFA               	movwf	pclath,c
  1351  006E52  50DE               	movf	postinc2,w,c
  1352  006E54  6EFD               	movwf	tosl,c
  1353  006E56  50DE               	movf	postinc2,w,c
  1354  006E58  6EFE               	movwf	tosh,c
  1355  006E5A  50F8               	movf	tblptru,w,c
  1356  006E5C  6EFF               	movwf	tosu,c
  1357  006E5E  50FA               	movf	pclath,w,c
  1358  006E60  501F               	movf	__doprnt@c,w,c
  1359  006E62  0012               	return		;indir
  1360  006E64                     l192:
  1361  006E64  C008  FFD9         	movff	__doprnt@pb,fsr2l
  1362  006E68  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  1363  006E6C  CFDE F00E          	movff	postinc2,??__doprnt
  1364  006E70  CFDD F00F          	movff	postdec2,??__doprnt+1
  1365  006E74  C00E  FFD9         	movff	??__doprnt,fsr2l
  1366  006E78  C00F  FFDA         	movff	??__doprnt+1,fsr2h
  1367  006E7C  C01F  FFDF         	movff	__doprnt@c,indf2
  1368  006E80  C008  FFD9         	movff	__doprnt@pb,fsr2l
  1369  006E84  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  1370  006E88  2ADE               	incf	postinc2,f,c
  1371  006E8A  0E00               	movlw	0
  1372  006E8C  22DD               	addwfc	postdec2,f,c
  1373  006E8E                     l1516:
  1374  006E8E  4A17               	infsnz	__doprnt@ccnt,f,c
  1375  006E90  2A18               	incf	__doprnt@ccnt+1,f,c
  1376                           
  1377                           ;doprnt.c: 542: continue;
  1378  006E92  D268               	goto	u1170
  1379  006E94                     l191:
  1380                           
  1381                           ;doprnt.c: 543: }
  1382                           ;doprnt.c: 546: width = 0;
  1383  006E94  0E00               	movlw	0
  1384  006E96  6E1E               	movwf	__doprnt@width+1,c
  1385  006E98  0E00               	movlw	0
  1386  006E9A  6E1D               	movwf	__doprnt@width,c
  1387                           
  1388                           ;doprnt.c: 548: flag = 0;
  1389  006E9C  0E00               	movlw	0
  1390  006E9E  6E13               	movwf	__doprnt@flag,c
  1391                           
  1392                           ;doprnt.c: 551: switch(*f) {
  1393                           
  1394                           ;doprnt.c: 550: for(;;) {
  1395  006EA0  D003               	goto	l195
  1396  006EA2                     
  1397                           ;doprnt.c: 580: flag |= 0x04;
  1398  006EA2  8413               	bsf	__doprnt@flag,2,c
  1399                           
  1400                           ;doprnt.c: 581: f++;
  1401  006EA4  4A0A               	infsnz	__doprnt@f,f,c
  1402  006EA6  2A0B               	incf	__doprnt@f+1,f,c
  1403  006EA8                     l195:
  1404  006EA8  C00A  FFF6         	movff	__doprnt@f,tblptrl
  1405  006EAC  C00B  FFF7         	movff	__doprnt@f+1,tblptrh
  1406  006EB0                     	if	0	;tblptru may be non-zero
  1407  006EB0                     	endif
  1408  006EB0                     	if	0	;tblptru may be non-zero
  1409  006EB0                     	endif
  1410  006EB0  0008               	tblrd		*
  1411  006EB2  50F5               	movf	tablat,w,c
  1412                           
  1413                           ; Switch size 1, requested type "space"
  1414                           ; Number of cases is 1, Range of values is 48 to 48
  1415                           ; switch strategies available:
  1416                           ; Name         Instructions Cycles
  1417                           ; simple_byte            4     3 (average)
  1418                           ;	Chosen strategy is simple_byte
  1419  006EB4  0A30               	xorlw	48	; case 48
  1420  006EB6  B4D8               	btfsc	status,2,c
  1421  006EB8  D7F4               	goto	l196
  1422                           
  1423                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1424                           
  1425                           ;doprnt.c: 586: }
  1426                           
  1427                           ;doprnt.c: 585: break;
  1428  006EBA  C00A  FFF6         	movff	__doprnt@f,tblptrl
  1429  006EBE  C00B  FFF7         	movff	__doprnt@f+1,tblptrh
  1430  006EC2                     	if	0	;tblptru may be non-zero
  1431  006EC2                     	endif
  1432  006EC2                     	if	0	;tblptru may be non-zero
  1433  006EC2                     	endif
  1434  006EC2  0008               	tblrd		*
  1435  006EC4  50F5               	movf	tablat,w,c
  1436  006EC6  ECFE  F033         	call	_isdigit
  1437  006ECA  A0D8               	btfss	status,0,c
  1438  006ECC  D11C               	goto	l203
  1439                           
  1440                           ;doprnt.c: 598: width = 0;
  1441  006ECE  0E00               	movlw	0
  1442  006ED0  6E1E               	movwf	__doprnt@width+1,c
  1443  006ED2  0E00               	movlw	0
  1444  006ED4  6E1D               	movwf	__doprnt@width,c
  1445  006ED6                     
  1446                           ;doprnt.c: 600: width *= 10;
  1447  006ED6  C01D  F001         	movff	__doprnt@width,___wmul@multiplier
  1448  006EDA  C01E  F002         	movff	__doprnt@width+1,___wmul@multiplier+1
  1449  006EDE  0E00               	movlw	0
  1450  006EE0  6E04               	movwf	___wmul@multiplicand+1,c
  1451  006EE2  0E0A               	movlw	10
  1452  006EE4  6E03               	movwf	___wmul@multiplicand,c
  1453  006EE6  EC1D  F034         	call	___wmul	;wreg free
  1454  006EEA  C001  F01D         	movff	?___wmul,__doprnt@width
  1455  006EEE  C002  F01E         	movff	?___wmul+1,__doprnt@width+1
  1456                           
  1457                           ;doprnt.c: 601: width += *f++ - '0';
  1458  006EF2  0ED0               	movlw	208
  1459  006EF4  6E0E               	movwf	??__doprnt& (0+255),c
  1460  006EF6  0EFF               	movlw	255
  1461  006EF8  6E0F               	movwf	(??__doprnt+1)& (0+255),c
  1462  006EFA  C00A  FFF6         	movff	__doprnt@f,tblptrl
  1463  006EFE  C00B  FFF7         	movff	__doprnt@f+1,tblptrh
  1464  006F02                     	if	0	;tblptru may be non-zero
  1465  006F02                     	endif
  1466  006F02                     	if	0	;tblptru may be non-zero
  1467  006F02                     	endif
  1468  006F02  0008               	tblrd		*
  1469  006F04  50F5               	movf	tablat,w,c
  1470  006F06  6E10               	movwf	(??__doprnt+2)& (0+255),c
  1471  006F08  6A11               	clrf	(??__doprnt+3)& (0+255),c
  1472  006F0A  500E               	movf	??__doprnt,w,c
  1473  006F0C  2610               	addwf	??__doprnt+2,f,c
  1474  006F0E  500F               	movf	??__doprnt+1,w,c
  1475  006F10  2211               	addwfc	??__doprnt+3,f,c
  1476  006F12  5010               	movf	??__doprnt+2,w,c
  1477  006F14  261D               	addwf	__doprnt@width,f,c
  1478  006F16  5011               	movf	??__doprnt+3,w,c
  1479  006F18  221E               	addwfc	__doprnt@width+1,f,c
  1480  006F1A  4A0A               	infsnz	__doprnt@f,f,c
  1481  006F1C  2A0B               	incf	__doprnt@f+1,f,c
  1482                           
  1483                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1484  006F1E  C00A  FFF6         	movff	__doprnt@f,tblptrl
  1485  006F22  C00B  FFF7         	movff	__doprnt@f+1,tblptrh
  1486  006F26                     	if	0	;tblptru may be non-zero
  1487  006F26                     	endif
  1488  006F26                     	if	0	;tblptru may be non-zero
  1489  006F26                     	endif
  1490  006F26  0008               	tblrd		*
  1491  006F28  50F5               	movf	tablat,w,c
  1492  006F2A  ECFE  F033         	call	_isdigit
  1493  006F2E  A0D8               	btfss	status,0,c
  1494  006F30  D0EA               	goto	l203
  1495  006F32  D7D1               	goto	l201
  1496  006F34                     
  1497                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1498  006F34  C00C  FFD9         	movff	__doprnt@ap,fsr2l
  1499  006F38  C00D  FFDA         	movff	__doprnt@ap+1,fsr2h
  1500  006F3C  CFDF F00E          	movff	indf2,??__doprnt
  1501  006F40  0E02               	movlw	2
  1502  006F42  26DE               	addwf	postinc2,f,c
  1503  006F44  CFDF F00F          	movff	indf2,??__doprnt+1
  1504  006F48  0E00               	movlw	0
  1505  006F4A  22DD               	addwfc	postdec2,f,c
  1506  006F4C  C00E  FFD9         	movff	??__doprnt,fsr2l
  1507  006F50  C00F  FFDA         	movff	??__doprnt+1,fsr2h
  1508  006F54  CFDE F01B          	movff	postinc2,__doprnt@cp
  1509  006F58  CFDD F01C          	movff	postdec2,__doprnt@cp+1
  1510                           
  1511                           ;doprnt.c: 740: if(!cp)
  1512  006F5C  501B               	movf	__doprnt@cp,w,c
  1513  006F5E  101C               	iorwf	__doprnt@cp+1,w,c
  1514  006F60  A4D8               	btfss	status,2,c
  1515  006F62  D004               	goto	l209
  1516                           
  1517                           ;doprnt.c: 741: cp = "(null)";
  1518  006F64  0EF3               	movlw	low STR_3
  1519  006F66  6E1B               	movwf	__doprnt@cp,c
  1520  006F68  0E7F               	movlw	high STR_3
  1521  006F6A  6E1C               	movwf	__doprnt@cp+1,c
  1522  006F6C                     l209:
  1523                           
  1524                           ;doprnt.c: 745: len = 0;
  1525  006F6C  0E00               	movlw	0
  1526  006F6E  6E1A               	movwf	__doprnt@len+1,c
  1527  006F70  0E00               	movlw	0
  1528  006F72  6E19               	movwf	__doprnt@len,c
  1529                           
  1530                           ;doprnt.c: 746: while(cp[len])
  1531  006F74  D002               	goto	l210
  1532  006F76                     
  1533                           ;doprnt.c: 747: len++;
  1534  006F76  4A19               	infsnz	__doprnt@len,f,c
  1535  006F78  2A1A               	incf	__doprnt@len+1,f,c
  1536  006F7A                     l210:
  1537  006F7A  5019               	movf	__doprnt@len,w,c
  1538  006F7C  241B               	addwf	__doprnt@cp,w,c
  1539  006F7E  6E0E               	movwf	??__doprnt& (0+255),c
  1540  006F80  501A               	movf	__doprnt@len+1,w,c
  1541  006F82  201C               	addwfc	__doprnt@cp+1,w,c
  1542  006F84  6E0F               	movwf	(??__doprnt+1)& (0+255),c
  1543  006F86  C00E  FFF6         	movff	??__doprnt,tblptrl
  1544  006F8A  C00F  FFF7         	movff	??__doprnt+1,tblptrh
  1545  006F8E  6AF8               	clrf	tblptru,c
  1546  006F90  0E07               	movlw	(high __ramtop+-1)
  1547  006F92  64F7               	cpfsgt	tblptrh,c
  1548  006F94  D003               	bra	u917
  1549  006F96  0008               	tblrd		*
  1550  006F98  50F5               	movf	tablat,w,c
  1551  006F9A  D005               	bra	u910
  1552  006F9C                     u917:
  1553  006F9C  CFF6 FFE1          	movff	tblptrl,fsr1l
  1554  006FA0  CFF7 FFE2          	movff	tblptrh,fsr1h
  1555  006FA4  50E7               	movf	indf1,w,c
  1556  006FA6                     u910:
  1557  006FA6  0900               	iorlw	0
  1558  006FA8  A4D8               	btfss	status,2,c
  1559  006FAA  D7E5               	goto	l211
  1560                           
  1561                           ;doprnt.c: 757: if(width > len)
  1562  006FAC  501D               	movf	__doprnt@width,w,c
  1563  006FAE  5C19               	subwf	__doprnt@len,w,c
  1564  006FB0  501E               	movf	__doprnt@width+1,w,c
  1565  006FB2  581A               	subwfb	__doprnt@len+1,w,c
  1566  006FB4  B0D8               	btfsc	status,0,c
  1567  006FB6  D005               	goto	l213
  1568                           
  1569                           ;doprnt.c: 758: width -= len;
  1570  006FB8  5019               	movf	__doprnt@len,w,c
  1571  006FBA  5E1D               	subwf	__doprnt@width,f,c
  1572  006FBC  501A               	movf	__doprnt@len+1,w,c
  1573  006FBE  5A1E               	subwfb	__doprnt@width+1,f,c
  1574  006FC0  D039               	goto	l218
  1575  006FC2                     l213:
  1576                           
  1577                           ;doprnt.c: 759: else
  1578                           ;doprnt.c: 760: width = 0;
  1579  006FC2  0E00               	movlw	0
  1580  006FC4  6E1E               	movwf	__doprnt@width+1,c
  1581  006FC6  0E00               	movlw	0
  1582  006FC8  6E1D               	movwf	__doprnt@width,c
  1583                           
  1584                           ;doprnt.c: 764: while(width--)
  1585  006FCA  D034               	goto	l218
  1586  006FCC                     l1556:
  1587                           
  1588                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')),(++ccnt); else ((*pb->ptr++ = ' '),(++ccnt)
      +                          );
  1589  006FCC  EE20 F002          	lfsr	2,2
  1590  006FD0  5008               	movf	__doprnt@pb,w,c
  1591  006FD2  26D9               	addwf	fsr2l,f,c
  1592  006FD4  5009               	movf	__doprnt@pb+1,w,c
  1593  006FD6  22DA               	addwfc	fsr2h,f,c
  1594  006FD8  50DE               	movf	postinc2,w,c
  1595  006FDA  10DE               	iorwf	postinc2,w,c
  1596  006FDC  B4D8               	btfsc	status,2,c
  1597  006FDE  D013               	goto	l217
  1598  006FE0  EE20 F002          	lfsr	2,2
  1599  006FE4  5008               	movf	__doprnt@pb,w,c
  1600  006FE6  26D9               	addwf	fsr2l,f,c
  1601  006FE8  5009               	movf	__doprnt@pb+1,w,c
  1602  006FEA  22DA               	addwfc	fsr2h,f,c
  1603  006FEC  D801               	call	u958
  1604  006FEE  D020               	goto	l1566
  1605  006FF0                     u958:
  1606  006FF0  0005               	push	
  1607  006FF2  6EFA               	movwf	pclath,c
  1608  006FF4  50DE               	movf	postinc2,w,c
  1609  006FF6  6EFD               	movwf	tosl,c
  1610  006FF8  50DE               	movf	postinc2,w,c
  1611  006FFA  6EFE               	movwf	tosh,c
  1612  006FFC  50F8               	movf	tblptru,w,c
  1613  006FFE  6EFF               	movwf	tosu,c
  1614  007000  50FA               	movf	pclath,w,c
  1615  007002  0E20               	movlw	32
  1616  007004  0012               	return		;indir
  1617  007006                     l217:
  1618  007006  C008  FFD9         	movff	__doprnt@pb,fsr2l
  1619  00700A  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  1620  00700E  CFDE F00E          	movff	postinc2,??__doprnt
  1621  007012  CFDD F00F          	movff	postdec2,??__doprnt+1
  1622  007016  C00E  FFD9         	movff	??__doprnt,fsr2l
  1623  00701A  C00F  FFDA         	movff	??__doprnt+1,fsr2h
  1624  00701E  0E20               	movlw	32
  1625  007020  6EDF               	movwf	indf2,c
  1626  007022  C008  FFD9         	movff	__doprnt@pb,fsr2l
  1627  007026  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  1628  00702A  2ADE               	incf	postinc2,f,c
  1629  00702C  0E00               	movlw	0
  1630  00702E  22DD               	addwfc	postdec2,f,c
  1631  007030                     l1566:
  1632  007030  4A17               	infsnz	__doprnt@ccnt,f,c
  1633  007032  2A18               	incf	__doprnt@ccnt+1,f,c
  1634  007034                     l218:
  1635  007034  061D               	decf	__doprnt@width,f,c
  1636  007036  A0D8               	btfss	status,0,c
  1637  007038  061E               	decf	__doprnt@width+1,f,c
  1638  00703A  281D               	incf	__doprnt@width,w,c
  1639  00703C  E1C7               	bnz	l1556
  1640  00703E  281E               	incf	__doprnt@width+1,w,c
  1641  007040  B4D8               	btfsc	status,2,c
  1642  007042  D058               	goto	l223
  1643  007044  D7C3               	goto	l216
  1644  007046                     l1570:
  1645                           
  1646                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)),(++ccnt); else ((*pb->ptr++ = *cp++),(++c
      +                          cnt));
  1647  007046  EE20 F002          	lfsr	2,2
  1648  00704A  5008               	movf	__doprnt@pb,w,c
  1649  00704C  26D9               	addwf	fsr2l,f,c
  1650  00704E  5009               	movf	__doprnt@pb+1,w,c
  1651  007050  22DA               	addwfc	fsr2h,f,c
  1652  007052  50DE               	movf	postinc2,w,c
  1653  007054  10DE               	iorwf	postinc2,w,c
  1654  007056  B4D8               	btfsc	status,2,c
  1655  007058  D025               	goto	l222
  1656  00705A  EE20 F002          	lfsr	2,2
  1657  00705E  5008               	movf	__doprnt@pb,w,c
  1658  007060  26D9               	addwf	fsr2l,f,c
  1659  007062  5009               	movf	__doprnt@pb+1,w,c
  1660  007064  22DA               	addwfc	fsr2h,f,c
  1661  007066  D801               	call	u988
  1662  007068  D01A               	goto	u989
  1663  00706A                     u988:
  1664  00706A  0005               	push	
  1665  00706C  6EFA               	movwf	pclath,c
  1666  00706E  50DE               	movf	postinc2,w,c
  1667  007070  6EFD               	movwf	tosl,c
  1668  007072  50DE               	movf	postinc2,w,c
  1669  007074  6EFE               	movwf	tosh,c
  1670  007076  50F8               	movf	tblptru,w,c
  1671  007078  6EFF               	movwf	tosu,c
  1672  00707A  50FA               	movf	pclath,w,c
  1673  00707C  C01B  FFF6         	movff	__doprnt@cp,tblptrl
  1674  007080  C01C  FFF7         	movff	__doprnt@cp+1,tblptrh
  1675  007084  6AF8               	clrf	tblptru,c
  1676  007086  0E07               	movlw	(high __ramtop+-1)
  1677  007088  64F7               	cpfsgt	tblptrh,c
  1678  00708A  D003               	bra	u997
  1679  00708C  0008               	tblrd		*
  1680  00708E  50F5               	movf	tablat,w,c
  1681  007090  D005               	bra	u990
  1682  007092                     u997:
  1683  007092  CFF6 FFE1          	movff	tblptrl,fsr1l
  1684  007096  CFF7 FFE2          	movff	tblptrh,fsr1h
  1685  00709A  50E7               	movf	indf1,w,c
  1686  00709C                     u990:
  1687  00709C  0012               	return		;indir
  1688  00709E                     u989:
  1689  00709E  4A1B               	infsnz	__doprnt@cp,f,c
  1690  0070A0  2A1C               	incf	__doprnt@cp+1,f,c
  1691  0070A2  D026               	goto	l1584
  1692  0070A4                     l222:
  1693  0070A4  C01B  FFF6         	movff	__doprnt@cp,tblptrl
  1694  0070A8  C01C  FFF7         	movff	__doprnt@cp+1,tblptrh
  1695  0070AC  6AF8               	clrf	tblptru,c
  1696  0070AE  C008  FFD9         	movff	__doprnt@pb,fsr2l
  1697  0070B2  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  1698  0070B6  CFDE F00E          	movff	postinc2,??__doprnt
  1699  0070BA  CFDD F00F          	movff	postdec2,??__doprnt+1
  1700  0070BE  C00E  FFD9         	movff	??__doprnt,fsr2l
  1701  0070C2  C00F  FFDA         	movff	??__doprnt+1,fsr2h
  1702  0070C6  0E07               	movlw	(high __ramtop+-1)
  1703  0070C8  64F7               	cpfsgt	tblptrh,c
  1704  0070CA  D003               	bra	u1007
  1705  0070CC  0008               	tblrd		*
  1706  0070CE  50F5               	movf	tablat,w,c
  1707  0070D0  D005               	bra	u1000
  1708  0070D2                     u1007:
  1709  0070D2  CFF6 FFE1          	movff	tblptrl,fsr1l
  1710  0070D6  CFF7 FFE2          	movff	tblptrh,fsr1h
  1711  0070DA  50E7               	movf	indf1,w,c
  1712  0070DC                     u1000:
  1713  0070DC  6EDF               	movwf	indf2,c
  1714  0070DE  4A1B               	infsnz	__doprnt@cp,f,c
  1715  0070E0  2A1C               	incf	__doprnt@cp+1,f,c
  1716  0070E2  C008  FFD9         	movff	__doprnt@pb,fsr2l
  1717  0070E6  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  1718  0070EA  2ADE               	incf	postinc2,f,c
  1719  0070EC  0E00               	movlw	0
  1720  0070EE  22DD               	addwfc	postdec2,f,c
  1721  0070F0                     l1584:
  1722  0070F0  4A17               	infsnz	__doprnt@ccnt,f,c
  1723  0070F2  2A18               	incf	__doprnt@ccnt+1,f,c
  1724  0070F4                     l223:
  1725  0070F4  0619               	decf	__doprnt@len,f,c
  1726  0070F6  A0D8               	btfss	status,0,c
  1727  0070F8  061A               	decf	__doprnt@len+1,f,c
  1728  0070FA  2819               	incf	__doprnt@len,w,c
  1729  0070FC  E1A4               	bnz	l1570
  1730  0070FE  281A               	incf	__doprnt@len+1,w,c
  1731  007100  B4D8               	btfsc	status,2,c
  1732  007102  D130               	goto	u1170
  1733  007104  D7A0               	goto	l221
  1734  007106                     l203:
  1735  007106  C00A  FFF6         	movff	__doprnt@f,tblptrl
  1736  00710A  C00B  FFF7         	movff	__doprnt@f+1,tblptrh
  1737  00710E  4A0A               	infsnz	__doprnt@f,f,c
  1738  007110  2A0B               	incf	__doprnt@f+1,f,c
  1739  007112                     	if	0	;tblptru may be non-zero
  1740  007112                     	endif
  1741  007112                     	if	0	;tblptru may be non-zero
  1742  007112                     	endif
  1743  007112  0008               	tblrd		*
  1744  007114  CFF5 F01F          	movff	tablat,__doprnt@c
  1745  007118  501F               	movf	__doprnt@c,w,c
  1746                           
  1747                           ; Switch size 1, requested type "space"
  1748                           ; Number of cases is 3, Range of values is 0 to 120
  1749                           ; switch strategies available:
  1750                           ; Name         Instructions Cycles
  1751                           ; simple_byte           10     6 (average)
  1752                           ;	Chosen strategy is simple_byte
  1753  00711A  0A00               	xorlw	0	; case 0
  1754  00711C  B4D8               	btfsc	status,2,c
  1755  00711E  D12E               	goto	u1180
  1756  007120  0A73               	xorlw	115	; case 115
  1757  007122  B4D8               	btfsc	status,2,c
  1758  007124  D707               	goto	l208
  1759  007126  0A0B               	xorlw	11	; case 120
  1760  007128  A4D8               	btfss	status,2,c
  1761  00712A  D11C               	goto	u1170
  1762                           
  1763                           ;doprnt.c: 1273: {
  1764                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1765  00712C  C00C  FFD9         	movff	__doprnt@ap,fsr2l
  1766  007130  C00D  FFDA         	movff	__doprnt@ap+1,fsr2h
  1767  007134  CFDF F00E          	movff	indf2,??__doprnt
  1768  007138  0E02               	movlw	2
  1769  00713A  26DE               	addwf	postinc2,f,c
  1770  00713C  CFDF F00F          	movff	indf2,??__doprnt+1
  1771  007140  0E00               	movlw	0
  1772  007142  22DD               	addwfc	postdec2,f,c
  1773  007144  C00E  FFD9         	movff	??__doprnt,fsr2l
  1774  007148  C00F  FFDA         	movff	??__doprnt+1,fsr2h
  1775  00714C  CFDE F014          	movff	postinc2,__doprnt@val
  1776  007150  CFDD F015          	movff	postdec2,__doprnt@val+1
  1777                           
  1778                           ;doprnt.c: 1287: }
  1779                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1780  007154  0E01               	movlw	1
  1781  007156  6E1F               	movwf	__doprnt@c,c
  1782  007158                     l1596:
  1783  007158  0E04               	movlw	4
  1784  00715A  181F               	xorwf	__doprnt@c,w,c
  1785  00715C  B4D8               	btfsc	status,2,c
  1786  00715E  D012               	goto	u1040
  1787                           
  1788                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1789  007160  501F               	movf	__doprnt@c,w,c
  1790  007162  0D02               	mullw	2
  1791  007164  0EB9               	movlw	low _hexpowers
  1792  007166  24F3               	addwf	prodl,w,c
  1793  007168  6EF6               	movwf	tblptrl,c
  1794  00716A  0E7F               	movlw	high _hexpowers
  1795  00716C  20F4               	addwfc	prodh,w,c
  1796  00716E  6EF7               	movwf	tblptrh,c
  1797  007170                     	if	0	;There are less than 3 active tblptr bytes
  1798  007170                     	endif
  1799  007170  0009               	tblrd		*+
  1800  007172  50F5               	movf	tablat,w,c
  1801  007174  5C14               	subwf	__doprnt@val,w,c
  1802  007176  0009               	tblrd		*+
  1803  007178  50F5               	movf	tablat,w,c
  1804  00717A  5815               	subwfb	__doprnt@val+1,w,c
  1805  00717C  A0D8               	btfss	status,0,c
  1806  00717E  D002               	goto	u1040
  1807                           
  1808                           ;doprnt.c: 1318: break;
  1809  007180  2A1F               	incf	__doprnt@c,f,c
  1810  007182  D7EA               	goto	l1596
  1811  007184                     u1040:
  1812                           
  1813                           ;doprnt.c: 1381: if(width > c)
  1814  007184  0E80               	movlw	128
  1815  007186  BE1F               	btfsc	__doprnt@c,7,c
  1816  007188  0E7F               	movlw	127
  1817  00718A  6E0E               	movwf	??__doprnt& (0+255),c
  1818  00718C  501D               	movf	__doprnt@width,w,c
  1819  00718E  5C1F               	subwf	__doprnt@c,w,c
  1820  007190  501E               	movf	__doprnt@width+1,w,c
  1821  007192  0A80               	xorlw	128
  1822  007194  580E               	subwfb	??__doprnt& (0+255),w,c
  1823  007196  B0D8               	btfsc	status,0,c
  1824  007198  D007               	goto	l229
  1825                           
  1826                           ;doprnt.c: 1382: width -= c;
  1827  00719A  501F               	movf	__doprnt@c,w,c
  1828  00719C  5E1D               	subwf	__doprnt@width,f,c
  1829  00719E  0E00               	movlw	0
  1830  0071A0  BE1F               	btfsc	__doprnt@c,7,c
  1831  0071A2  0EFF               	movlw	255
  1832  0071A4  5A1E               	subwfb	__doprnt@width+1,f,c
  1833  0071A6  D004               	goto	l230
  1834  0071A8                     l229:
  1835                           
  1836                           ;doprnt.c: 1383: else
  1837                           ;doprnt.c: 1384: width = 0;
  1838  0071A8  0E00               	movlw	0
  1839  0071AA  6E1E               	movwf	__doprnt@width+1,c
  1840  0071AC  0E00               	movlw	0
  1841  0071AE  6E1D               	movwf	__doprnt@width,c
  1842  0071B0                     l230:
  1843                           
  1844                           ;doprnt.c: 1387: if(flag & 0x04) {
  1845  0071B0  A413               	btfss	__doprnt@flag,2,c
  1846  0071B2  D03C               	goto	l231
  1847  0071B4                     
  1848                           ;doprnt.c: 1415: if(width)
  1849  0071B4  501D               	movf	__doprnt@width,w,c
  1850  0071B6  101E               	iorwf	__doprnt@width+1,w,c
  1851  0071B8  B4D8               	btfsc	status,2,c
  1852  0071BA  D077               	goto	u1140
  1853                           
  1854                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')),(++ccnt); else ((*pb->ptr++ = '0'),(++ccnt
      +                          ));
  1855                           
  1856                           ;doprnt.c: 1416: do
  1857  0071BC  EE20 F002          	lfsr	2,2
  1858  0071C0  5008               	movf	__doprnt@pb,w,c
  1859  0071C2  26D9               	addwf	fsr2l,f,c
  1860  0071C4  5009               	movf	__doprnt@pb+1,w,c
  1861  0071C6  22DA               	addwfc	fsr2h,f,c
  1862  0071C8  50DE               	movf	postinc2,w,c
  1863  0071CA  10DE               	iorwf	postinc2,w,c
  1864  0071CC  B4D8               	btfsc	status,2,c
  1865  0071CE  D013               	goto	l234
  1866  0071D0  EE20 F002          	lfsr	2,2
  1867  0071D4  5008               	movf	__doprnt@pb,w,c
  1868  0071D6  26D9               	addwf	fsr2l,f,c
  1869  0071D8  5009               	movf	__doprnt@pb+1,w,c
  1870  0071DA  22DA               	addwfc	fsr2h,f,c
  1871  0071DC  D801               	call	u1098
  1872  0071DE  D020               	goto	l1628
  1873  0071E0                     u1098:
  1874  0071E0  0005               	push	
  1875  0071E2  6EFA               	movwf	pclath,c
  1876  0071E4  50DE               	movf	postinc2,w,c
  1877  0071E6  6EFD               	movwf	tosl,c
  1878  0071E8  50DE               	movf	postinc2,w,c
  1879  0071EA  6EFE               	movwf	tosh,c
  1880  0071EC  50F8               	movf	tblptru,w,c
  1881  0071EE  6EFF               	movwf	tosu,c
  1882  0071F0  50FA               	movf	pclath,w,c
  1883  0071F2  0E30               	movlw	48
  1884  0071F4  0012               	return		;indir
  1885  0071F6                     l234:
  1886  0071F6  C008  FFD9         	movff	__doprnt@pb,fsr2l
  1887  0071FA  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  1888  0071FE  CFDE F00E          	movff	postinc2,??__doprnt
  1889  007202  CFDD F00F          	movff	postdec2,??__doprnt+1
  1890  007206  C00E  FFD9         	movff	??__doprnt,fsr2l
  1891  00720A  C00F  FFDA         	movff	??__doprnt+1,fsr2h
  1892  00720E  0E30               	movlw	48
  1893  007210  6EDF               	movwf	indf2,c
  1894  007212  C008  FFD9         	movff	__doprnt@pb,fsr2l
  1895  007216  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  1896  00721A  2ADE               	incf	postinc2,f,c
  1897  00721C  0E00               	movlw	0
  1898  00721E  22DD               	addwfc	postdec2,f,c
  1899  007220                     l1628:
  1900  007220  4A17               	infsnz	__doprnt@ccnt,f,c
  1901  007222  2A18               	incf	__doprnt@ccnt+1,f,c
  1902                           
  1903                           ;doprnt.c: 1418: while(--width);
  1904  007224  061D               	decf	__doprnt@width,f,c
  1905  007226  A0D8               	btfss	status,0,c
  1906  007228  061E               	decf	__doprnt@width+1,f,c
  1907  00722A  D7C4               	goto	L5
  1908  00722C                     l231:
  1909                           
  1910                           ;doprnt.c: 1422: {
  1911                           ;doprnt.c: 1424: if(width
  1912                           ;doprnt.c: 1428: )
  1913  00722C  501D               	movf	__doprnt@width,w,c
  1914  00722E  101E               	iorwf	__doprnt@width+1,w,c
  1915  007230  B4D8               	btfsc	status,2,c
  1916  007232  D03B               	goto	u1140
  1917  007234                     u1110:
  1918                           
  1919                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')),(++ccnt); else ((*pb->ptr++ = ' '),(++ccnt
      +                          ));
  1920                           
  1921                           ;doprnt.c: 1429: do
  1922  007234  EE20 F002          	lfsr	2,2
  1923  007238  5008               	movf	__doprnt@pb,w,c
  1924  00723A  26D9               	addwf	fsr2l,f,c
  1925  00723C  5009               	movf	__doprnt@pb+1,w,c
  1926  00723E  22DA               	addwfc	fsr2h,f,c
  1927  007240  50DE               	movf	postinc2,w,c
  1928  007242  10DE               	iorwf	postinc2,w,c
  1929  007244  B4D8               	btfsc	status,2,c
  1930  007246  D013               	goto	l240
  1931  007248  EE20 F002          	lfsr	2,2
  1932  00724C  5008               	movf	__doprnt@pb,w,c
  1933  00724E  26D9               	addwf	fsr2l,f,c
  1934  007250  5009               	movf	__doprnt@pb+1,w,c
  1935  007252  22DA               	addwfc	fsr2h,f,c
  1936  007254  D801               	call	u1138
  1937  007256  D020               	goto	l1644
  1938  007258                     u1138:
  1939  007258  0005               	push	
  1940  00725A  6EFA               	movwf	pclath,c
  1941  00725C  50DE               	movf	postinc2,w,c
  1942  00725E  6EFD               	movwf	tosl,c
  1943  007260  50DE               	movf	postinc2,w,c
  1944  007262  6EFE               	movwf	tosh,c
  1945  007264  50F8               	movf	tblptru,w,c
  1946  007266  6EFF               	movwf	tosu,c
  1947  007268  50FA               	movf	pclath,w,c
  1948  00726A  0E20               	movlw	32
  1949  00726C  0012               	return		;indir
  1950  00726E                     l240:
  1951  00726E  C008  FFD9         	movff	__doprnt@pb,fsr2l
  1952  007272  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  1953  007276  CFDE F00E          	movff	postinc2,??__doprnt
  1954  00727A  CFDD F00F          	movff	postdec2,??__doprnt+1
  1955  00727E  C00E  FFD9         	movff	??__doprnt,fsr2l
  1956  007282  C00F  FFDA         	movff	??__doprnt+1,fsr2h
  1957  007286  0E20               	movlw	32
  1958  007288  6EDF               	movwf	indf2,c
  1959  00728A  C008  FFD9         	movff	__doprnt@pb,fsr2l
  1960  00728E  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  1961  007292  2ADE               	incf	postinc2,f,c
  1962  007294  0E00               	movlw	0
  1963  007296  22DD               	addwfc	postdec2,f,c
  1964  007298                     l1644:
  1965  007298  4A17               	infsnz	__doprnt@ccnt,f,c
  1966  00729A  2A18               	incf	__doprnt@ccnt+1,f,c
  1967                           
  1968                           ;doprnt.c: 1431: while(--width);
  1969  00729C  061D               	decf	__doprnt@width,f,c
  1970  00729E  A0D8               	btfss	status,0,c
  1971  0072A0  061E               	decf	__doprnt@width+1,f,c
  1972  0072A2  501D               	movf	__doprnt@width,w,c
  1973  0072A4  101E               	iorwf	__doprnt@width+1,w,c
  1974  0072A6  A4D8               	btfss	status,2,c
  1975  0072A8  D7C5               	goto	u1110
  1976  0072AA                     u1140:
  1977                           
  1978                           ;doprnt.c: 1469: }
  1979                           ;doprnt.c: 1472: prec = c;
  1980  0072AA  C01F  F016         	movff	__doprnt@c,__doprnt@prec
  1981                           
  1982                           ;doprnt.c: 1474: while(prec--) {
  1983  0072AE  D056               	goto	l246
  1984  0072B0                     
  1985                           ;doprnt.c: 1478: {
  1986                           ;doprnt.c: 1499: {
  1987                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1988  0072B0  C014  F001         	movff	__doprnt@val,___lwdiv@dividend
  1989  0072B4  C015  F002         	movff	__doprnt@val+1,___lwdiv@dividend+1
  1990  0072B8  5016               	movf	__doprnt@prec,w,c
  1991  0072BA  0D02               	mullw	2
  1992  0072BC  0EB9               	movlw	low _hexpowers
  1993  0072BE  24F3               	addwf	prodl,w,c
  1994  0072C0  6EF6               	movwf	tblptrl,c
  1995  0072C2  0E7F               	movlw	high _hexpowers
  1996  0072C4  20F4               	addwfc	prodh,w,c
  1997  0072C6  6EF7               	movwf	tblptrh,c
  1998  0072C8                     	if	0	;There are less than 3 active tblptr bytes
  1999  0072C8                     	endif
  2000  0072C8  0009               	tblrd		*+
  2001  0072CA  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2002  0072CE  000A               	tblrd		*-
  2003  0072D0  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2004  0072D4  ECE5  F034         	call	___lwdiv
  2005  0072D8  5001               	movf	?___lwdiv,w,c
  2006  0072DA  0B0F               	andlw	15
  2007  0072DC  6E12               	movwf	__doprnt@idx,c
  2008                           
  2009                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2010  0072DE  5012               	movf	__doprnt@idx,w,c
  2011  0072E0  0D01               	mullw	1
  2012  0072E2  0ED1               	movlw	low STR_4
  2013  0072E4  24F3               	addwf	prodl,w,c
  2014  0072E6  6EF6               	movwf	tblptrl,c
  2015  0072E8  0E7F               	movlw	high STR_4
  2016  0072EA  20F4               	addwfc	prodh,w,c
  2017  0072EC  6EF7               	movwf	tblptrh,c
  2018  0072EE                     	if	0	;There are less than 3 active tblptr bytes
  2019  0072EE                     	endif
  2020  0072EE  0008               	tblrd		*
  2021  0072F0  CFF5 F01F          	movff	tablat,__doprnt@c
  2022                           
  2023                           ;doprnt.c: 1508: }
  2024                           ;doprnt.c: 1523: }
  2025                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)),(++ccnt); else ((*pb->ptr++ = c),(++ccnt));
  2026  0072F4  EE20 F002          	lfsr	2,2
  2027  0072F8  5008               	movf	__doprnt@pb,w,c
  2028  0072FA  26D9               	addwf	fsr2l,f,c
  2029  0072FC  5009               	movf	__doprnt@pb+1,w,c
  2030  0072FE  22DA               	addwfc	fsr2h,f,c
  2031  007300  50DE               	movf	postinc2,w,c
  2032  007302  10DE               	iorwf	postinc2,w,c
  2033  007304  B4D8               	btfsc	status,2,c
  2034  007306  D013               	goto	l245
  2035  007308  EE20 F002          	lfsr	2,2
  2036  00730C  5008               	movf	__doprnt@pb,w,c
  2037  00730E  26D9               	addwf	fsr2l,f,c
  2038  007310  5009               	movf	__doprnt@pb+1,w,c
  2039  007312  22DA               	addwfc	fsr2h,f,c
  2040  007314  D801               	call	u1168
  2041  007316  D020               	goto	l1662
  2042  007318                     u1168:
  2043  007318  0005               	push	
  2044  00731A  6EFA               	movwf	pclath,c
  2045  00731C  50DE               	movf	postinc2,w,c
  2046  00731E  6EFD               	movwf	tosl,c
  2047  007320  50DE               	movf	postinc2,w,c
  2048  007322  6EFE               	movwf	tosh,c
  2049  007324  50F8               	movf	tblptru,w,c
  2050  007326  6EFF               	movwf	tosu,c
  2051  007328  50FA               	movf	pclath,w,c
  2052  00732A  501F               	movf	__doprnt@c,w,c
  2053  00732C  0012               	return		;indir
  2054  00732E                     l245:
  2055  00732E  C008  FFD9         	movff	__doprnt@pb,fsr2l
  2056  007332  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  2057  007336  CFDE F00E          	movff	postinc2,??__doprnt
  2058  00733A  CFDD F00F          	movff	postdec2,??__doprnt+1
  2059  00733E  C00E  FFD9         	movff	??__doprnt,fsr2l
  2060  007342  C00F  FFDA         	movff	??__doprnt+1,fsr2h
  2061  007346  C01F  FFDF         	movff	__doprnt@c,indf2
  2062  00734A  C008  FFD9         	movff	__doprnt@pb,fsr2l
  2063  00734E  C009  FFDA         	movff	__doprnt@pb+1,fsr2h
  2064  007352  2ADE               	incf	postinc2,f,c
  2065  007354  0E00               	movlw	0
  2066  007356  22DD               	addwfc	postdec2,f,c
  2067  007358                     l1662:
  2068  007358  4A17               	infsnz	__doprnt@ccnt,f,c
  2069  00735A  2A18               	incf	__doprnt@ccnt+1,f,c
  2070  00735C                     l246:
  2071  00735C  0616               	decf	__doprnt@prec,f,c
  2072  00735E  2816               	incf	__doprnt@prec,w,c
  2073  007360  A4D8               	btfss	status,2,c
  2074  007362  D7A6               	goto	l244
  2075  007364                     u1170:
  2076  007364  C00A  FFF6         	movff	__doprnt@f,tblptrl
  2077  007368  C00B  FFF7         	movff	__doprnt@f+1,tblptrh
  2078  00736C  4A0A               	infsnz	__doprnt@f,f,c
  2079  00736E  2A0B               	incf	__doprnt@f+1,f,c
  2080  007370                     	if	0	;tblptru may be non-zero
  2081  007370                     	endif
  2082  007370                     	if	0	;tblptru may be non-zero
  2083  007370                     	endif
  2084  007370  0008               	tblrd		*
  2085  007372  CFF5 F01F          	movff	tablat,__doprnt@c
  2086  007376  501F               	movf	__doprnt@c,w,c
  2087  007378  A4D8               	btfss	status,2,c
  2088  00737A  D553               	goto	l190
  2089  00737C                     u1180:
  2090                           
  2091                           ;doprnt.c: 1540: return ccnt;
  2092                           
  2093                           ;doprnt.c: 1525: }
  2094                           ;doprnt.c: 1533: }
  2095                           ;doprnt.c: 1535: alldone:
  2096  00737C  C017  F008         	movff	__doprnt@ccnt,?__doprnt
  2097  007380  C018  F009         	movff	__doprnt@ccnt+1,?__doprnt+1
  2098  007384  0012               	return		;funcret
  2099  007386                     __end_of__doprnt:
  2100                           	opt stack 0
  2101                           tosu	equ	0xFFF
  2102                           tosh	equ	0xFFE
  2103                           tosl	equ	0xFFD
  2104                           pclath	equ	0xFFA
  2105                           tblptru	equ	0xFF8
  2106                           tblptrh	equ	0xFF7
  2107                           tblptrl	equ	0xFF6
  2108                           tablat	equ	0xFF5
  2109                           prodh	equ	0xFF4
  2110                           prodl	equ	0xFF3
  2111                           postinc0	equ	0xFEE
  2112                           wreg	equ	0xFE8
  2113                           indf1	equ	0xFE7
  2114                           postdec1	equ	0xFE5
  2115                           plusw1	equ	0xFE3
  2116                           fsr1h	equ	0xFE2
  2117                           fsr1l	equ	0xFE1
  2118                           indf2	equ	0xFDF
  2119                           postinc2	equ	0xFDE
  2120                           postdec2	equ	0xFDD
  2121                           plusw2	equ	0xFDB
  2122                           fsr2h	equ	0xFDA
  2123                           fsr2l	equ	0xFD9
  2124                           status	equ	0xFD8
  2125                           
  2126 ;; *************** function _putch *****************
  2127 ;; Defined at:
  2128 ;;		line 125 in file "mcc_generated_files/eusart1.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;  txData          1    wreg     unsigned char 
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;  txData          1    1[COMRAM] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0
  2143 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2145 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2146 ;;Total ram usage:        1 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    1
  2149 ;; This function calls:
  2150 ;;		_EUSART1_Write
  2151 ;; This function is called by:
  2152 ;;		_printf
  2153 ;;		__doprnt
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           	psect	text5
  2158  0067B0                     __ptext5:
  2159                           	opt stack 0
  2160  0067B0                     _putch:
  2161                           	opt stack 27
  2162                           
  2163                           ;incstack = 0
  2164                           ;putch@txData stored from wreg
  2165  0067B0  6E02               	movwf	putch@txData,c
  2166                           
  2167                           ;eusart1.c: 127: EUSART1_Write(txData);
  2168  0067B2  5002               	movf	putch@txData,w,c
  2169  0067B4  ECDD  F033         	call	_EUSART1_Write
  2170  0067B8  0012               	return		;funcret
  2171  0067BA                     __end_of_putch:
  2172                           	opt stack 0
  2173                           tosu	equ	0xFFF
  2174                           tosh	equ	0xFFE
  2175                           tosl	equ	0xFFD
  2176                           pclath	equ	0xFFA
  2177                           tblptru	equ	0xFF8
  2178                           tblptrh	equ	0xFF7
  2179                           tblptrl	equ	0xFF6
  2180                           tablat	equ	0xFF5
  2181                           prodh	equ	0xFF4
  2182                           prodl	equ	0xFF3
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           indf1	equ	0xFE7
  2186                           postdec1	equ	0xFE5
  2187                           plusw1	equ	0xFE3
  2188                           fsr1h	equ	0xFE2
  2189                           fsr1l	equ	0xFE1
  2190                           indf2	equ	0xFDF
  2191                           postinc2	equ	0xFDE
  2192                           postdec2	equ	0xFDD
  2193                           plusw2	equ	0xFDB
  2194                           fsr2h	equ	0xFDA
  2195                           fsr2l	equ	0xFD9
  2196                           status	equ	0xFD8
  2197                           
  2198 ;; *************** function _EUSART1_Write *****************
  2199 ;; Defined at:
  2200 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;  txData          1    wreg     unsigned char 
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;  txData          1    0[COMRAM] unsigned char 
  2205 ;; Return value:  Size  Location     Type
  2206 ;;                  1    wreg      void 
  2207 ;; Registers used:
  2208 ;;		wreg
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2214 ;;      Params:         0       0       0       0       0       0       0       0       0
  2215 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2216 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2217 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2218 ;;Total ram usage:        1 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; This function calls:
  2221 ;;		Nothing
  2222 ;; This function is called by:
  2223 ;;		_putch
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text6
  2228  0067BA                     __ptext6:
  2229                           	opt stack 0
  2230  0067BA                     _EUSART1_Write:
  2231                           	opt stack 27
  2232                           
  2233                           ;incstack = 0
  2234                           ;EUSART1_Write@txData stored from wreg
  2235  0067BA  6E01               	movwf	EUSART1_Write@txData,c
  2236  0067BC                     
  2237                           ;eusart1.c: 114: {
  2238                           
  2239                           ;eusart1.c: 113: while(0 == PIR1bits.TX1IF)
  2240  0067BC  A89E               	btfss	3998,4,c	;volatile
  2241  0067BE  D7FE               	goto	l1436
  2242                           
  2243                           ;eusart1.c: 115: }
  2244                           ;eusart1.c: 117: TXREG1 = txData;
  2245  0067C0  C001  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2246  0067C4  0012               	return		;funcret
  2247  0067C6                     __end_of_EUSART1_Write:
  2248                           	opt stack 0
  2249                           tosu	equ	0xFFF
  2250                           tosh	equ	0xFFE
  2251                           tosl	equ	0xFFD
  2252                           pclath	equ	0xFFA
  2253                           tblptru	equ	0xFF8
  2254                           tblptrh	equ	0xFF7
  2255                           tblptrl	equ	0xFF6
  2256                           tablat	equ	0xFF5
  2257                           prodh	equ	0xFF4
  2258                           prodl	equ	0xFF3
  2259                           postinc0	equ	0xFEE
  2260                           wreg	equ	0xFE8
  2261                           indf1	equ	0xFE7
  2262                           postdec1	equ	0xFE5
  2263                           plusw1	equ	0xFE3
  2264                           fsr1h	equ	0xFE2
  2265                           fsr1l	equ	0xFE1
  2266                           indf2	equ	0xFDF
  2267                           postinc2	equ	0xFDE
  2268                           postdec2	equ	0xFDD
  2269                           plusw2	equ	0xFDB
  2270                           fsr2h	equ	0xFDA
  2271                           fsr2l	equ	0xFD9
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _isdigit *****************
  2275 ;; Defined at:
  2276 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;  c               1    wreg     unsigned char 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  c               1    2[COMRAM] unsigned char 
  2281 ;; Return value:  Size  Location     Type
  2282 ;;		None               void
  2283 ;; Registers used:
  2284 ;;		wreg, status,2, status,0
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2290 ;;      Params:         0       0       0       0       0       0       0       0       0
  2291 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2292 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2293 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2294 ;;Total ram usage:        3 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; This function calls:
  2297 ;;		Nothing
  2298 ;; This function is called by:
  2299 ;;		__doprnt
  2300 ;; This function uses a non-reentrant model
  2301 ;;
  2302                           
  2303                           	psect	text7
  2304  0067FC                     __ptext7:
  2305                           	opt stack 0
  2306  0067FC                     _isdigit:
  2307                           	opt stack 28
  2308                           
  2309                           ;incstack = 0
  2310                           ;isdigit@c stored from wreg
  2311  0067FC  6E03               	movwf	isdigit@c,c
  2312  0067FE  0E00               	movlw	0
  2313  006800  6E02               	movwf	_isdigit$694,c
  2314  006802  0E3A               	movlw	58
  2315  006804  6003               	cpfslt	isdigit@c,c
  2316  006806  D005               	goto	l579
  2317  006808  0E2F               	movlw	47
  2318  00680A  6403               	cpfsgt	isdigit@c,c
  2319  00680C  D002               	goto	l579
  2320  00680E  0E01               	movlw	1
  2321  006810  6E02               	movwf	_isdigit$694,c
  2322  006812                     l579:
  2323  006812  C002  F001         	movff	_isdigit$694,??_isdigit
  2324  006816  3001               	rrcf	??_isdigit,w,c
  2325  006818  0012               	return	
  2326  00681A                     __end_of_isdigit:
  2327                           	opt stack 0
  2328                           tosu	equ	0xFFF
  2329                           tosh	equ	0xFFE
  2330                           tosl	equ	0xFFD
  2331                           pclath	equ	0xFFA
  2332                           tblptru	equ	0xFF8
  2333                           tblptrh	equ	0xFF7
  2334                           tblptrl	equ	0xFF6
  2335                           tablat	equ	0xFF5
  2336                           prodh	equ	0xFF4
  2337                           prodl	equ	0xFF3
  2338                           postinc0	equ	0xFEE
  2339                           wreg	equ	0xFE8
  2340                           indf1	equ	0xFE7
  2341                           postdec1	equ	0xFE5
  2342                           plusw1	equ	0xFE3
  2343                           fsr1h	equ	0xFE2
  2344                           fsr1l	equ	0xFE1
  2345                           indf2	equ	0xFDF
  2346                           postinc2	equ	0xFDE
  2347                           postdec2	equ	0xFDD
  2348                           plusw2	equ	0xFDB
  2349                           fsr2h	equ	0xFDA
  2350                           fsr2l	equ	0xFD9
  2351                           status	equ	0xFD8
  2352                           
  2353 ;; *************** function ___wmul *****************
  2354 ;; Defined at:
  2355 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2356 ;; Parameters:    Size  Location     Type
  2357 ;;  multiplier      2    0[COMRAM] unsigned int 
  2358 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  product         2    4[COMRAM] unsigned int 
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  2    0[COMRAM] unsigned int 
  2363 ;; Registers used:
  2364 ;;		wreg, status,2, status,0, prodl, prodh
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2370 ;;      Params:         4       0       0       0       0       0       0       0       0
  2371 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2372 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2373 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2374 ;;Total ram usage:        6 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; This function calls:
  2377 ;;		Nothing
  2378 ;; This function is called by:
  2379 ;;		__doprnt
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text8
  2384  00683A                     __ptext8:
  2385                           	opt stack 0
  2386  00683A                     ___wmul:
  2387                           	opt stack 28
  2388                           
  2389                           ;incstack = 0
  2390  00683A  5001               	movf	___wmul@multiplier,w,c
  2391  00683C  0203               	mulwf	___wmul@multiplicand,c
  2392  00683E  CFF3 F005          	movff	prodl,___wmul@product
  2393  006842  CFF4 F006          	movff	prodh,___wmul@product+1
  2394  006846  5001               	movf	___wmul@multiplier,w,c
  2395  006848  0204               	mulwf	___wmul@multiplicand+1,c
  2396  00684A  50F3               	movf	prodl,w,c
  2397  00684C  2606               	addwf	___wmul@product+1,f,c
  2398  00684E  5002               	movf	___wmul@multiplier+1,w,c
  2399  006850  0203               	mulwf	___wmul@multiplicand,c
  2400  006852  50F3               	movf	prodl,w,c
  2401  006854  2606               	addwf	___wmul@product+1,f,c
  2402  006856  C005  F001         	movff	___wmul@product,?___wmul
  2403  00685A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2404  00685E  0012               	return	
  2405  006860                     __end_of___wmul:
  2406                           	opt stack 0
  2407                           tosu	equ	0xFFF
  2408                           tosh	equ	0xFFE
  2409                           tosl	equ	0xFFD
  2410                           pclath	equ	0xFFA
  2411                           tblptru	equ	0xFF8
  2412                           tblptrh	equ	0xFF7
  2413                           tblptrl	equ	0xFF6
  2414                           tablat	equ	0xFF5
  2415                           prodh	equ	0xFF4
  2416                           prodl	equ	0xFF3
  2417                           postinc0	equ	0xFEE
  2418                           wreg	equ	0xFE8
  2419                           indf1	equ	0xFE7
  2420                           postdec1	equ	0xFE5
  2421                           plusw1	equ	0xFE3
  2422                           fsr1h	equ	0xFE2
  2423                           fsr1l	equ	0xFE1
  2424                           indf2	equ	0xFDF
  2425                           postinc2	equ	0xFDE
  2426                           postdec2	equ	0xFDD
  2427                           plusw2	equ	0xFDB
  2428                           fsr2h	equ	0xFDA
  2429                           fsr2l	equ	0xFD9
  2430                           status	equ	0xFD8
  2431                           
  2432 ;; *************** function ___lwdiv *****************
  2433 ;; Defined at:
  2434 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;  dividend        2    0[COMRAM] unsigned int 
  2437 ;;  divisor         2    2[COMRAM] unsigned int 
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;  quotient        2    4[COMRAM] unsigned int 
  2440 ;;  counter         1    6[COMRAM] unsigned char 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  2    0[COMRAM] unsigned int 
  2443 ;; Registers used:
  2444 ;;		wreg, status,2, status,0
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2450 ;;      Params:         4       0       0       0       0       0       0       0       0
  2451 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2453 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2454 ;;Total ram usage:        7 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; This function calls:
  2457 ;;		Nothing
  2458 ;; This function is called by:
  2459 ;;		__doprnt
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           	psect	text9
  2464  0069CA                     __ptext9:
  2465                           	opt stack 0
  2466  0069CA                     ___lwdiv:
  2467                           	opt stack 28
  2468                           
  2469                           ;incstack = 0
  2470  0069CA  0E00               	movlw	0
  2471  0069CC  6E06               	movwf	___lwdiv@quotient+1,c
  2472  0069CE  0E00               	movlw	0
  2473  0069D0  6E05               	movwf	___lwdiv@quotient,c
  2474  0069D2  5003               	movf	___lwdiv@divisor,w,c
  2475  0069D4  1004               	iorwf	___lwdiv@divisor+1,w,c
  2476  0069D6  B4D8               	btfsc	status,2,c
  2477  0069D8  D01C               	goto	l663
  2478  0069DA  0E01               	movlw	1
  2479  0069DC  6E07               	movwf	___lwdiv@counter,c
  2480  0069DE  D004               	goto	l658
  2481  0069E0  90D8               	bcf	status,0,c
  2482  0069E2  3603               	rlcf	___lwdiv@divisor,f,c
  2483  0069E4  3604               	rlcf	___lwdiv@divisor+1,f,c
  2484  0069E6  2A07               	incf	___lwdiv@counter,f,c
  2485  0069E8                     l658:
  2486  0069E8  AE04               	btfss	___lwdiv@divisor+1,7,c
  2487  0069EA  D7FA               	goto	l659
  2488  0069EC                     u810:
  2489  0069EC  90D8               	bcf	status,0,c
  2490  0069EE  3605               	rlcf	___lwdiv@quotient,f,c
  2491  0069F0  3606               	rlcf	___lwdiv@quotient+1,f,c
  2492  0069F2  5003               	movf	___lwdiv@divisor,w,c
  2493  0069F4  5C01               	subwf	___lwdiv@dividend,w,c
  2494  0069F6  5004               	movf	___lwdiv@divisor+1,w,c
  2495  0069F8  5802               	subwfb	___lwdiv@dividend+1,w,c
  2496  0069FA  A0D8               	btfss	status,0,c
  2497  0069FC  D005               	goto	l662
  2498  0069FE  5003               	movf	___lwdiv@divisor,w,c
  2499  006A00  5E01               	subwf	___lwdiv@dividend,f,c
  2500  006A02  5004               	movf	___lwdiv@divisor+1,w,c
  2501  006A04  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2502  006A06  8005               	bsf	___lwdiv@quotient,0,c
  2503  006A08                     l662:
  2504  006A08  90D8               	bcf	status,0,c
  2505  006A0A  3204               	rrcf	___lwdiv@divisor+1,f,c
  2506  006A0C  3203               	rrcf	___lwdiv@divisor,f,c
  2507  006A0E  2E07               	decfsz	___lwdiv@counter,f,c
  2508  006A10  D7ED               	goto	u810
  2509  006A12                     l663:
  2510  006A12  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2511  006A16  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2512  006A1A  0012               	return		;funcret
  2513  006A1C                     __end_of___lwdiv:
  2514                           	opt stack 0
  2515                           tosu	equ	0xFFF
  2516                           tosh	equ	0xFFE
  2517                           tosl	equ	0xFFD
  2518                           pclath	equ	0xFFA
  2519                           tblptru	equ	0xFF8
  2520                           tblptrh	equ	0xFF7
  2521                           tblptrl	equ	0xFF6
  2522                           tablat	equ	0xFF5
  2523                           prodh	equ	0xFF4
  2524                           prodl	equ	0xFF3
  2525                           postinc0	equ	0xFEE
  2526                           wreg	equ	0xFE8
  2527                           indf1	equ	0xFE7
  2528                           postdec1	equ	0xFE5
  2529                           plusw1	equ	0xFE3
  2530                           fsr1h	equ	0xFE2
  2531                           fsr1l	equ	0xFE1
  2532                           indf2	equ	0xFDF
  2533                           postinc2	equ	0xFDE
  2534                           postdec2	equ	0xFDD
  2535                           plusw2	equ	0xFDB
  2536                           fsr2h	equ	0xFDA
  2537                           fsr2l	equ	0xFD9
  2538                           status	equ	0xFD8
  2539                           
  2540 ;; *************** function _calc_sha_256 *****************
  2541 ;; Defined at:
  2542 ;;		line 194 in file "main.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;  hash            2   25[COMRAM] PTR unsigned char 
  2545 ;;		 -> main@hash(32), 
  2546 ;;  input           2   27[COMRAM] PTR const unsigned char 
  2547 ;;		 -> string(16), 
  2548 ;;  len             2   29[COMRAM] unsigned int 
  2549 ;; Auto vars:     Size  Location     Type
  2550 ;;  temp1           4  124[BANK0 ] const unsigned long 
  2551 ;;  temp2           4  120[BANK0 ] const unsigned long 
  2552 ;;  maj             4  116[BANK0 ] const unsigned long 
  2553 ;;  s0              4  112[BANK0 ] const unsigned long 
  2554 ;;  ch              4  108[BANK0 ] const unsigned long 
  2555 ;;  s1              4  104[BANK0 ] const unsigned long 
  2556 ;;  s1              4  100[BANK0 ] const unsigned long 
  2557 ;;  s0              4   96[BANK0 ] const unsigned long 
  2558 ;;  w             256    0[BANK1 ] unsigned long [64]
  2559 ;;  ah             32    0[BANK2 ] unsigned long [8]
  2560 ;;  p               2  128[BANK0 ] PTR const unsigned char 
  2561 ;;		 -> calc_sha_256@chunk(64), 
  2562 ;;  chunk          64    0[BANK0 ] unsigned char [64]
  2563 ;;  h              32   64[BANK0 ] unsigned long [8]
  2564 ;;  state          10  130[BANK0 ] struct buffer_state
  2565 ;;  i               2  140[BANK0 ] int 
  2566 ;;  j               2   61[COMRAM] int 
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2576 ;;      Params:         6       0       0       0       0       0       0       0       0
  2577 ;;      Locals:         2     142     256      32       0       0       0       0       0
  2578 ;;      Temps:         30       0       0       0       0       0       0       0       0
  2579 ;;      Totals:        38     142     256      32       0       0       0       0       0
  2580 ;;Total ram usage:      468 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; Hardware stack levels required when called:    2
  2583 ;; This function calls:
  2584 ;;		_calc_chunk
  2585 ;;		_init_buf_state
  2586 ;;		_memset
  2587 ;;		_rotate_right
  2588 ;; This function is called by:
  2589 ;;		_main
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text10
  2594  007386                     __ptext10:
  2595                           	opt stack 0
  2596  007386                     _calc_sha_256:
  2597                           	opt stack 28
  2598                           
  2599                           ;main.c: 198: uint32_t h[] = { 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527
      +                          f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 };
  2600                           
  2601                           ;incstack = 0
  2602  007386  EE22  F0C8         	lfsr	2,calc_sha_256@F6069
  2603  00738A  EE10  F0A0         	lfsr	1,calc_sha_256@h
  2604  00738E  0E1F               	movlw	31
  2605  007390                     u1281:
  2606  007390  CFDB FFE3          	movff	plusw2,plusw1
  2607  007394  06E8               	decf	wreg,f,c
  2608  007396  E2FC               	bc	u1281
  2609                           
  2610                           ;main.c: 199: int i;
  2611                           ;main.c: 200: int j;
  2612                           ;main.c: 203: uint8_t chunk[64];
  2613                           ;main.c: 205: struct buffer_state state;
  2614                           ;main.c: 207: init_buf_state(&state, input, len);
  2615  007398  0EE2               	movlw	low calc_sha_256@state
  2616  00739A  6E01               	movwf	init_buf_state@state,c
  2617  00739C  0E00               	movlw	high calc_sha_256@state
  2618  00739E  6E02               	movwf	init_buf_state@state+1,c
  2619  0073A0  C01C  F003         	movff	calc_sha_256@input,init_buf_state@input
  2620  0073A4  C01D  F004         	movff	calc_sha_256@input+1,init_buf_state@input+1
  2621  0073A8  C01E  F005         	movff	calc_sha_256@len,init_buf_state@len
  2622  0073AC  C01F  F006         	movff	calc_sha_256@len+1,init_buf_state@len+1
  2623  0073B0  EC3D  F035         	call	_init_buf_state	;wreg free
  2624                           
  2625                           ;main.c: 209: while (calc_chunk(chunk, &state)) {
  2626  0073B4  EF99  F03E         	goto	u1400
  2627  0073B8                     
  2628                           ;main.c: 210: uint32_t ah[8];
  2629                           ;main.c: 214: uint32_t w[64];
  2630                           ;main.c: 215: const uint8_t *p = chunk;
  2631  0073B8  0E60               	movlw	low calc_sha_256@chunk
  2632  0073BA  0100               	movlb	0	; () banked
  2633  0073BC  6FE0               	movwf	calc_sha_256@p& (0+255),b
  2634  0073BE  0E00               	movlw	high calc_sha_256@chunk
  2635  0073C0  6FE1               	movwf	(calc_sha_256@p+1)& (0+255),b
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;main.c: 217: memset(w, 0x00, sizeof w);
  2639  0073C2  0E00               	movlw	low calc_sha_256@w
  2640  0073C4  6E01               	movwf	memset@p1,c
  2641  0073C6  0E01               	movlw	high calc_sha_256@w
  2642  0073C8  6E02               	movwf	memset@p1+1,c
  2643  0073CA  0E00               	movlw	0
  2644  0073CC  6E04               	movwf	memset@c+1,c
  2645  0073CE  0E00               	movlw	0
  2646  0073D0  6E03               	movwf	memset@c,c
  2647  0073D2  0E01               	movlw	1
  2648  0073D4  6E06               	movwf	memset@n+1,c
  2649  0073D6  0E00               	movlw	0
  2650  0073D8  6E05               	movwf	memset@n,c
  2651  0073DA  EC30  F034         	call	_memset	;wreg free
  2652                           
  2653                           ;main.c: 218: for (i = 0; i < 16; i++) {
  2654  0073DE  0E00               	movlw	0
  2655  0073E0  0100               	movlb	0	; () banked
  2656  0073E2  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  2657  0073E4  0E00               	movlw	0
  2658  0073E6  6FEC               	movwf	calc_sha_256@i& (0+255),b
  2659                           
  2660                           ; BSR set to: 0
  2661  0073E8  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2662  0073EA  D008               	goto	l152
  2663  0073EC  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2664  0073EE  E105               	bnz	u1290
  2665  0073F0  0E10               	movlw	16
  2666  0073F2  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  2667  0073F4  B0D8               	btfsc	status,0,c
  2668  0073F6  D085               	goto	u1300
  2669  0073F8  D001               	goto	l152
  2670  0073FA                     u1290:
  2671                           
  2672                           ; BSR set to: 0
  2673  0073FA  D083               	goto	u1300
  2674  0073FC                     l152:
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;main.c: 219: w[i] = (uint32_t) p[0] << 24 | (uint32_t) p[1] << 16 |
  2678                           ;main.c: 220: (uint32_t) p[2] << 8 | (uint32_t) p[3];
  2679                           
  2680                           ; BSR set to: 0
  2681  0073FC  EE20 F002          	lfsr	2,2
  2682  007400  51E0               	movf	calc_sha_256@p& (0+255),w,b
  2683  007402  26D9               	addwf	fsr2l,f,c
  2684  007404  51E1               	movf	(calc_sha_256@p+1)& (0+255),w,b
  2685  007406  22DA               	addwfc	fsr2h,f,c
  2686  007408  50DF               	movf	indf2,w,c
  2687  00740A  6E20               	movwf	??_calc_sha_256& (0+255),c
  2688  00740C  C020  F021         	movff	??_calc_sha_256,??_calc_sha_256+1
  2689  007410  6A22               	clrf	(??_calc_sha_256+2)& (0+255),c
  2690  007412  6A23               	clrf	(??_calc_sha_256+3)& (0+255),c
  2691  007414  6A24               	clrf	(??_calc_sha_256+4)& (0+255),c
  2692  007416  C023  F024         	movff	??_calc_sha_256+3,??_calc_sha_256+4
  2693  00741A  C022  F023         	movff	??_calc_sha_256+2,??_calc_sha_256+3
  2694  00741E  C021  F022         	movff	??_calc_sha_256+1,??_calc_sha_256+2
  2695  007422  6A21               	clrf	??_calc_sha_256+1,c
  2696  007424  EE20 F001          	lfsr	2,1
  2697  007428  51E0               	movf	calc_sha_256@p& (0+255),w,b
  2698  00742A  26D9               	addwf	fsr2l,f,c
  2699  00742C  51E1               	movf	(calc_sha_256@p+1)& (0+255),w,b
  2700  00742E  22DA               	addwfc	fsr2h,f,c
  2701  007430  50DF               	movf	indf2,w,c
  2702  007432  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  2703  007434  C025  F026         	movff	??_calc_sha_256+5,??_calc_sha_256+6
  2704  007438  6A27               	clrf	(??_calc_sha_256+7)& (0+255),c
  2705  00743A  6A28               	clrf	(??_calc_sha_256+8)& (0+255),c
  2706  00743C  6A29               	clrf	(??_calc_sha_256+9)& (0+255),c
  2707  00743E  C027  F029         	movff	??_calc_sha_256+7,??_calc_sha_256+9
  2708  007442  C026  F028         	movff	??_calc_sha_256+6,??_calc_sha_256+8
  2709  007446  6A27               	clrf	??_calc_sha_256+7,c
  2710  007448  6A26               	clrf	??_calc_sha_256+6,c
  2711  00744A  C0E0  FFD9         	movff	calc_sha_256@p,fsr2l
  2712  00744E  C0E1  FFDA         	movff	calc_sha_256@p+1,fsr2h
  2713  007452  50DF               	movf	indf2,w,c
  2714  007454  6E2A               	movwf	(??_calc_sha_256+10)& (0+255),c
  2715  007456  C02A  F02B         	movff	??_calc_sha_256+10,??_calc_sha_256+11
  2716  00745A  6A2C               	clrf	(??_calc_sha_256+12)& (0+255),c
  2717  00745C  6A2D               	clrf	(??_calc_sha_256+13)& (0+255),c
  2718  00745E  6A2E               	clrf	(??_calc_sha_256+14)& (0+255),c
  2719  007460  C02B  F02E         	movff	??_calc_sha_256+11,??_calc_sha_256+14
  2720  007464  6A2D               	clrf	??_calc_sha_256+13,c
  2721  007466  6A2C               	clrf	??_calc_sha_256+12,c
  2722  007468  6A2B               	clrf	??_calc_sha_256+11,c
  2723  00746A  5026               	movf	??_calc_sha_256+6,w,c
  2724  00746C  102B               	iorwf	??_calc_sha_256+11,w,c
  2725  00746E  6E2F               	movwf	(??_calc_sha_256+15)& (0+255),c
  2726  007470  5027               	movf	??_calc_sha_256+7,w,c
  2727  007472  102C               	iorwf	??_calc_sha_256+12,w,c
  2728  007474  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2729  007476  5028               	movf	??_calc_sha_256+8,w,c
  2730  007478  102D               	iorwf	??_calc_sha_256+13,w,c
  2731  00747A  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2732  00747C  5029               	movf	??_calc_sha_256+9,w,c
  2733  00747E  102E               	iorwf	??_calc_sha_256+14,w,c
  2734  007480  6E32               	movwf	(??_calc_sha_256+18)& (0+255),c
  2735  007482  5021               	movf	??_calc_sha_256+1,w,c
  2736  007484  102F               	iorwf	??_calc_sha_256+15,w,c
  2737  007486  6E33               	movwf	(??_calc_sha_256+19)& (0+255),c
  2738  007488  5022               	movf	??_calc_sha_256+2,w,c
  2739  00748A  1030               	iorwf	??_calc_sha_256+16,w,c
  2740  00748C  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2741  00748E  5023               	movf	??_calc_sha_256+3,w,c
  2742  007490  1031               	iorwf	??_calc_sha_256+17,w,c
  2743  007492  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2744  007494  5024               	movf	??_calc_sha_256+4,w,c
  2745  007496  1032               	iorwf	??_calc_sha_256+18,w,c
  2746  007498  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2747  00749A  EE20 F003          	lfsr	2,3
  2748  00749E  51E0               	movf	calc_sha_256@p& (0+255),w,b
  2749  0074A0  26D9               	addwf	fsr2l,f,c
  2750  0074A2  51E1               	movf	(calc_sha_256@p+1)& (0+255),w,b
  2751  0074A4  22DA               	addwfc	fsr2h,f,c
  2752  0074A6  50DF               	movf	indf2,w,c
  2753  0074A8  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2754  0074AA  5037               	movf	??_calc_sha_256+23,w,c
  2755  0074AC  1033               	iorwf	??_calc_sha_256+19,w,c
  2756  0074AE  6E38               	movwf	(??_calc_sha_256+24)& (0+255),c
  2757  0074B0  5034               	movf	??_calc_sha_256+20,w,c
  2758  0074B2  6E39               	movwf	(??_calc_sha_256+25)& (0+255),c
  2759  0074B4  5035               	movf	??_calc_sha_256+21,w,c
  2760  0074B6  6E3A               	movwf	(??_calc_sha_256+26)& (0+255),c
  2761  0074B8  5036               	movf	??_calc_sha_256+22,w,c
  2762  0074BA  6E3B               	movwf	(??_calc_sha_256+27)& (0+255),c
  2763  0074BC  0E00               	movlw	low calc_sha_256@w
  2764  0074BE  6E3C               	movwf	(??_calc_sha_256+28)& (0+255),c
  2765  0074C0  0E01               	movlw	high calc_sha_256@w
  2766  0074C2  6E3D               	movwf	(??_calc_sha_256+29)& (0+255),c
  2767  0074C4  90D8               	bcf	status,0,c
  2768  0074C6  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  2769  0074C8  6ED9               	movwf	fsr2l,c
  2770  0074CA  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  2771  0074CC  6EDA               	movwf	fsr2h,c
  2772  0074CE  90D8               	bcf	status,0,c
  2773  0074D0  36D9               	rlcf	fsr2l,f,c
  2774  0074D2  36DA               	rlcf	fsr2h,f,c
  2775  0074D4  503C               	movf	??_calc_sha_256+28,w,c
  2776  0074D6  26D9               	addwf	fsr2l,f,c
  2777  0074D8  503D               	movf	??_calc_sha_256+29,w,c
  2778  0074DA  22DA               	addwfc	fsr2h,f,c
  2779  0074DC  C038  FFDE         	movff	??_calc_sha_256+24,postinc2
  2780  0074E0  C039  FFDE         	movff	??_calc_sha_256+25,postinc2
  2781  0074E4  C03A  FFDE         	movff	??_calc_sha_256+26,postinc2
  2782  0074E8  C03B  FFDE         	movff	??_calc_sha_256+27,postinc2
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 221: p += 4;
  2786  0074EC  0E04               	movlw	4
  2787  0074EE  27E0               	addwf	calc_sha_256@p& (0+255),f,b
  2788  0074F0  0E00               	movlw	0
  2789  0074F2  23E1               	addwfc	(calc_sha_256@p+1)& (0+255),f,b
  2790                           
  2791                           ; BSR set to: 0
  2792  0074F4  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  2793  0074F6  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  2794                           
  2795                           ; BSR set to: 0
  2796  0074F8  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2797  0074FA  D780               	goto	l152
  2798  0074FC  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2799  0074FE  E101               	bnz	l1806
  2800  007500  D777               	goto	L1
  2801  007502                     u1300:
  2802  007502                     l1806:
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;main.c: 222: }
  2806                           ;main.c: 225: for (i = 16; i < 64; i++) {
  2807  007502  0E00               	movlw	0
  2808  007504  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  2809  007506  0E10               	movlw	16
  2810  007508  6FEC               	movwf	calc_sha_256@i& (0+255),b
  2811                           
  2812                           ; BSR set to: 0
  2813  00750A  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  2814  00750C  D008               	goto	l154
  2815  00750E  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  2816  007510  E105               	bnz	u1310
  2817  007512  0E40               	movlw	64
  2818  007514  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  2819  007516  B0D8               	btfsc	status,0,c
  2820  007518  D1B1               	goto	u1340
  2821  00751A  D001               	goto	l154
  2822  00751C                     u1310:
  2823                           
  2824                           ; BSR set to: 0
  2825  00751C  D1AF               	goto	u1340
  2826  00751E                     l154:
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;main.c: 226: const uint32_t s0 = rotate_right(w[i - 15], 7) ^ rotate_right(w[i - 15], 1
      +                          8) ^ (w[i - 15] >> 3);
  2830                           
  2831                           ; BSR set to: 0
  2832  00751E  0EC4               	movlw	196
  2833  007520  6E20               	movwf	??_calc_sha_256& (0+255),c
  2834  007522  0EFF               	movlw	255
  2835  007524  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2836  007526  C0EC  F022         	movff	calc_sha_256@i,??_calc_sha_256+2
  2837  00752A  C0ED  F023         	movff	calc_sha_256@i+1,??_calc_sha_256+3
  2838  00752E  90D8               	bcf	status,0,c
  2839  007530  3622               	rlcf	??_calc_sha_256+2,f,c
  2840  007532  3623               	rlcf	??_calc_sha_256+3,f,c
  2841  007534  90D8               	bcf	status,0,c
  2842  007536  3622               	rlcf	??_calc_sha_256+2,f,c
  2843  007538  3623               	rlcf	??_calc_sha_256+3,f,c
  2844  00753A  5020               	movf	??_calc_sha_256,w,c
  2845  00753C  2622               	addwf	??_calc_sha_256+2,f,c
  2846  00753E  5021               	movf	??_calc_sha_256+1,w,c
  2847  007540  2223               	addwfc	??_calc_sha_256+3,f,c
  2848  007542  0E00               	movlw	low calc_sha_256@w
  2849  007544  2422               	addwf	??_calc_sha_256+2,w,c
  2850  007546  6ED9               	movwf	fsr2l,c
  2851  007548  0E01               	movlw	high calc_sha_256@w
  2852  00754A  2023               	addwfc	??_calc_sha_256+3,w,c
  2853  00754C  6EDA               	movwf	fsr2h,c
  2854  00754E  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  2855  007552  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  2856  007556  CFDE F026          	movff	postinc2,??_calc_sha_256+6
  2857  00755A  CFDE F027          	movff	postinc2,??_calc_sha_256+7
  2858  00755E  0E04               	movlw	4
  2859  007560  D005               	goto	u1320
  2860  007562                     u1325:
  2861  007562  90D8               	bcf	status,0,c
  2862  007564  3227               	rrcf	??_calc_sha_256+7,f,c
  2863  007566  3226               	rrcf	??_calc_sha_256+6,f,c
  2864  007568  3225               	rrcf	??_calc_sha_256+5,f,c
  2865  00756A  3224               	rrcf	??_calc_sha_256+4,f,c
  2866  00756C                     u1320:
  2867  00756C  2EE8               	decfsz	wreg,f,c
  2868  00756E  D7F9               	goto	u1325
  2869  007570  0EC4               	movlw	196
  2870  007572  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  2871  007574  0EFF               	movlw	255
  2872  007576  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  2873  007578  C0EC  F02A         	movff	calc_sha_256@i,??_calc_sha_256+10
  2874  00757C  C0ED  F02B         	movff	calc_sha_256@i+1,??_calc_sha_256+11
  2875  007580  90D8               	bcf	status,0,c
  2876  007582  362A               	rlcf	??_calc_sha_256+10,f,c
  2877  007584  362B               	rlcf	??_calc_sha_256+11,f,c
  2878  007586  90D8               	bcf	status,0,c
  2879  007588  362A               	rlcf	??_calc_sha_256+10,f,c
  2880  00758A  362B               	rlcf	??_calc_sha_256+11,f,c
  2881  00758C  5028               	movf	??_calc_sha_256+8,w,c
  2882  00758E  262A               	addwf	??_calc_sha_256+10,f,c
  2883  007590  5029               	movf	??_calc_sha_256+9,w,c
  2884  007592  222B               	addwfc	??_calc_sha_256+11,f,c
  2885  007594  0E00               	movlw	low calc_sha_256@w
  2886  007596  242A               	addwf	??_calc_sha_256+10,w,c
  2887  007598  6ED9               	movwf	fsr2l,c
  2888  00759A  0E01               	movlw	high calc_sha_256@w
  2889  00759C  202B               	addwfc	??_calc_sha_256+11,w,c
  2890  00759E  6EDA               	movwf	fsr2h,c
  2891  0075A0  CFDE F001          	movff	postinc2,rotate_right@value
  2892  0075A4  CFDE F002          	movff	postinc2,rotate_right@value+1
  2893  0075A8  CFDE F003          	movff	postinc2,rotate_right@value+2
  2894  0075AC  CFDE F004          	movff	postinc2,rotate_right@value+3
  2895  0075B0  0E00               	movlw	0
  2896  0075B2  6E06               	movwf	rotate_right@count+1,c
  2897  0075B4  0E07               	movlw	7
  2898  0075B6  6E05               	movwf	rotate_right@count,c
  2899  0075B8  EC6E  F035         	call	_rotate_right	;wreg free
  2900  0075BC  C001  F02C         	movff	?_rotate_right,??_calc_sha_256+12
  2901  0075C0  C002  F02D         	movff	?_rotate_right+1,??_calc_sha_256+13
  2902  0075C4  C003  F02E         	movff	?_rotate_right+2,??_calc_sha_256+14
  2903  0075C8  C004  F02F         	movff	?_rotate_right+3,??_calc_sha_256+15
  2904  0075CC  0EC4               	movlw	196
  2905  0075CE  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  2906  0075D0  0EFF               	movlw	255
  2907  0075D2  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  2908  0075D4  C0EC  F032         	movff	calc_sha_256@i,??_calc_sha_256+18
  2909  0075D8  C0ED  F033         	movff	calc_sha_256@i+1,??_calc_sha_256+19
  2910  0075DC  90D8               	bcf	status,0,c
  2911  0075DE  3632               	rlcf	??_calc_sha_256+18,f,c
  2912  0075E0  3633               	rlcf	??_calc_sha_256+19,f,c
  2913  0075E2  90D8               	bcf	status,0,c
  2914  0075E4  3632               	rlcf	??_calc_sha_256+18,f,c
  2915  0075E6  3633               	rlcf	??_calc_sha_256+19,f,c
  2916  0075E8  5030               	movf	??_calc_sha_256+16,w,c
  2917  0075EA  2632               	addwf	??_calc_sha_256+18,f,c
  2918  0075EC  5031               	movf	??_calc_sha_256+17,w,c
  2919  0075EE  2233               	addwfc	??_calc_sha_256+19,f,c
  2920  0075F0  0E00               	movlw	low calc_sha_256@w
  2921  0075F2  2432               	addwf	??_calc_sha_256+18,w,c
  2922  0075F4  6ED9               	movwf	fsr2l,c
  2923  0075F6  0E01               	movlw	high calc_sha_256@w
  2924  0075F8  2033               	addwfc	??_calc_sha_256+19,w,c
  2925  0075FA  6EDA               	movwf	fsr2h,c
  2926  0075FC  CFDE F001          	movff	postinc2,rotate_right@value
  2927  007600  CFDE F002          	movff	postinc2,rotate_right@value+1
  2928  007604  CFDE F003          	movff	postinc2,rotate_right@value+2
  2929  007608  CFDE F004          	movff	postinc2,rotate_right@value+3
  2930  00760C  0E00               	movlw	0
  2931  00760E  6E06               	movwf	rotate_right@count+1,c
  2932  007610  0E12               	movlw	18
  2933  007612  6E05               	movwf	rotate_right@count,c
  2934  007614  EC6E  F035         	call	_rotate_right	;wreg free
  2935  007618  5001               	movf	?_rotate_right,w,c
  2936  00761A  182C               	xorwf	??_calc_sha_256+12,w,c
  2937  00761C  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  2938  00761E  5002               	movf	?_rotate_right+1,w,c
  2939  007620  182D               	xorwf	??_calc_sha_256+13,w,c
  2940  007622  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  2941  007624  5003               	movf	?_rotate_right+2,w,c
  2942  007626  182E               	xorwf	??_calc_sha_256+14,w,c
  2943  007628  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  2944  00762A  5004               	movf	?_rotate_right+3,w,c
  2945  00762C  182F               	xorwf	??_calc_sha_256+15,w,c
  2946  00762E  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  2947  007630  5024               	movf	??_calc_sha_256+4,w,c
  2948  007632  1834               	xorwf	??_calc_sha_256+20,w,c
  2949  007634  0100               	movlb	0	; () banked
  2950  007636  6FC0               	movwf	calc_sha_256@s0& (0+255),b
  2951  007638  5025               	movf	??_calc_sha_256+5,w,c
  2952  00763A  1835               	xorwf	??_calc_sha_256+21,w,c
  2953  00763C  6FC1               	movwf	(calc_sha_256@s0+1)& (0+255),b
  2954  00763E  5026               	movf	??_calc_sha_256+6,w,c
  2955  007640  1836               	xorwf	??_calc_sha_256+22,w,c
  2956  007642  6FC2               	movwf	(calc_sha_256@s0+2)& (0+255),b
  2957  007644  5027               	movf	??_calc_sha_256+7,w,c
  2958  007646  1837               	xorwf	??_calc_sha_256+23,w,c
  2959  007648  6FC3               	movwf	(calc_sha_256@s0+3)& (0+255),b
  2960                           
  2961                           ;main.c: 227: const uint32_t s1 = rotate_right(w[i - 2], 17) ^ rotate_right(w[i - 2], 19
      +                          ) ^ (w[i - 2] >> 10);
  2962  00764A  0EF8               	movlw	248
  2963  00764C  6E20               	movwf	??_calc_sha_256& (0+255),c
  2964  00764E  0EFF               	movlw	255
  2965  007650  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  2966  007652  C0EC  F022         	movff	calc_sha_256@i,??_calc_sha_256+2
  2967  007656  C0ED  F023         	movff	calc_sha_256@i+1,??_calc_sha_256+3
  2968  00765A  90D8               	bcf	status,0,c
  2969  00765C  3622               	rlcf	??_calc_sha_256+2,f,c
  2970  00765E  3623               	rlcf	??_calc_sha_256+3,f,c
  2971  007660  90D8               	bcf	status,0,c
  2972  007662  3622               	rlcf	??_calc_sha_256+2,f,c
  2973  007664  3623               	rlcf	??_calc_sha_256+3,f,c
  2974  007666  5020               	movf	??_calc_sha_256,w,c
  2975  007668  2622               	addwf	??_calc_sha_256+2,f,c
  2976  00766A  5021               	movf	??_calc_sha_256+1,w,c
  2977  00766C  2223               	addwfc	??_calc_sha_256+3,f,c
  2978  00766E  0E00               	movlw	low calc_sha_256@w
  2979  007670  2422               	addwf	??_calc_sha_256+2,w,c
  2980  007672  6ED9               	movwf	fsr2l,c
  2981  007674  0E01               	movlw	high calc_sha_256@w
  2982  007676  2023               	addwfc	??_calc_sha_256+3,w,c
  2983  007678  6EDA               	movwf	fsr2h,c
  2984  00767A  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  2985  00767E  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  2986  007682  CFDE F026          	movff	postinc2,??_calc_sha_256+6
  2987  007686  CFDE F027          	movff	postinc2,??_calc_sha_256+7
  2988  00768A  0E0B               	movlw	11
  2989  00768C  D005               	goto	u1330
  2990  00768E                     u1335:
  2991  00768E  90D8               	bcf	status,0,c
  2992  007690  3227               	rrcf	??_calc_sha_256+7,f,c
  2993  007692  3226               	rrcf	??_calc_sha_256+6,f,c
  2994  007694  3225               	rrcf	??_calc_sha_256+5,f,c
  2995  007696  3224               	rrcf	??_calc_sha_256+4,f,c
  2996  007698                     u1330:
  2997  007698  2EE8               	decfsz	wreg,f,c
  2998  00769A  D7F9               	goto	u1335
  2999  00769C  0EF8               	movlw	248
  3000  00769E  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  3001  0076A0  0EFF               	movlw	255
  3002  0076A2  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  3003  0076A4  C0EC  F02A         	movff	calc_sha_256@i,??_calc_sha_256+10
  3004  0076A8  C0ED  F02B         	movff	calc_sha_256@i+1,??_calc_sha_256+11
  3005  0076AC  90D8               	bcf	status,0,c
  3006  0076AE  362A               	rlcf	??_calc_sha_256+10,f,c
  3007  0076B0  362B               	rlcf	??_calc_sha_256+11,f,c
  3008  0076B2  90D8               	bcf	status,0,c
  3009  0076B4  362A               	rlcf	??_calc_sha_256+10,f,c
  3010  0076B6  362B               	rlcf	??_calc_sha_256+11,f,c
  3011  0076B8  5028               	movf	??_calc_sha_256+8,w,c
  3012  0076BA  262A               	addwf	??_calc_sha_256+10,f,c
  3013  0076BC  5029               	movf	??_calc_sha_256+9,w,c
  3014  0076BE  222B               	addwfc	??_calc_sha_256+11,f,c
  3015  0076C0  0E00               	movlw	low calc_sha_256@w
  3016  0076C2  242A               	addwf	??_calc_sha_256+10,w,c
  3017  0076C4  6ED9               	movwf	fsr2l,c
  3018  0076C6  0E01               	movlw	high calc_sha_256@w
  3019  0076C8  202B               	addwfc	??_calc_sha_256+11,w,c
  3020  0076CA  6EDA               	movwf	fsr2h,c
  3021  0076CC  CFDE F001          	movff	postinc2,rotate_right@value
  3022  0076D0  CFDE F002          	movff	postinc2,rotate_right@value+1
  3023  0076D4  CFDE F003          	movff	postinc2,rotate_right@value+2
  3024  0076D8  CFDE F004          	movff	postinc2,rotate_right@value+3
  3025  0076DC  0E00               	movlw	0
  3026  0076DE  6E06               	movwf	rotate_right@count+1,c
  3027  0076E0  0E11               	movlw	17
  3028  0076E2  6E05               	movwf	rotate_right@count,c
  3029  0076E4  EC6E  F035         	call	_rotate_right	;wreg free
  3030  0076E8  C001  F02C         	movff	?_rotate_right,??_calc_sha_256+12
  3031  0076EC  C002  F02D         	movff	?_rotate_right+1,??_calc_sha_256+13
  3032  0076F0  C003  F02E         	movff	?_rotate_right+2,??_calc_sha_256+14
  3033  0076F4  C004  F02F         	movff	?_rotate_right+3,??_calc_sha_256+15
  3034  0076F8  0EF8               	movlw	248
  3035  0076FA  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  3036  0076FC  0EFF               	movlw	255
  3037  0076FE  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  3038  007700  C0EC  F032         	movff	calc_sha_256@i,??_calc_sha_256+18
  3039  007704  C0ED  F033         	movff	calc_sha_256@i+1,??_calc_sha_256+19
  3040  007708  90D8               	bcf	status,0,c
  3041  00770A  3632               	rlcf	??_calc_sha_256+18,f,c
  3042  00770C  3633               	rlcf	??_calc_sha_256+19,f,c
  3043  00770E  90D8               	bcf	status,0,c
  3044  007710  3632               	rlcf	??_calc_sha_256+18,f,c
  3045  007712  3633               	rlcf	??_calc_sha_256+19,f,c
  3046  007714  5030               	movf	??_calc_sha_256+16,w,c
  3047  007716  2632               	addwf	??_calc_sha_256+18,f,c
  3048  007718  5031               	movf	??_calc_sha_256+17,w,c
  3049  00771A  2233               	addwfc	??_calc_sha_256+19,f,c
  3050  00771C  0E00               	movlw	low calc_sha_256@w
  3051  00771E  2432               	addwf	??_calc_sha_256+18,w,c
  3052  007720  6ED9               	movwf	fsr2l,c
  3053  007722  0E01               	movlw	high calc_sha_256@w
  3054  007724  2033               	addwfc	??_calc_sha_256+19,w,c
  3055  007726  6EDA               	movwf	fsr2h,c
  3056  007728  CFDE F001          	movff	postinc2,rotate_right@value
  3057  00772C  CFDE F002          	movff	postinc2,rotate_right@value+1
  3058  007730  CFDE F003          	movff	postinc2,rotate_right@value+2
  3059  007734  CFDE F004          	movff	postinc2,rotate_right@value+3
  3060  007738  0E00               	movlw	0
  3061  00773A  6E06               	movwf	rotate_right@count+1,c
  3062  00773C  0E13               	movlw	19
  3063  00773E  6E05               	movwf	rotate_right@count,c
  3064  007740  EC6E  F035         	call	_rotate_right	;wreg free
  3065  007744  5001               	movf	?_rotate_right,w,c
  3066  007746  182C               	xorwf	??_calc_sha_256+12,w,c
  3067  007748  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  3068  00774A  5002               	movf	?_rotate_right+1,w,c
  3069  00774C  182D               	xorwf	??_calc_sha_256+13,w,c
  3070  00774E  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  3071  007750  5003               	movf	?_rotate_right+2,w,c
  3072  007752  182E               	xorwf	??_calc_sha_256+14,w,c
  3073  007754  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  3074  007756  5004               	movf	?_rotate_right+3,w,c
  3075  007758  182F               	xorwf	??_calc_sha_256+15,w,c
  3076  00775A  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  3077  00775C  5024               	movf	??_calc_sha_256+4,w,c
  3078  00775E  1834               	xorwf	??_calc_sha_256+20,w,c
  3079  007760  0100               	movlb	0	; () banked
  3080  007762  6FC4               	movwf	calc_sha_256@s1& (0+255),b
  3081  007764  5025               	movf	??_calc_sha_256+5,w,c
  3082  007766  1835               	xorwf	??_calc_sha_256+21,w,c
  3083  007768  6FC5               	movwf	(calc_sha_256@s1+1)& (0+255),b
  3084  00776A  5026               	movf	??_calc_sha_256+6,w,c
  3085  00776C  1836               	xorwf	??_calc_sha_256+22,w,c
  3086  00776E  6FC6               	movwf	(calc_sha_256@s1+2)& (0+255),b
  3087  007770  5027               	movf	??_calc_sha_256+7,w,c
  3088  007772  1837               	xorwf	??_calc_sha_256+23,w,c
  3089  007774  6FC7               	movwf	(calc_sha_256@s1+3)& (0+255),b
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;main.c: 228: w[i] = w[i - 16] + s0 + w[i - 7] + s1;
  3093  007776  0EE4               	movlw	228
  3094  007778  6E20               	movwf	??_calc_sha_256& (0+255),c
  3095  00777A  0EFF               	movlw	255
  3096  00777C  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3097  00777E  C0EC  F022         	movff	calc_sha_256@i,??_calc_sha_256+2
  3098  007782  C0ED  F023         	movff	calc_sha_256@i+1,??_calc_sha_256+3
  3099  007786  90D8               	bcf	status,0,c
  3100  007788  3622               	rlcf	??_calc_sha_256+2,f,c
  3101  00778A  3623               	rlcf	??_calc_sha_256+3,f,c
  3102  00778C  90D8               	bcf	status,0,c
  3103  00778E  3622               	rlcf	??_calc_sha_256+2,f,c
  3104  007790  3623               	rlcf	??_calc_sha_256+3,f,c
  3105  007792  5020               	movf	??_calc_sha_256,w,c
  3106  007794  2622               	addwf	??_calc_sha_256+2,f,c
  3107  007796  5021               	movf	??_calc_sha_256+1,w,c
  3108  007798  2223               	addwfc	??_calc_sha_256+3,f,c
  3109  00779A  0E00               	movlw	low calc_sha_256@w
  3110  00779C  2422               	addwf	??_calc_sha_256+2,w,c
  3111  00779E  6ED9               	movwf	fsr2l,c
  3112  0077A0  0E01               	movlw	high calc_sha_256@w
  3113  0077A2  2023               	addwfc	??_calc_sha_256+3,w,c
  3114  0077A4  6EDA               	movwf	fsr2h,c
  3115  0077A6  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  3116  0077AA  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  3117  0077AE  CFDE F026          	movff	postinc2,??_calc_sha_256+6
  3118  0077B2  CFDE F027          	movff	postinc2,??_calc_sha_256+7
  3119  0077B6  0EC0               	movlw	192
  3120  0077B8  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  3121  0077BA  0EFF               	movlw	255
  3122  0077BC  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  3123  0077BE  C0EC  F02A         	movff	calc_sha_256@i,??_calc_sha_256+10
  3124  0077C2  C0ED  F02B         	movff	calc_sha_256@i+1,??_calc_sha_256+11
  3125  0077C6  90D8               	bcf	status,0,c
  3126  0077C8  362A               	rlcf	??_calc_sha_256+10,f,c
  3127  0077CA  362B               	rlcf	??_calc_sha_256+11,f,c
  3128  0077CC  90D8               	bcf	status,0,c
  3129  0077CE  362A               	rlcf	??_calc_sha_256+10,f,c
  3130  0077D0  362B               	rlcf	??_calc_sha_256+11,f,c
  3131  0077D2  5028               	movf	??_calc_sha_256+8,w,c
  3132  0077D4  262A               	addwf	??_calc_sha_256+10,f,c
  3133  0077D6  5029               	movf	??_calc_sha_256+9,w,c
  3134  0077D8  222B               	addwfc	??_calc_sha_256+11,f,c
  3135  0077DA  0E00               	movlw	low calc_sha_256@w
  3136  0077DC  242A               	addwf	??_calc_sha_256+10,w,c
  3137  0077DE  6ED9               	movwf	fsr2l,c
  3138  0077E0  0E01               	movlw	high calc_sha_256@w
  3139  0077E2  202B               	addwfc	??_calc_sha_256+11,w,c
  3140  0077E4  6EDA               	movwf	fsr2h,c
  3141  0077E6  CFDE F02C          	movff	postinc2,??_calc_sha_256+12
  3142  0077EA  CFDE F02D          	movff	postinc2,??_calc_sha_256+13
  3143  0077EE  CFDE F02E          	movff	postinc2,??_calc_sha_256+14
  3144  0077F2  CFDE F02F          	movff	postinc2,??_calc_sha_256+15
  3145  0077F6  5024               	movf	??_calc_sha_256+4,w,c
  3146  0077F8  242C               	addwf	??_calc_sha_256+12,w,c
  3147  0077FA  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  3148  0077FC  5025               	movf	??_calc_sha_256+5,w,c
  3149  0077FE  202D               	addwfc	??_calc_sha_256+13,w,c
  3150  007800  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  3151  007802  5026               	movf	??_calc_sha_256+6,w,c
  3152  007804  202E               	addwfc	??_calc_sha_256+14,w,c
  3153  007806  6E32               	movwf	(??_calc_sha_256+18)& (0+255),c
  3154  007808  5027               	movf	??_calc_sha_256+7,w,c
  3155  00780A  202F               	addwfc	??_calc_sha_256+15,w,c
  3156  00780C  6E33               	movwf	(??_calc_sha_256+19)& (0+255),c
  3157  00780E  51C0               	movf	calc_sha_256@s0& (0+255),w,b
  3158  007810  2430               	addwf	??_calc_sha_256+16,w,c
  3159  007812  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  3160  007814  51C1               	movf	(calc_sha_256@s0+1)& (0+255),w,b
  3161  007816  2031               	addwfc	??_calc_sha_256+17,w,c
  3162  007818  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  3163  00781A  51C2               	movf	(calc_sha_256@s0+2)& (0+255),w,b
  3164  00781C  2032               	addwfc	??_calc_sha_256+18,w,c
  3165  00781E  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  3166  007820  51C3               	movf	(calc_sha_256@s0+3)& (0+255),w,b
  3167  007822  2033               	addwfc	??_calc_sha_256+19,w,c
  3168  007824  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  3169  007826  51C4               	movf	calc_sha_256@s1& (0+255),w,b
  3170  007828  2434               	addwf	??_calc_sha_256+20,w,c
  3171  00782A  6E38               	movwf	(??_calc_sha_256+24)& (0+255),c
  3172  00782C  51C5               	movf	(calc_sha_256@s1+1)& (0+255),w,b
  3173  00782E  2035               	addwfc	??_calc_sha_256+21,w,c
  3174  007830  6E39               	movwf	(??_calc_sha_256+25)& (0+255),c
  3175  007832  51C6               	movf	(calc_sha_256@s1+2)& (0+255),w,b
  3176  007834  2036               	addwfc	??_calc_sha_256+22,w,c
  3177  007836  6E3A               	movwf	(??_calc_sha_256+26)& (0+255),c
  3178  007838  51C7               	movf	(calc_sha_256@s1+3)& (0+255),w,b
  3179  00783A  2037               	addwfc	??_calc_sha_256+23,w,c
  3180  00783C  6E3B               	movwf	(??_calc_sha_256+27)& (0+255),c
  3181  00783E  0E00               	movlw	low calc_sha_256@w
  3182  007840  6E3C               	movwf	(??_calc_sha_256+28)& (0+255),c
  3183  007842  0E01               	movlw	high calc_sha_256@w
  3184  007844  6E3D               	movwf	(??_calc_sha_256+29)& (0+255),c
  3185  007846  90D8               	bcf	status,0,c
  3186  007848  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3187  00784A  6ED9               	movwf	fsr2l,c
  3188  00784C  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3189  00784E  6EDA               	movwf	fsr2h,c
  3190  007850  90D8               	bcf	status,0,c
  3191  007852  36D9               	rlcf	fsr2l,f,c
  3192  007854  36DA               	rlcf	fsr2h,f,c
  3193  007856  503C               	movf	??_calc_sha_256+28,w,c
  3194  007858  26D9               	addwf	fsr2l,f,c
  3195  00785A  503D               	movf	??_calc_sha_256+29,w,c
  3196  00785C  22DA               	addwfc	fsr2h,f,c
  3197  00785E  C038  FFDE         	movff	??_calc_sha_256+24,postinc2
  3198  007862  C039  FFDE         	movff	??_calc_sha_256+25,postinc2
  3199  007866  C03A  FFDE         	movff	??_calc_sha_256+26,postinc2
  3200  00786A  C03B  FFDE         	movff	??_calc_sha_256+27,postinc2
  3201                           
  3202                           ; BSR set to: 0
  3203  00786E  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  3204  007870  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  3205                           
  3206                           ; BSR set to: 0
  3207  007872  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3208  007874  D654               	goto	l154
  3209  007876  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3210  007878  E101               	bnz	l1820
  3211  00787A  D64B               	goto	L2
  3212  00787C                     u1340:
  3213  00787C                     l1820:
  3214                           
  3215                           ; BSR set to: 0
  3216                           ;main.c: 229: }
  3217                           ;main.c: 232: for (i = 0; i < 8; i++)
  3218  00787C  0E00               	movlw	0
  3219  00787E  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  3220  007880  0E00               	movlw	0
  3221  007882  6FEC               	movwf	calc_sha_256@i& (0+255),b
  3222  007884                     l1822:
  3223                           
  3224                           ; BSR set to: 0
  3225  007884  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3226  007886  D006               	goto	l156
  3227  007888  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3228  00788A  E12F               	bnz	l1832
  3229  00788C  0E08               	movlw	8
  3230  00788E  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  3231  007890  B0D8               	btfsc	status,0,c
  3232  007892  D02B               	goto	u1360
  3233  007894                     l156:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;main.c: 233: ah[i] = h[i];
  3237                           
  3238                           ; BSR set to: 0
  3239  007894  0EA0               	movlw	low calc_sha_256@h
  3240  007896  6E20               	movwf	??_calc_sha_256& (0+255),c
  3241  007898  0E00               	movlw	high calc_sha_256@h
  3242  00789A  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3243  00789C  90D8               	bcf	status,0,c
  3244  00789E  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3245  0078A0  6ED9               	movwf	fsr2l,c
  3246  0078A2  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3247  0078A4  6EDA               	movwf	fsr2h,c
  3248  0078A6  90D8               	bcf	status,0,c
  3249  0078A8  36D9               	rlcf	fsr2l,f,c
  3250  0078AA  36DA               	rlcf	fsr2h,f,c
  3251  0078AC  5020               	movf	??_calc_sha_256,w,c
  3252  0078AE  26D9               	addwf	fsr2l,f,c
  3253  0078B0  5021               	movf	??_calc_sha_256+1,w,c
  3254  0078B2  22DA               	addwfc	fsr2h,f,c
  3255  0078B4  0E00               	movlw	low calc_sha_256@ah
  3256  0078B6  6E22               	movwf	(??_calc_sha_256+2)& (0+255),c
  3257  0078B8  0E02               	movlw	high calc_sha_256@ah
  3258  0078BA  6E23               	movwf	(??_calc_sha_256+3)& (0+255),c
  3259  0078BC  90D8               	bcf	status,0,c
  3260  0078BE  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3261  0078C0  6EE1               	movwf	fsr1l,c
  3262  0078C2  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3263  0078C4  6EE2               	movwf	fsr1h,c
  3264  0078C6  90D8               	bcf	status,0,c
  3265  0078C8  36E1               	rlcf	fsr1l,f,c
  3266  0078CA  36E2               	rlcf	fsr1h,f,c
  3267  0078CC  5022               	movf	??_calc_sha_256+2,w,c
  3268  0078CE  26E1               	addwf	fsr1l,f,c
  3269  0078D0  5023               	movf	??_calc_sha_256+3,w,c
  3270  0078D2  22E2               	addwfc	fsr1h,f,c
  3271  0078D4  CFDE FFE6          	movff	postinc2,postinc1
  3272  0078D8  CFDE FFE6          	movff	postinc2,postinc1
  3273  0078DC  CFDE FFE6          	movff	postinc2,postinc1
  3274  0078E0  CFDE FFE6          	movff	postinc2,postinc1
  3275                           
  3276                           ; BSR set to: 0
  3277  0078E4  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  3278  0078E6  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  3279  0078E8  D7CD               	goto	l1822
  3280  0078EA                     u1360:
  3281  0078EA                     l1832:
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;main.c: 236: for (i = 0; i < 64; i++) {
  3285  0078EA  0E00               	movlw	0
  3286  0078EC  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  3287  0078EE  0E00               	movlw	0
  3288  0078F0  6FEC               	movwf	calc_sha_256@i& (0+255),b
  3289                           
  3290                           ; BSR set to: 0
  3291  0078F2  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3292  0078F4  D008               	goto	l158
  3293  0078F6  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3294  0078F8  E105               	bnz	u1370
  3295  0078FA  0E40               	movlw	64
  3296  0078FC  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  3297  0078FE  B0D8               	btfsc	status,0,c
  3298  007900  D1D9               	goto	u1380
  3299  007902  D001               	goto	l158
  3300  007904                     u1370:
  3301                           
  3302                           ; BSR set to: 0
  3303  007904  D1D7               	goto	u1380
  3304  007906                     l158:
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;main.c: 237: const uint32_t s1 = rotate_right(ah[4], 6) ^ rotate_right(ah[4], 11) ^ rot
      +                          ate_right(ah[4], 25);
  3308                           
  3309                           ; BSR set to: 0
  3310  007906  C210  F001         	movff	calc_sha_256@ah+16,rotate_right@value
  3311  00790A  C211  F002         	movff	calc_sha_256@ah+17,rotate_right@value+1
  3312  00790E  C212  F003         	movff	calc_sha_256@ah+18,rotate_right@value+2
  3313  007912  C213  F004         	movff	calc_sha_256@ah+19,rotate_right@value+3
  3314  007916  0E00               	movlw	0
  3315  007918  6E06               	movwf	rotate_right@count+1,c
  3316  00791A  0E06               	movlw	6
  3317  00791C  6E05               	movwf	rotate_right@count,c
  3318  00791E  EC6E  F035         	call	_rotate_right	;wreg free
  3319  007922  C001  F020         	movff	?_rotate_right,??_calc_sha_256
  3320  007926  C002  F021         	movff	?_rotate_right+1,??_calc_sha_256+1
  3321  00792A  C003  F022         	movff	?_rotate_right+2,??_calc_sha_256+2
  3322  00792E  C004  F023         	movff	?_rotate_right+3,??_calc_sha_256+3
  3323  007932  C210  F001         	movff	calc_sha_256@ah+16,rotate_right@value
  3324  007936  C211  F002         	movff	calc_sha_256@ah+17,rotate_right@value+1
  3325  00793A  C212  F003         	movff	calc_sha_256@ah+18,rotate_right@value+2
  3326  00793E  C213  F004         	movff	calc_sha_256@ah+19,rotate_right@value+3
  3327  007942  0E00               	movlw	0
  3328  007944  6E06               	movwf	rotate_right@count+1,c
  3329  007946  0E0B               	movlw	11
  3330  007948  6E05               	movwf	rotate_right@count,c
  3331  00794A  EC6E  F035         	call	_rotate_right	;wreg free
  3332  00794E  5001               	movf	?_rotate_right,w,c
  3333  007950  1820               	xorwf	??_calc_sha_256,w,c
  3334  007952  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  3335  007954  5002               	movf	?_rotate_right+1,w,c
  3336  007956  1821               	xorwf	??_calc_sha_256+1,w,c
  3337  007958  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  3338  00795A  5003               	movf	?_rotate_right+2,w,c
  3339  00795C  1822               	xorwf	??_calc_sha_256+2,w,c
  3340  00795E  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  3341  007960  5004               	movf	?_rotate_right+3,w,c
  3342  007962  1823               	xorwf	??_calc_sha_256+3,w,c
  3343  007964  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  3344  007966  C210  F001         	movff	calc_sha_256@ah+16,rotate_right@value
  3345  00796A  C211  F002         	movff	calc_sha_256@ah+17,rotate_right@value+1
  3346  00796E  C212  F003         	movff	calc_sha_256@ah+18,rotate_right@value+2
  3347  007972  C213  F004         	movff	calc_sha_256@ah+19,rotate_right@value+3
  3348  007976  0E00               	movlw	0
  3349  007978  6E06               	movwf	rotate_right@count+1,c
  3350  00797A  0E19               	movlw	25
  3351  00797C  6E05               	movwf	rotate_right@count,c
  3352  00797E  EC6E  F035         	call	_rotate_right	;wreg free
  3353  007982  5001               	movf	?_rotate_right,w,c
  3354  007984  1824               	xorwf	??_calc_sha_256+4,w,c
  3355  007986  0100               	movlb	0	; () banked
  3356  007988  6FC8               	movwf	calc_sha_256@s1_406& (0+255),b
  3357  00798A  5002               	movf	?_rotate_right+1,w,c
  3358  00798C  1825               	xorwf	??_calc_sha_256+5,w,c
  3359  00798E  6FC9               	movwf	(calc_sha_256@s1_406+1)& (0+255),b
  3360  007990  5003               	movf	?_rotate_right+2,w,c
  3361  007992  1826               	xorwf	??_calc_sha_256+6,w,c
  3362  007994  6FCA               	movwf	(calc_sha_256@s1_406+2)& (0+255),b
  3363  007996  5004               	movf	?_rotate_right+3,w,c
  3364  007998  1827               	xorwf	??_calc_sha_256+7,w,c
  3365  00799A  6FCB               	movwf	(calc_sha_256@s1_406+3)& (0+255),b
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;main.c: 238: const uint32_t ch = (ah[4] & ah[5]) ^ (~ah[4] & ah[6]);
  3369  00799C  C210  F020         	movff	calc_sha_256@ah+16,??_calc_sha_256
  3370  0079A0  C211  F021         	movff	calc_sha_256@ah+17,??_calc_sha_256+1
  3371  0079A4  C212  F022         	movff	calc_sha_256@ah+18,??_calc_sha_256+2
  3372  0079A8  C213  F023         	movff	calc_sha_256@ah+19,??_calc_sha_256+3
  3373  0079AC  1E20               	comf	??_calc_sha_256,f,c
  3374  0079AE  1E21               	comf	??_calc_sha_256+1,f,c
  3375  0079B0  1E22               	comf	??_calc_sha_256+2,f,c
  3376  0079B2  1E23               	comf	??_calc_sha_256+3,f,c
  3377  0079B4  0102               	movlb	2	; () banked
  3378  0079B6  5118               	movf	(calc_sha_256@ah+24)& (0+255),w,b
  3379  0079B8  1420               	andwf	??_calc_sha_256,w,c
  3380  0079BA  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  3381  0079BC  5119               	movf	(calc_sha_256@ah+25)& (0+255),w,b
  3382  0079BE  1421               	andwf	??_calc_sha_256+1,w,c
  3383  0079C0  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  3384  0079C2  511A               	movf	(calc_sha_256@ah+26)& (0+255),w,b
  3385  0079C4  1422               	andwf	??_calc_sha_256+2,w,c
  3386  0079C6  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  3387  0079C8  511B               	movf	(calc_sha_256@ah+27)& (0+255),w,b
  3388  0079CA  1423               	andwf	??_calc_sha_256+3,w,c
  3389  0079CC  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  3390  0079CE  5114               	movf	(calc_sha_256@ah+20)& (0+255),w,b
  3391  0079D0  1510               	andwf	(calc_sha_256@ah+16)& (0+255),w,b
  3392  0079D2  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  3393  0079D4  5115               	movf	(calc_sha_256@ah+21)& (0+255),w,b
  3394  0079D6  1511               	andwf	(calc_sha_256@ah+17)& (0+255),w,b
  3395  0079D8  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  3396  0079DA  5116               	movf	(calc_sha_256@ah+22)& (0+255),w,b
  3397  0079DC  1512               	andwf	(calc_sha_256@ah+18)& (0+255),w,b
  3398  0079DE  6E2A               	movwf	(??_calc_sha_256+10)& (0+255),c
  3399  0079E0  5117               	movf	(calc_sha_256@ah+23)& (0+255),w,b
  3400  0079E2  1513               	andwf	(calc_sha_256@ah+19)& (0+255),w,b
  3401  0079E4  6E2B               	movwf	(??_calc_sha_256+11)& (0+255),c
  3402  0079E6  5024               	movf	??_calc_sha_256+4,w,c
  3403  0079E8  1828               	xorwf	??_calc_sha_256+8,w,c
  3404  0079EA  0100               	movlb	0	; () banked
  3405  0079EC  6FCC               	movwf	calc_sha_256@ch& (0+255),b
  3406  0079EE  5025               	movf	??_calc_sha_256+5,w,c
  3407  0079F0  1829               	xorwf	??_calc_sha_256+9,w,c
  3408  0079F2  6FCD               	movwf	(calc_sha_256@ch+1)& (0+255),b
  3409  0079F4  5026               	movf	??_calc_sha_256+6,w,c
  3410  0079F6  182A               	xorwf	??_calc_sha_256+10,w,c
  3411  0079F8  6FCE               	movwf	(calc_sha_256@ch+2)& (0+255),b
  3412  0079FA  5027               	movf	??_calc_sha_256+7,w,c
  3413  0079FC  182B               	xorwf	??_calc_sha_256+11,w,c
  3414  0079FE  6FCF               	movwf	(calc_sha_256@ch+3)& (0+255),b
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;main.c: 239: const uint32_t temp1 = ah[7] + s1 + ch + k[i] + w[i];
  3418  007A00  0E00               	movlw	low calc_sha_256@w
  3419  007A02  6E20               	movwf	??_calc_sha_256& (0+255),c
  3420  007A04  0E01               	movlw	high calc_sha_256@w
  3421  007A06  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3422  007A08  90D8               	bcf	status,0,c
  3423  007A0A  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3424  007A0C  6ED9               	movwf	fsr2l,c
  3425  007A0E  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3426  007A10  6EDA               	movwf	fsr2h,c
  3427  007A12  90D8               	bcf	status,0,c
  3428  007A14  36D9               	rlcf	fsr2l,f,c
  3429  007A16  36DA               	rlcf	fsr2h,f,c
  3430  007A18  5020               	movf	??_calc_sha_256,w,c
  3431  007A1A  26D9               	addwf	fsr2l,f,c
  3432  007A1C  5021               	movf	??_calc_sha_256+1,w,c
  3433  007A1E  22DA               	addwfc	fsr2h,f,c
  3434  007A20  CFDE F022          	movff	postinc2,??_calc_sha_256+2
  3435  007A24  CFDE F023          	movff	postinc2,??_calc_sha_256+3
  3436  007A28  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  3437  007A2C  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  3438  007A30  C0EC  F026         	movff	calc_sha_256@i,??_calc_sha_256+6
  3439  007A34  C0ED  F027         	movff	calc_sha_256@i+1,??_calc_sha_256+7
  3440  007A38  90D8               	bcf	status,0,c
  3441  007A3A  3626               	rlcf	??_calc_sha_256+6,f,c
  3442  007A3C  3627               	rlcf	??_calc_sha_256+7,f,c
  3443  007A3E  90D8               	bcf	status,0,c
  3444  007A40  3626               	rlcf	??_calc_sha_256+6,f,c
  3445  007A42  3627               	rlcf	??_calc_sha_256+7,f,c
  3446  007A44  0EB9               	movlw	low _k
  3447  007A46  2426               	addwf	??_calc_sha_256+6,w,c
  3448  007A48  6EF6               	movwf	tblptrl,c
  3449  007A4A  0E7E               	movlw	high _k
  3450  007A4C  2027               	addwfc	??_calc_sha_256+7,w,c
  3451  007A4E  6EF7               	movwf	tblptrh,c
  3452  007A50                     	if	0	;There are less than 3 active tblptr bytes
  3453  007A50                     	endif
  3454  007A50  0009               	tblrd		*+
  3455  007A52  CFF5 F028          	movff	tablat,??_calc_sha_256+8
  3456  007A56  0009               	tblrd		*+
  3457  007A58  CFF5 F029          	movff	tablat,??_calc_sha_256+9
  3458  007A5C  0009               	tblrd		*+
  3459  007A5E  CFF5 F02A          	movff	tablat,??_calc_sha_256+10
  3460  007A62  0009               	tblrd		*+
  3461  007A64  CFF5 F02B          	movff	tablat,??_calc_sha_256+11
  3462  007A68  5028               	movf	??_calc_sha_256+8,w,c
  3463  007A6A  0102               	movlb	2	; () banked
  3464  007A6C  251C               	addwf	(calc_sha_256@ah+28)& (0+255),w,b
  3465  007A6E  6E2C               	movwf	(??_calc_sha_256+12)& (0+255),c
  3466  007A70  5029               	movf	??_calc_sha_256+9,w,c
  3467  007A72  211D               	addwfc	(calc_sha_256@ah+29)& (0+255),w,b
  3468  007A74  6E2D               	movwf	(??_calc_sha_256+13)& (0+255),c
  3469  007A76  502A               	movf	??_calc_sha_256+10,w,c
  3470  007A78  211E               	addwfc	(calc_sha_256@ah+30)& (0+255),w,b
  3471  007A7A  6E2E               	movwf	(??_calc_sha_256+14)& (0+255),c
  3472  007A7C  502B               	movf	??_calc_sha_256+11,w,c
  3473  007A7E  211F               	addwfc	(calc_sha_256@ah+31)& (0+255),w,b
  3474  007A80  6E2F               	movwf	(??_calc_sha_256+15)& (0+255),c
  3475  007A82  5022               	movf	??_calc_sha_256+2,w,c
  3476  007A84  242C               	addwf	??_calc_sha_256+12,w,c
  3477  007A86  6E30               	movwf	(??_calc_sha_256+16)& (0+255),c
  3478  007A88  5023               	movf	??_calc_sha_256+3,w,c
  3479  007A8A  202D               	addwfc	??_calc_sha_256+13,w,c
  3480  007A8C  6E31               	movwf	(??_calc_sha_256+17)& (0+255),c
  3481  007A8E  5024               	movf	??_calc_sha_256+4,w,c
  3482  007A90  202E               	addwfc	??_calc_sha_256+14,w,c
  3483  007A92  6E32               	movwf	(??_calc_sha_256+18)& (0+255),c
  3484  007A94  5025               	movf	??_calc_sha_256+5,w,c
  3485  007A96  202F               	addwfc	??_calc_sha_256+15,w,c
  3486  007A98  6E33               	movwf	(??_calc_sha_256+19)& (0+255),c
  3487  007A9A  0100               	movlb	0	; () banked
  3488  007A9C  51C8               	movf	calc_sha_256@s1_406& (0+255),w,b
  3489  007A9E  2430               	addwf	??_calc_sha_256+16,w,c
  3490  007AA0  6E34               	movwf	(??_calc_sha_256+20)& (0+255),c
  3491  007AA2  51C9               	movf	(calc_sha_256@s1_406+1)& (0+255),w,b
  3492  007AA4  2031               	addwfc	??_calc_sha_256+17,w,c
  3493  007AA6  6E35               	movwf	(??_calc_sha_256+21)& (0+255),c
  3494  007AA8  51CA               	movf	(calc_sha_256@s1_406+2)& (0+255),w,b
  3495  007AAA  2032               	addwfc	??_calc_sha_256+18,w,c
  3496  007AAC  6E36               	movwf	(??_calc_sha_256+22)& (0+255),c
  3497  007AAE  51CB               	movf	(calc_sha_256@s1_406+3)& (0+255),w,b
  3498  007AB0  2033               	addwfc	??_calc_sha_256+19,w,c
  3499  007AB2  6E37               	movwf	(??_calc_sha_256+23)& (0+255),c
  3500  007AB4  51CC               	movf	calc_sha_256@ch& (0+255),w,b
  3501  007AB6  2434               	addwf	??_calc_sha_256+20,w,c
  3502  007AB8  6FDC               	movwf	calc_sha_256@temp1& (0+255),b
  3503  007ABA  51CD               	movf	(calc_sha_256@ch+1)& (0+255),w,b
  3504  007ABC  2035               	addwfc	??_calc_sha_256+21,w,c
  3505  007ABE  6FDD               	movwf	(calc_sha_256@temp1+1)& (0+255),b
  3506  007AC0  51CE               	movf	(calc_sha_256@ch+2)& (0+255),w,b
  3507  007AC2  2036               	addwfc	??_calc_sha_256+22,w,c
  3508  007AC4  6FDE               	movwf	(calc_sha_256@temp1+2)& (0+255),b
  3509  007AC6  51CF               	movf	(calc_sha_256@ch+3)& (0+255),w,b
  3510  007AC8  2037               	addwfc	??_calc_sha_256+23,w,c
  3511  007ACA  6FDF               	movwf	(calc_sha_256@temp1+3)& (0+255),b
  3512                           
  3513                           ; BSR set to: 0
  3514                           ;main.c: 240: const uint32_t s0 = rotate_right(ah[0], 2) ^ rotate_right(ah[0], 13) ^ rot
      +                          ate_right(ah[0], 22);
  3515  007ACC  C200  F001         	movff	calc_sha_256@ah,rotate_right@value
  3516  007AD0  C201  F002         	movff	calc_sha_256@ah+1,rotate_right@value+1
  3517  007AD4  C202  F003         	movff	calc_sha_256@ah+2,rotate_right@value+2
  3518  007AD8  C203  F004         	movff	calc_sha_256@ah+3,rotate_right@value+3
  3519  007ADC  0E00               	movlw	0
  3520  007ADE  6E06               	movwf	rotate_right@count+1,c
  3521  007AE0  0E02               	movlw	2
  3522  007AE2  6E05               	movwf	rotate_right@count,c
  3523  007AE4  EC6E  F035         	call	_rotate_right	;wreg free
  3524  007AE8  C001  F020         	movff	?_rotate_right,??_calc_sha_256
  3525  007AEC  C002  F021         	movff	?_rotate_right+1,??_calc_sha_256+1
  3526  007AF0  C003  F022         	movff	?_rotate_right+2,??_calc_sha_256+2
  3527  007AF4  C004  F023         	movff	?_rotate_right+3,??_calc_sha_256+3
  3528  007AF8  C200  F001         	movff	calc_sha_256@ah,rotate_right@value
  3529  007AFC  C201  F002         	movff	calc_sha_256@ah+1,rotate_right@value+1
  3530  007B00  C202  F003         	movff	calc_sha_256@ah+2,rotate_right@value+2
  3531  007B04  C203  F004         	movff	calc_sha_256@ah+3,rotate_right@value+3
  3532  007B08  0E00               	movlw	0
  3533  007B0A  6E06               	movwf	rotate_right@count+1,c
  3534  007B0C  0E0D               	movlw	13
  3535  007B0E  6E05               	movwf	rotate_right@count,c
  3536  007B10  EC6E  F035         	call	_rotate_right	;wreg free
  3537  007B14  5001               	movf	?_rotate_right,w,c
  3538  007B16  1820               	xorwf	??_calc_sha_256,w,c
  3539  007B18  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  3540  007B1A  5002               	movf	?_rotate_right+1,w,c
  3541  007B1C  1821               	xorwf	??_calc_sha_256+1,w,c
  3542  007B1E  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  3543  007B20  5003               	movf	?_rotate_right+2,w,c
  3544  007B22  1822               	xorwf	??_calc_sha_256+2,w,c
  3545  007B24  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  3546  007B26  5004               	movf	?_rotate_right+3,w,c
  3547  007B28  1823               	xorwf	??_calc_sha_256+3,w,c
  3548  007B2A  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  3549  007B2C  C200  F001         	movff	calc_sha_256@ah,rotate_right@value
  3550  007B30  C201  F002         	movff	calc_sha_256@ah+1,rotate_right@value+1
  3551  007B34  C202  F003         	movff	calc_sha_256@ah+2,rotate_right@value+2
  3552  007B38  C203  F004         	movff	calc_sha_256@ah+3,rotate_right@value+3
  3553  007B3C  0E00               	movlw	0
  3554  007B3E  6E06               	movwf	rotate_right@count+1,c
  3555  007B40  0E16               	movlw	22
  3556  007B42  6E05               	movwf	rotate_right@count,c
  3557  007B44  EC6E  F035         	call	_rotate_right	;wreg free
  3558  007B48  5001               	movf	?_rotate_right,w,c
  3559  007B4A  1824               	xorwf	??_calc_sha_256+4,w,c
  3560  007B4C  0100               	movlb	0	; () banked
  3561  007B4E  6FD0               	movwf	calc_sha_256@s0_409& (0+255),b
  3562  007B50  5002               	movf	?_rotate_right+1,w,c
  3563  007B52  1825               	xorwf	??_calc_sha_256+5,w,c
  3564  007B54  6FD1               	movwf	(calc_sha_256@s0_409+1)& (0+255),b
  3565  007B56  5003               	movf	?_rotate_right+2,w,c
  3566  007B58  1826               	xorwf	??_calc_sha_256+6,w,c
  3567  007B5A  6FD2               	movwf	(calc_sha_256@s0_409+2)& (0+255),b
  3568  007B5C  5004               	movf	?_rotate_right+3,w,c
  3569  007B5E  1827               	xorwf	??_calc_sha_256+7,w,c
  3570  007B60  6FD3               	movwf	(calc_sha_256@s0_409+3)& (0+255),b
  3571                           
  3572                           ; BSR set to: 0
  3573                           ;main.c: 241: const uint32_t maj = (ah[0] & ah[1]) ^ (ah[0] & ah[2]) ^ (ah[1] & ah[2]);
  3574  007B62  0102               	movlb	2	; () banked
  3575  007B64  5108               	movf	(calc_sha_256@ah+8)& (0+255),w,b
  3576  007B66  1504               	andwf	(calc_sha_256@ah+4)& (0+255),w,b
  3577  007B68  6E20               	movwf	??_calc_sha_256& (0+255),c
  3578  007B6A  5109               	movf	(calc_sha_256@ah+9)& (0+255),w,b
  3579  007B6C  1505               	andwf	(calc_sha_256@ah+5)& (0+255),w,b
  3580  007B6E  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3581  007B70  510A               	movf	(calc_sha_256@ah+10)& (0+255),w,b
  3582  007B72  1506               	andwf	(calc_sha_256@ah+6)& (0+255),w,b
  3583  007B74  6E22               	movwf	(??_calc_sha_256+2)& (0+255),c
  3584  007B76  510B               	movf	(calc_sha_256@ah+11)& (0+255),w,b
  3585  007B78  1507               	andwf	(calc_sha_256@ah+7)& (0+255),w,b
  3586  007B7A  6E23               	movwf	(??_calc_sha_256+3)& (0+255),c
  3587  007B7C  5100               	movf	calc_sha_256@ah& (0+255),w,b
  3588  007B7E  1508               	andwf	(calc_sha_256@ah+8)& (0+255),w,b
  3589  007B80  6E24               	movwf	(??_calc_sha_256+4)& (0+255),c
  3590  007B82  5101               	movf	(calc_sha_256@ah+1)& (0+255),w,b
  3591  007B84  1509               	andwf	(calc_sha_256@ah+9)& (0+255),w,b
  3592  007B86  6E25               	movwf	(??_calc_sha_256+5)& (0+255),c
  3593  007B88  5102               	movf	(calc_sha_256@ah+2)& (0+255),w,b
  3594  007B8A  150A               	andwf	(calc_sha_256@ah+10)& (0+255),w,b
  3595  007B8C  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  3596  007B8E  5103               	movf	(calc_sha_256@ah+3)& (0+255),w,b
  3597  007B90  150B               	andwf	(calc_sha_256@ah+11)& (0+255),w,b
  3598  007B92  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  3599  007B94  5100               	movf	calc_sha_256@ah& (0+255),w,b
  3600  007B96  1504               	andwf	(calc_sha_256@ah+4)& (0+255),w,b
  3601  007B98  6E28               	movwf	(??_calc_sha_256+8)& (0+255),c
  3602  007B9A  5101               	movf	(calc_sha_256@ah+1)& (0+255),w,b
  3603  007B9C  1505               	andwf	(calc_sha_256@ah+5)& (0+255),w,b
  3604  007B9E  6E29               	movwf	(??_calc_sha_256+9)& (0+255),c
  3605  007BA0  5102               	movf	(calc_sha_256@ah+2)& (0+255),w,b
  3606  007BA2  1506               	andwf	(calc_sha_256@ah+6)& (0+255),w,b
  3607  007BA4  6E2A               	movwf	(??_calc_sha_256+10)& (0+255),c
  3608  007BA6  5103               	movf	(calc_sha_256@ah+3)& (0+255),w,b
  3609  007BA8  1507               	andwf	(calc_sha_256@ah+7)& (0+255),w,b
  3610  007BAA  6E2B               	movwf	(??_calc_sha_256+11)& (0+255),c
  3611  007BAC  5024               	movf	??_calc_sha_256+4,w,c
  3612  007BAE  1828               	xorwf	??_calc_sha_256+8,w,c
  3613  007BB0  6E2C               	movwf	(??_calc_sha_256+12)& (0+255),c
  3614  007BB2  5025               	movf	??_calc_sha_256+5,w,c
  3615  007BB4  1829               	xorwf	??_calc_sha_256+9,w,c
  3616  007BB6  6E2D               	movwf	(??_calc_sha_256+13)& (0+255),c
  3617  007BB8  5026               	movf	??_calc_sha_256+6,w,c
  3618  007BBA  182A               	xorwf	??_calc_sha_256+10,w,c
  3619  007BBC  6E2E               	movwf	(??_calc_sha_256+14)& (0+255),c
  3620  007BBE  5027               	movf	??_calc_sha_256+7,w,c
  3621  007BC0  182B               	xorwf	??_calc_sha_256+11,w,c
  3622  007BC2  6E2F               	movwf	(??_calc_sha_256+15)& (0+255),c
  3623  007BC4  5020               	movf	??_calc_sha_256,w,c
  3624  007BC6  182C               	xorwf	??_calc_sha_256+12,w,c
  3625  007BC8  0100               	movlb	0	; () banked
  3626  007BCA  6FD4               	movwf	calc_sha_256@maj& (0+255),b
  3627  007BCC  5021               	movf	??_calc_sha_256+1,w,c
  3628  007BCE  182D               	xorwf	??_calc_sha_256+13,w,c
  3629  007BD0  6FD5               	movwf	(calc_sha_256@maj+1)& (0+255),b
  3630  007BD2  5022               	movf	??_calc_sha_256+2,w,c
  3631  007BD4  182E               	xorwf	??_calc_sha_256+14,w,c
  3632  007BD6  6FD6               	movwf	(calc_sha_256@maj+2)& (0+255),b
  3633  007BD8  5023               	movf	??_calc_sha_256+3,w,c
  3634  007BDA  182F               	xorwf	??_calc_sha_256+15,w,c
  3635  007BDC  6FD7               	movwf	(calc_sha_256@maj+3)& (0+255),b
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;main.c: 242: const uint32_t temp2 = s0 + maj;
  3639  007BDE  51D4               	movf	calc_sha_256@maj& (0+255),w,b
  3640  007BE0  25D0               	addwf	calc_sha_256@s0_409& (0+255),w,b
  3641  007BE2  6FD8               	movwf	calc_sha_256@temp2& (0+255),b
  3642  007BE4  51D5               	movf	(calc_sha_256@maj+1)& (0+255),w,b
  3643  007BE6  21D1               	addwfc	(calc_sha_256@s0_409+1)& (0+255),w,b
  3644  007BE8  6FD9               	movwf	(calc_sha_256@temp2+1)& (0+255),b
  3645  007BEA  51D6               	movf	(calc_sha_256@maj+2)& (0+255),w,b
  3646  007BEC  21D2               	addwfc	(calc_sha_256@s0_409+2)& (0+255),w,b
  3647  007BEE  6FDA               	movwf	(calc_sha_256@temp2+2)& (0+255),b
  3648  007BF0  51D7               	movf	(calc_sha_256@maj+3)& (0+255),w,b
  3649  007BF2  21D3               	addwfc	(calc_sha_256@s0_409+3)& (0+255),w,b
  3650  007BF4  6FDB               	movwf	(calc_sha_256@temp2+3)& (0+255),b
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;main.c: 244: ah[7] = ah[6];
  3654  007BF6  C218  F21C         	movff	calc_sha_256@ah+24,calc_sha_256@ah+28
  3655  007BFA  C219  F21D         	movff	calc_sha_256@ah+25,calc_sha_256@ah+29
  3656  007BFE  C21A  F21E         	movff	calc_sha_256@ah+26,calc_sha_256@ah+30
  3657  007C02  C21B  F21F         	movff	calc_sha_256@ah+27,calc_sha_256@ah+31
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;main.c: 245: ah[6] = ah[5];
  3661  007C06  C214  F218         	movff	calc_sha_256@ah+20,calc_sha_256@ah+24
  3662  007C0A  C215  F219         	movff	calc_sha_256@ah+21,calc_sha_256@ah+25
  3663  007C0E  C216  F21A         	movff	calc_sha_256@ah+22,calc_sha_256@ah+26
  3664  007C12  C217  F21B         	movff	calc_sha_256@ah+23,calc_sha_256@ah+27
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;main.c: 246: ah[5] = ah[4];
  3668  007C16  C210  F214         	movff	calc_sha_256@ah+16,calc_sha_256@ah+20
  3669  007C1A  C211  F215         	movff	calc_sha_256@ah+17,calc_sha_256@ah+21
  3670  007C1E  C212  F216         	movff	calc_sha_256@ah+18,calc_sha_256@ah+22
  3671  007C22  C213  F217         	movff	calc_sha_256@ah+19,calc_sha_256@ah+23
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;main.c: 247: ah[4] = ah[3] + temp1;
  3675  007C26  51DC               	movf	calc_sha_256@temp1& (0+255),w,b
  3676  007C28  0102               	movlb	2	; () banked
  3677  007C2A  250C               	addwf	(calc_sha_256@ah+12)& (0+255),w,b
  3678  007C2C  6F10               	movwf	(calc_sha_256@ah+16)& (0+255),b
  3679  007C2E  0100               	movlb	0	; () banked
  3680  007C30  51DD               	movf	(calc_sha_256@temp1+1)& (0+255),w,b
  3681  007C32  0102               	movlb	2	; () banked
  3682  007C34  210D               	addwfc	(calc_sha_256@ah+13)& (0+255),w,b
  3683  007C36  6F11               	movwf	(calc_sha_256@ah+17)& (0+255),b
  3684  007C38  0100               	movlb	0	; () banked
  3685  007C3A  51DE               	movf	(calc_sha_256@temp1+2)& (0+255),w,b
  3686  007C3C  0102               	movlb	2	; () banked
  3687  007C3E  210E               	addwfc	(calc_sha_256@ah+14)& (0+255),w,b
  3688  007C40  6F12               	movwf	(calc_sha_256@ah+18)& (0+255),b
  3689  007C42  0100               	movlb	0	; () banked
  3690  007C44  51DF               	movf	(calc_sha_256@temp1+3)& (0+255),w,b
  3691  007C46  0102               	movlb	2	; () banked
  3692  007C48  210F               	addwfc	(calc_sha_256@ah+15)& (0+255),w,b
  3693  007C4A  6F13               	movwf	(calc_sha_256@ah+19)& (0+255),b
  3694                           
  3695                           ; BSR set to: 2
  3696                           ;main.c: 248: ah[3] = ah[2];
  3697  007C4C  C208  F20C         	movff	calc_sha_256@ah+8,calc_sha_256@ah+12
  3698  007C50  C209  F20D         	movff	calc_sha_256@ah+9,calc_sha_256@ah+13
  3699  007C54  C20A  F20E         	movff	calc_sha_256@ah+10,calc_sha_256@ah+14
  3700  007C58  C20B  F20F         	movff	calc_sha_256@ah+11,calc_sha_256@ah+15
  3701                           
  3702                           ; BSR set to: 2
  3703                           ;main.c: 249: ah[2] = ah[1];
  3704  007C5C  C204  F208         	movff	calc_sha_256@ah+4,calc_sha_256@ah+8
  3705  007C60  C205  F209         	movff	calc_sha_256@ah+5,calc_sha_256@ah+9
  3706  007C64  C206  F20A         	movff	calc_sha_256@ah+6,calc_sha_256@ah+10
  3707  007C68  C207  F20B         	movff	calc_sha_256@ah+7,calc_sha_256@ah+11
  3708                           
  3709                           ; BSR set to: 2
  3710                           ;main.c: 250: ah[1] = ah[0];
  3711  007C6C  C200  F204         	movff	calc_sha_256@ah,calc_sha_256@ah+4
  3712  007C70  C201  F205         	movff	calc_sha_256@ah+1,calc_sha_256@ah+5
  3713  007C74  C202  F206         	movff	calc_sha_256@ah+2,calc_sha_256@ah+6
  3714  007C78  C203  F207         	movff	calc_sha_256@ah+3,calc_sha_256@ah+7
  3715                           
  3716                           ; BSR set to: 2
  3717                           ;main.c: 251: ah[0] = temp1 + temp2;
  3718  007C7C  0100               	movlb	0	; () banked
  3719  007C7E  51D8               	movf	calc_sha_256@temp2& (0+255),w,b
  3720  007C80  25DC               	addwf	calc_sha_256@temp1& (0+255),w,b
  3721  007C82  0102               	movlb	2	; () banked
  3722  007C84  6F00               	movwf	calc_sha_256@ah& (0+255),b
  3723  007C86  0100               	movlb	0	; () banked
  3724  007C88  51D9               	movf	(calc_sha_256@temp2+1)& (0+255),w,b
  3725  007C8A  21DD               	addwfc	(calc_sha_256@temp1+1)& (0+255),w,b
  3726  007C8C  0102               	movlb	2	; () banked
  3727  007C8E  6F01               	movwf	(calc_sha_256@ah+1)& (0+255),b
  3728  007C90  0100               	movlb	0	; () banked
  3729  007C92  51DA               	movf	(calc_sha_256@temp2+2)& (0+255),w,b
  3730  007C94  21DE               	addwfc	(calc_sha_256@temp1+2)& (0+255),w,b
  3731  007C96  0102               	movlb	2	; () banked
  3732  007C98  6F02               	movwf	(calc_sha_256@ah+2)& (0+255),b
  3733  007C9A  0100               	movlb	0	; () banked
  3734  007C9C  51DB               	movf	(calc_sha_256@temp2+3)& (0+255),w,b
  3735  007C9E  21DF               	addwfc	(calc_sha_256@temp1+3)& (0+255),w,b
  3736  007CA0  0102               	movlb	2	; () banked
  3737  007CA2  6F03               	movwf	(calc_sha_256@ah+3)& (0+255),b
  3738                           
  3739                           ; BSR set to: 2
  3740  007CA4  0100               	movlb	0	; () banked
  3741  007CA6  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  3742  007CA8  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  3743                           
  3744                           ; BSR set to: 0
  3745  007CAA  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3746  007CAC  D62C               	goto	l158
  3747  007CAE  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3748  007CB0  E101               	bnz	l1870
  3749  007CB2  D623               	goto	L3
  3750  007CB4                     u1380:
  3751  007CB4                     l1870:
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;main.c: 252: }
  3755                           ;main.c: 255: for (i = 0; i < 8; i++)
  3756  007CB4  0E00               	movlw	0
  3757  007CB6  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  3758  007CB8  0E00               	movlw	0
  3759  007CBA  6FEC               	movwf	calc_sha_256@i& (0+255),b
  3760  007CBC                     l1872:
  3761                           
  3762                           ; BSR set to: 0
  3763  007CBC  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3764  007CBE  D006               	goto	l160
  3765  007CC0  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3766  007CC2  E137               	bnz	l1882
  3767  007CC4  0E08               	movlw	8
  3768  007CC6  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  3769  007CC8  B0D8               	btfsc	status,0,c
  3770  007CCA  D033               	goto	u1400
  3771  007CCC                     l160:
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;main.c: 256: h[i] += ah[i];
  3775                           
  3776                           ; BSR set to: 0
  3777  007CCC  0E00               	movlw	low calc_sha_256@ah
  3778  007CCE  6E20               	movwf	??_calc_sha_256& (0+255),c
  3779  007CD0  0E02               	movlw	high calc_sha_256@ah
  3780  007CD2  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3781  007CD4  90D8               	bcf	status,0,c
  3782  007CD6  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3783  007CD8  6ED9               	movwf	fsr2l,c
  3784  007CDA  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3785  007CDC  6EDA               	movwf	fsr2h,c
  3786  007CDE  90D8               	bcf	status,0,c
  3787  007CE0  36D9               	rlcf	fsr2l,f,c
  3788  007CE2  36DA               	rlcf	fsr2h,f,c
  3789  007CE4  5020               	movf	??_calc_sha_256,w,c
  3790  007CE6  26D9               	addwf	fsr2l,f,c
  3791  007CE8  5021               	movf	??_calc_sha_256+1,w,c
  3792  007CEA  22DA               	addwfc	fsr2h,f,c
  3793  007CEC  CFDE F022          	movff	postinc2,??_calc_sha_256+2
  3794  007CF0  CFDE F023          	movff	postinc2,??_calc_sha_256+3
  3795  007CF4  CFDE F024          	movff	postinc2,??_calc_sha_256+4
  3796  007CF8  CFDE F025          	movff	postinc2,??_calc_sha_256+5
  3797  007CFC  0EA0               	movlw	low calc_sha_256@h
  3798  007CFE  6E26               	movwf	(??_calc_sha_256+6)& (0+255),c
  3799  007D00  0E00               	movlw	high calc_sha_256@h
  3800  007D02  6E27               	movwf	(??_calc_sha_256+7)& (0+255),c
  3801  007D04  90D8               	bcf	status,0,c
  3802  007D06  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3803  007D08  6ED9               	movwf	fsr2l,c
  3804  007D0A  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3805  007D0C  6EDA               	movwf	fsr2h,c
  3806  007D0E  90D8               	bcf	status,0,c
  3807  007D10  36D9               	rlcf	fsr2l,f,c
  3808  007D12  36DA               	rlcf	fsr2h,f,c
  3809  007D14  5026               	movf	??_calc_sha_256+6,w,c
  3810  007D16  26D9               	addwf	fsr2l,f,c
  3811  007D18  5027               	movf	??_calc_sha_256+7,w,c
  3812  007D1A  22DA               	addwfc	fsr2h,f,c
  3813  007D1C  5022               	movf	??_calc_sha_256+2,w,c
  3814  007D1E  26DE               	addwf	postinc2,f,c
  3815  007D20  5023               	movf	??_calc_sha_256+3,w,c
  3816  007D22  22DE               	addwfc	postinc2,f,c
  3817  007D24  5024               	movf	??_calc_sha_256+4,w,c
  3818  007D26  22DE               	addwfc	postinc2,f,c
  3819  007D28  5025               	movf	??_calc_sha_256+5,w,c
  3820  007D2A  22DE               	addwfc	postinc2,f,c
  3821                           
  3822                           ; BSR set to: 0
  3823  007D2C  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  3824  007D2E  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  3825  007D30  D7C5               	goto	l1872
  3826  007D32                     u1400:
  3827  007D32                     l1882:
  3828  007D32  0E60               	movlw	low calc_sha_256@chunk
  3829  007D34  6E0C               	movwf	calc_chunk@chunk,c
  3830  007D36  0E00               	movlw	high calc_sha_256@chunk
  3831  007D38  6E0D               	movwf	calc_chunk@chunk+1,c
  3832  007D3A  0EE2               	movlw	low calc_sha_256@state
  3833  007D3C  6E0E               	movwf	calc_chunk@state,c
  3834  007D3E  0E00               	movlw	high calc_sha_256@state
  3835  007D40  6E0F               	movwf	calc_chunk@state+1,c
  3836  007D42  ECEA  F035         	call	_calc_chunk	;wreg free
  3837  007D46  500C               	movf	?_calc_chunk,w,c
  3838  007D48  100D               	iorwf	?_calc_chunk+1,w,c
  3839  007D4A  A4D8               	btfss	status,2,c
  3840  007D4C  EFDC  F039         	goto	l151
  3841                           
  3842                           ;main.c: 257: }
  3843                           ;main.c: 260: for (i = 0, j = 0; i < 8; i++) {
  3844  007D50  0E00               	movlw	0
  3845  007D52  0100               	movlb	0	; () banked
  3846  007D54  6FED               	movwf	(calc_sha_256@i+1)& (0+255),b
  3847  007D56  0E00               	movlw	0
  3848  007D58  6FEC               	movwf	calc_sha_256@i& (0+255),b
  3849  007D5A  0E00               	movlw	0
  3850  007D5C  6E3F               	movwf	calc_sha_256@j+1,c
  3851  007D5E  0E00               	movlw	0
  3852  007D60  6E3E               	movwf	calc_sha_256@j,c
  3853                           
  3854                           ; BSR set to: 0
  3855  007D62  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  3856  007D64  D008               	goto	l163
  3857  007D66  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  3858  007D68  E105               	bnz	u1420
  3859  007D6A  0E08               	movlw	8
  3860  007D6C  5DEC               	subwf	calc_sha_256@i& (0+255),w,b
  3861  007D6E  B0D8               	btfsc	status,0,c
  3862  007D70  0012               	return	
  3863  007D72  D001               	goto	l163
  3864  007D74                     u1420:
  3865                           
  3866                           ; BSR set to: 0
  3867  007D74  0012               	return	
  3868  007D76                     l163:
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;main.c: 261: hash[j++] = (uint8_t) (h[i] >> 24);
  3872                           
  3873                           ; BSR set to: 0
  3874  007D76  503E               	movf	calc_sha_256@j,w,c
  3875  007D78  241A               	addwf	calc_sha_256@hash,w,c
  3876  007D7A  6ED9               	movwf	fsr2l,c
  3877  007D7C  503F               	movf	calc_sha_256@j+1,w,c
  3878  007D7E  201B               	addwfc	calc_sha_256@hash+1,w,c
  3879  007D80  6EDA               	movwf	fsr2h,c
  3880  007D82  0EA0               	movlw	low calc_sha_256@h
  3881  007D84  6E20               	movwf	??_calc_sha_256& (0+255),c
  3882  007D86  0E00               	movlw	high calc_sha_256@h
  3883  007D88  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3884  007D8A  90D8               	bcf	status,0,c
  3885  007D8C  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3886  007D8E  6EE1               	movwf	fsr1l,c
  3887  007D90  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3888  007D92  6EE2               	movwf	fsr1h,c
  3889  007D94  90D8               	bcf	status,0,c
  3890  007D96  36E1               	rlcf	fsr1l,f,c
  3891  007D98  36E2               	rlcf	fsr1h,f,c
  3892  007D9A  5020               	movf	??_calc_sha_256,w,c
  3893  007D9C  26E1               	addwf	fsr1l,f,c
  3894  007D9E  5021               	movf	??_calc_sha_256+1,w,c
  3895  007DA0  22E2               	addwfc	fsr1h,f,c
  3896  007DA2  CFE6 F022          	movff	postinc1,??_calc_sha_256+2
  3897  007DA6  CFE6 F023          	movff	postinc1,??_calc_sha_256+3
  3898  007DAA  CFE6 F024          	movff	postinc1,??_calc_sha_256+4
  3899  007DAE  CFE6 F025          	movff	postinc1,??_calc_sha_256+5
  3900  007DB2  0E19               	movlw	25
  3901  007DB4  D005               	goto	u1430
  3902  007DB6                     u1435:
  3903  007DB6  90D8               	bcf	status,0,c
  3904  007DB8  3225               	rrcf	??_calc_sha_256+5,f,c
  3905  007DBA  3224               	rrcf	??_calc_sha_256+4,f,c
  3906  007DBC  3223               	rrcf	??_calc_sha_256+3,f,c
  3907  007DBE  3222               	rrcf	??_calc_sha_256+2,f,c
  3908  007DC0                     u1430:
  3909  007DC0  2EE8               	decfsz	wreg,f,c
  3910  007DC2  D7F9               	goto	u1435
  3911  007DC4  5022               	movf	??_calc_sha_256+2,w,c
  3912  007DC6  6EDF               	movwf	indf2,c
  3913                           
  3914                           ; BSR set to: 0
  3915  007DC8  4A3E               	infsnz	calc_sha_256@j,f,c
  3916  007DCA  2A3F               	incf	calc_sha_256@j+1,f,c
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;main.c: 262: hash[j++] = (uint8_t) (h[i] >> 16);
  3920  007DCC  503E               	movf	calc_sha_256@j,w,c
  3921  007DCE  241A               	addwf	calc_sha_256@hash,w,c
  3922  007DD0  6ED9               	movwf	fsr2l,c
  3923  007DD2  503F               	movf	calc_sha_256@j+1,w,c
  3924  007DD4  201B               	addwfc	calc_sha_256@hash+1,w,c
  3925  007DD6  6EDA               	movwf	fsr2h,c
  3926  007DD8  0EA0               	movlw	low calc_sha_256@h
  3927  007DDA  6E20               	movwf	??_calc_sha_256& (0+255),c
  3928  007DDC  0E00               	movlw	high calc_sha_256@h
  3929  007DDE  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3930  007DE0  90D8               	bcf	status,0,c
  3931  007DE2  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3932  007DE4  6EE1               	movwf	fsr1l,c
  3933  007DE6  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3934  007DE8  6EE2               	movwf	fsr1h,c
  3935  007DEA  90D8               	bcf	status,0,c
  3936  007DEC  36E1               	rlcf	fsr1l,f,c
  3937  007DEE  36E2               	rlcf	fsr1h,f,c
  3938  007DF0  5020               	movf	??_calc_sha_256,w,c
  3939  007DF2  26E1               	addwf	fsr1l,f,c
  3940  007DF4  5021               	movf	??_calc_sha_256+1,w,c
  3941  007DF6  22E2               	addwfc	fsr1h,f,c
  3942  007DF8  CFE6 F022          	movff	postinc1,??_calc_sha_256+2
  3943  007DFC  CFE6 F023          	movff	postinc1,??_calc_sha_256+3
  3944  007E00  CFE6 F024          	movff	postinc1,??_calc_sha_256+4
  3945  007E04  CFE6 F025          	movff	postinc1,??_calc_sha_256+5
  3946  007E08  0E11               	movlw	17
  3947  007E0A  D005               	goto	u1440
  3948  007E0C                     u1445:
  3949  007E0C  90D8               	bcf	status,0,c
  3950  007E0E  3225               	rrcf	??_calc_sha_256+5,f,c
  3951  007E10  3224               	rrcf	??_calc_sha_256+4,f,c
  3952  007E12  3223               	rrcf	??_calc_sha_256+3,f,c
  3953  007E14  3222               	rrcf	??_calc_sha_256+2,f,c
  3954  007E16                     u1440:
  3955  007E16  2EE8               	decfsz	wreg,f,c
  3956  007E18  D7F9               	goto	u1445
  3957  007E1A  5022               	movf	??_calc_sha_256+2,w,c
  3958  007E1C  6EDF               	movwf	indf2,c
  3959  007E1E  4A3E               	infsnz	calc_sha_256@j,f,c
  3960  007E20  2A3F               	incf	calc_sha_256@j+1,f,c
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;main.c: 263: hash[j++] = (uint8_t) (h[i] >> 8);
  3964  007E22  503E               	movf	calc_sha_256@j,w,c
  3965  007E24  241A               	addwf	calc_sha_256@hash,w,c
  3966  007E26  6ED9               	movwf	fsr2l,c
  3967  007E28  503F               	movf	calc_sha_256@j+1,w,c
  3968  007E2A  201B               	addwfc	calc_sha_256@hash+1,w,c
  3969  007E2C  6EDA               	movwf	fsr2h,c
  3970  007E2E  0EA0               	movlw	low calc_sha_256@h
  3971  007E30  6E20               	movwf	??_calc_sha_256& (0+255),c
  3972  007E32  0E00               	movlw	high calc_sha_256@h
  3973  007E34  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  3974  007E36  90D8               	bcf	status,0,c
  3975  007E38  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  3976  007E3A  6EE1               	movwf	fsr1l,c
  3977  007E3C  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  3978  007E3E  6EE2               	movwf	fsr1h,c
  3979  007E40  90D8               	bcf	status,0,c
  3980  007E42  36E1               	rlcf	fsr1l,f,c
  3981  007E44  36E2               	rlcf	fsr1h,f,c
  3982  007E46  5020               	movf	??_calc_sha_256,w,c
  3983  007E48  26E1               	addwf	fsr1l,f,c
  3984  007E4A  5021               	movf	??_calc_sha_256+1,w,c
  3985  007E4C  22E2               	addwfc	fsr1h,f,c
  3986  007E4E  CFE6 F022          	movff	postinc1,??_calc_sha_256+2
  3987  007E52  CFE6 F023          	movff	postinc1,??_calc_sha_256+3
  3988  007E56  CFE6 F024          	movff	postinc1,??_calc_sha_256+4
  3989  007E5A  CFE6 F025          	movff	postinc1,??_calc_sha_256+5
  3990  007E5E  C023  F022         	movff	??_calc_sha_256+3,??_calc_sha_256+2
  3991  007E62  C024  F023         	movff	??_calc_sha_256+4,??_calc_sha_256+3
  3992  007E66  C025  F024         	movff	??_calc_sha_256+5,??_calc_sha_256+4
  3993  007E6A  6A25               	clrf	??_calc_sha_256+5,c
  3994  007E6C  5022               	movf	??_calc_sha_256+2,w,c
  3995  007E6E  6EDF               	movwf	indf2,c
  3996                           
  3997                           ; BSR set to: 0
  3998  007E70  4A3E               	infsnz	calc_sha_256@j,f,c
  3999  007E72  2A3F               	incf	calc_sha_256@j+1,f,c
  4000                           
  4001                           ;main.c: 264: hash[j++] = (uint8_t) h[i];
  4002  007E74  0EA0               	movlw	low calc_sha_256@h
  4003  007E76  6E20               	movwf	??_calc_sha_256& (0+255),c
  4004  007E78  0E00               	movlw	high calc_sha_256@h
  4005  007E7A  6E21               	movwf	(??_calc_sha_256+1)& (0+255),c
  4006  007E7C  90D8               	bcf	status,0,c
  4007  007E7E  35EC               	rlcf	calc_sha_256@i& (0+255),w,b
  4008  007E80  6ED9               	movwf	fsr2l,c
  4009  007E82  35ED               	rlcf	(calc_sha_256@i+1)& (0+255),w,b
  4010  007E84  6EDA               	movwf	fsr2h,c
  4011  007E86  90D8               	bcf	status,0,c
  4012  007E88  36D9               	rlcf	fsr2l,f,c
  4013  007E8A  36DA               	rlcf	fsr2h,f,c
  4014  007E8C  5020               	movf	??_calc_sha_256,w,c
  4015  007E8E  26D9               	addwf	fsr2l,f,c
  4016  007E90  5021               	movf	??_calc_sha_256+1,w,c
  4017  007E92  22DA               	addwfc	fsr2h,f,c
  4018  007E94  503E               	movf	calc_sha_256@j,w,c
  4019  007E96  241A               	addwf	calc_sha_256@hash,w,c
  4020  007E98  6EE1               	movwf	fsr1l,c
  4021  007E9A  503F               	movf	calc_sha_256@j+1,w,c
  4022  007E9C  201B               	addwfc	calc_sha_256@hash+1,w,c
  4023  007E9E  6EE2               	movwf	fsr1h,c
  4024  007EA0  CFDF FFE7          	movff	indf2,indf1
  4025                           
  4026                           ; BSR set to: 0
  4027  007EA4  4A3E               	infsnz	calc_sha_256@j,f,c
  4028  007EA6  2A3F               	incf	calc_sha_256@j+1,f,c
  4029                           
  4030                           ; BSR set to: 0
  4031  007EA8  4BEC               	infsnz	calc_sha_256@i& (0+255),f,b
  4032  007EAA  2BED               	incf	(calc_sha_256@i+1)& (0+255),f,b
  4033                           
  4034                           ; BSR set to: 0
  4035  007EAC  BFED               	btfsc	(calc_sha_256@i+1)& (0+255),7,b
  4036  007EAE  D763               	goto	l163
  4037  007EB0  51ED               	movf	(calc_sha_256@i+1)& (0+255),w,b
  4038  007EB2  E101               	bnz	l165
  4039  007EB4  D75A               	goto	L4
  4040  007EB6                     l165:
  4041                           
  4042                           ; BSR set to: 0
  4043  007EB6  0012               	return		;funcret
  4044  007EB8                     __end_of_calc_sha_256:
  4045                           	opt stack 0
  4046                           tosu	equ	0xFFF
  4047                           tosh	equ	0xFFE
  4048                           tosl	equ	0xFFD
  4049                           pclath	equ	0xFFA
  4050                           tblptru	equ	0xFF8
  4051                           tblptrh	equ	0xFF7
  4052                           tblptrl	equ	0xFF6
  4053                           tablat	equ	0xFF5
  4054                           prodh	equ	0xFF4
  4055                           prodl	equ	0xFF3
  4056                           postinc0	equ	0xFEE
  4057                           wreg	equ	0xFE8
  4058                           indf1	equ	0xFE7
  4059                           postinc1	equ	0xFE6
  4060                           postdec1	equ	0xFE5
  4061                           plusw1	equ	0xFE3
  4062                           fsr1h	equ	0xFE2
  4063                           fsr1l	equ	0xFE1
  4064                           indf2	equ	0xFDF
  4065                           postinc2	equ	0xFDE
  4066                           postdec2	equ	0xFDD
  4067                           plusw2	equ	0xFDB
  4068                           fsr2h	equ	0xFDA
  4069                           fsr2l	equ	0xFD9
  4070                           status	equ	0xFD8
  4071                           
  4072 ;; *************** function _rotate_right *****************
  4073 ;; Defined at:
  4074 ;;		line 127 in file "main.c"
  4075 ;; Parameters:    Size  Location     Type
  4076 ;;  value           4    0[COMRAM] unsigned long 
  4077 ;;  count           2    4[COMRAM] unsigned int 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  4    0[COMRAM] unsigned long 
  4082 ;; Registers used:
  4083 ;;		wreg, status,2, status,0
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4089 ;;      Params:         6       0       0       0       0       0       0       0       0
  4090 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4091 ;;      Temps:          9       0       0       0       0       0       0       0       0
  4092 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4093 ;;Total ram usage:       15 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; This function calls:
  4096 ;;		Nothing
  4097 ;; This function is called by:
  4098 ;;		_calc_sha_256
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           	psect	text11
  4103  006ADC                     __ptext11:
  4104                           	opt stack 0
  4105  006ADC                     _rotate_right:
  4106                           	opt stack 29
  4107                           
  4108                           ;main.c: 128: return value >> count | value << (32 - count);
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;incstack = 0
  4112  006ADC  5005               	movf	rotate_right@count,w,c
  4113  006ADE  0800               	sublw	0
  4114  006AE0  6E07               	movwf	??_rotate_right& (0+255),c
  4115  006AE2  0E20               	movlw	32
  4116  006AE4  2607               	addwf	??_rotate_right,f,c
  4117  006AE6  C001  F008         	movff	rotate_right@value,??_rotate_right+1
  4118  006AEA  C002  F009         	movff	rotate_right@value+1,??_rotate_right+2
  4119  006AEE  C003  F00A         	movff	rotate_right@value+2,??_rotate_right+3
  4120  006AF2  C004  F00B         	movff	rotate_right@value+3,??_rotate_right+4
  4121  006AF6  2A07               	incf	??_rotate_right,f,c
  4122  006AF8  D005               	goto	u1190
  4123  006AFA                     u1195:
  4124  006AFA  90D8               	bcf	status,0,c
  4125  006AFC  3608               	rlcf	??_rotate_right+1,f,c
  4126  006AFE  3609               	rlcf	??_rotate_right+2,f,c
  4127  006B00  360A               	rlcf	??_rotate_right+3,f,c
  4128  006B02  360B               	rlcf	??_rotate_right+4,f,c
  4129  006B04                     u1190:
  4130  006B04  2E07               	decfsz	??_rotate_right,f,c
  4131  006B06  D7F9               	goto	u1195
  4132  006B08  5005               	movf	rotate_right@count,w,c
  4133  006B0A  C001  F00C         	movff	rotate_right@value,??_rotate_right+5
  4134  006B0E  C002  F00D         	movff	rotate_right@value+1,??_rotate_right+6
  4135  006B12  C003  F00E         	movff	rotate_right@value+2,??_rotate_right+7
  4136  006B16  C004  F00F         	movff	rotate_right@value+3,??_rotate_right+8
  4137  006B1A  2AE8               	incf	wreg,f,c
  4138  006B1C  D005               	goto	u1200
  4139  006B1E                     u1205:
  4140  006B1E  90D8               	bcf	status,0,c
  4141  006B20  320F               	rrcf	??_rotate_right+8,f,c
  4142  006B22  320E               	rrcf	??_rotate_right+7,f,c
  4143  006B24  320D               	rrcf	??_rotate_right+6,f,c
  4144  006B26  320C               	rrcf	??_rotate_right+5,f,c
  4145  006B28                     u1200:
  4146  006B28  2EE8               	decfsz	wreg,f,c
  4147  006B2A  D7F9               	goto	u1205
  4148  006B2C  5008               	movf	??_rotate_right+1,w,c
  4149  006B2E  100C               	iorwf	??_rotate_right+5,w,c
  4150  006B30  6E01               	movwf	?_rotate_right,c
  4151  006B32  5009               	movf	??_rotate_right+2,w,c
  4152  006B34  100D               	iorwf	??_rotate_right+6,w,c
  4153  006B36  6E02               	movwf	?_rotate_right+1,c
  4154  006B38  500A               	movf	??_rotate_right+3,w,c
  4155  006B3A  100E               	iorwf	??_rotate_right+7,w,c
  4156  006B3C  6E03               	movwf	?_rotate_right+2,c
  4157  006B3E  500B               	movf	??_rotate_right+4,w,c
  4158  006B40  100F               	iorwf	??_rotate_right+8,w,c
  4159  006B42  6E04               	movwf	?_rotate_right+3,c
  4160  006B44  0012               	return	
  4161  006B46                     __end_of_rotate_right:
  4162                           	opt stack 0
  4163                           tosu	equ	0xFFF
  4164                           tosh	equ	0xFFE
  4165                           tosl	equ	0xFFD
  4166                           pclath	equ	0xFFA
  4167                           tblptru	equ	0xFF8
  4168                           tblptrh	equ	0xFF7
  4169                           tblptrl	equ	0xFF6
  4170                           tablat	equ	0xFF5
  4171                           prodh	equ	0xFF4
  4172                           prodl	equ	0xFF3
  4173                           postinc0	equ	0xFEE
  4174                           wreg	equ	0xFE8
  4175                           indf1	equ	0xFE7
  4176                           postinc1	equ	0xFE6
  4177                           postdec1	equ	0xFE5
  4178                           plusw1	equ	0xFE3
  4179                           fsr1h	equ	0xFE2
  4180                           fsr1l	equ	0xFE1
  4181                           indf2	equ	0xFDF
  4182                           postinc2	equ	0xFDE
  4183                           postdec2	equ	0xFDD
  4184                           plusw2	equ	0xFDB
  4185                           fsr2h	equ	0xFDA
  4186                           fsr2l	equ	0xFD9
  4187                           status	equ	0xFD8
  4188                           
  4189 ;; *************** function _init_buf_state *****************
  4190 ;; Defined at:
  4191 ;;		line 118 in file "main.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  state           2    0[COMRAM] PTR struct buffer_state
  4194 ;;		 -> calc_sha_256@state(10), 
  4195 ;;  input           2    2[COMRAM] PTR const void 
  4196 ;;		 -> string(16), 
  4197 ;;  len             2    4[COMRAM] unsigned int 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;		None
  4200 ;; Return value:  Size  Location     Type
  4201 ;;                  1    wreg      void 
  4202 ;; Registers used:
  4203 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4209 ;;      Params:         6       0       0       0       0       0       0       0       0
  4210 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4211 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4212 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4213 ;;Total ram usage:        6 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; This function calls:
  4216 ;;		Nothing
  4217 ;; This function is called by:
  4218 ;;		_calc_sha_256
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text12
  4223  006A7A                     __ptext12:
  4224                           	opt stack 0
  4225  006A7A                     _init_buf_state:
  4226                           	opt stack 29
  4227                           
  4228                           ;main.c: 119: state->p = input;
  4229                           
  4230                           ;incstack = 0
  4231  006A7A  C001  FFD9         	movff	init_buf_state@state,fsr2l
  4232  006A7E  C002  FFDA         	movff	init_buf_state@state+1,fsr2h
  4233  006A82  C003  FFDE         	movff	init_buf_state@input,postinc2
  4234  006A86  C004  FFDD         	movff	init_buf_state@input+1,postdec2
  4235                           
  4236                           ;main.c: 120: state->len = len;
  4237  006A8A  EE20 F002          	lfsr	2,2
  4238  006A8E  5001               	movf	init_buf_state@state,w,c
  4239  006A90  26D9               	addwf	fsr2l,f,c
  4240  006A92  5002               	movf	init_buf_state@state+1,w,c
  4241  006A94  22DA               	addwfc	fsr2h,f,c
  4242  006A96  C005  FFDE         	movff	init_buf_state@len,postinc2
  4243  006A9A  C006  FFDD         	movff	init_buf_state@len+1,postdec2
  4244                           
  4245                           ;main.c: 121: state->total_len = len;
  4246  006A9E  EE20 F004          	lfsr	2,4
  4247  006AA2  5001               	movf	init_buf_state@state,w,c
  4248  006AA4  26D9               	addwf	fsr2l,f,c
  4249  006AA6  5002               	movf	init_buf_state@state+1,w,c
  4250  006AA8  22DA               	addwfc	fsr2h,f,c
  4251  006AAA  C005  FFDE         	movff	init_buf_state@len,postinc2
  4252  006AAE  C006  FFDD         	movff	init_buf_state@len+1,postdec2
  4253                           
  4254                           ;main.c: 122: state->single_one_delivered = 0;
  4255  006AB2  EE20 F006          	lfsr	2,6
  4256  006AB6  5001               	movf	init_buf_state@state,w,c
  4257  006AB8  26D9               	addwf	fsr2l,f,c
  4258  006ABA  5002               	movf	init_buf_state@state+1,w,c
  4259  006ABC  22DA               	addwfc	fsr2h,f,c
  4260  006ABE  0E00               	movlw	0
  4261  006AC0  6EDE               	movwf	postinc2,c
  4262  006AC2  0E00               	movlw	0
  4263  006AC4  6EDD               	movwf	postdec2,c
  4264                           
  4265                           ;main.c: 123: state->total_len_delivered = 0;
  4266  006AC6  EE20 F008          	lfsr	2,8
  4267  006ACA  5001               	movf	init_buf_state@state,w,c
  4268  006ACC  26D9               	addwf	fsr2l,f,c
  4269  006ACE  5002               	movf	init_buf_state@state+1,w,c
  4270  006AD0  22DA               	addwfc	fsr2h,f,c
  4271  006AD2  0E00               	movlw	0
  4272  006AD4  6EDE               	movwf	postinc2,c
  4273  006AD6  0E00               	movlw	0
  4274  006AD8  6EDD               	movwf	postdec2,c
  4275  006ADA  0012               	return		;funcret
  4276  006ADC                     __end_of_init_buf_state:
  4277                           	opt stack 0
  4278                           tosu	equ	0xFFF
  4279                           tosh	equ	0xFFE
  4280                           tosl	equ	0xFFD
  4281                           pclath	equ	0xFFA
  4282                           tblptru	equ	0xFF8
  4283                           tblptrh	equ	0xFF7
  4284                           tblptrl	equ	0xFF6
  4285                           tablat	equ	0xFF5
  4286                           prodh	equ	0xFF4
  4287                           prodl	equ	0xFF3
  4288                           postinc0	equ	0xFEE
  4289                           wreg	equ	0xFE8
  4290                           indf1	equ	0xFE7
  4291                           postinc1	equ	0xFE6
  4292                           postdec1	equ	0xFE5
  4293                           plusw1	equ	0xFE3
  4294                           fsr1h	equ	0xFE2
  4295                           fsr1l	equ	0xFE1
  4296                           indf2	equ	0xFDF
  4297                           postinc2	equ	0xFDE
  4298                           postdec2	equ	0xFDD
  4299                           plusw2	equ	0xFDB
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _calc_chunk *****************
  4305 ;; Defined at:
  4306 ;;		line 132 in file "main.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  chunk           2   11[COMRAM] PTR unsigned char 
  4309 ;;		 -> calc_sha_256@chunk(64), 
  4310 ;;  state           2   13[COMRAM] PTR struct buffer_state
  4311 ;;		 -> calc_sha_256@state(10), 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;  i               2   23[COMRAM] int 
  4314 ;;  len             2   19[COMRAM] unsigned int 
  4315 ;;  left            2   17[COMRAM] const unsigned int 
  4316 ;;  space_in_chu    2   21[COMRAM] unsigned int 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  2   11[COMRAM] int 
  4319 ;; Registers used:
  4320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4326 ;;      Params:         4       0       0       0       0       0       0       0       0
  4327 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4328 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4329 ;;      Totals:        14       0       0       0       0       0       0       0       0
  4330 ;;Total ram usage:       14 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    1
  4333 ;; This function calls:
  4334 ;;		_memcpy
  4335 ;;		_memset
  4336 ;; This function is called by:
  4337 ;;		_calc_sha_256
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text13
  4342  006BD4                     __ptext13:
  4343                           	opt stack 0
  4344  006BD4                     _calc_chunk:
  4345                           	opt stack 28
  4346                           
  4347                           ;main.c: 133: size_t space_in_chunk;
  4348                           ;main.c: 136: if (state->total_len_delivered) {
  4349                           
  4350                           ;incstack = 0
  4351  006BD4  EE20 F008          	lfsr	2,8
  4352  006BD8  500E               	movf	calc_chunk@state,w,c
  4353  006BDA  26D9               	addwf	fsr2l,f,c
  4354  006BDC  500F               	movf	calc_chunk@state+1,w,c
  4355  006BDE  22DA               	addwfc	fsr2h,f,c
  4356  006BE0  50DE               	movf	postinc2,w,c
  4357  006BE2  10DE               	iorwf	postinc2,w,c
  4358  006BE4  B4D8               	btfsc	status,2,c
  4359  006BE6  D005               	goto	l138
  4360                           
  4361                           ;main.c: 137: return 0;
  4362  006BE8  0E00               	movlw	0
  4363  006BEA  6E0D               	movwf	?_calc_chunk+1,c
  4364  006BEC  0E00               	movlw	0
  4365  006BEE  6E0C               	movwf	?_calc_chunk,c
  4366  006BF0  0012               	return	
  4367  006BF2                     l138:
  4368                           
  4369                           ;main.c: 138: }
  4370                           ;main.c: 141: if (state->len >= 64) {
  4371  006BF2  EE20 F002          	lfsr	2,2
  4372  006BF6  500E               	movf	calc_chunk@state,w,c
  4373  006BF8  26D9               	addwf	fsr2l,f,c
  4374  006BFA  500F               	movf	calc_chunk@state+1,w,c
  4375  006BFC  22DA               	addwfc	fsr2h,f,c
  4376  006BFE  0E01               	movlw	1
  4377  006C00  50DB               	movf	plusw2,w,c
  4378  006C02  E104               	bnz	u1220
  4379  006C04  0E40               	movlw	64
  4380  006C06  5CDE               	subwf	postinc2,w,c
  4381  006C08  A0D8               	btfss	status,0,c
  4382  006C0A  D029               	goto	l140
  4383  006C0C                     u1220:
  4384                           
  4385                           ;main.c: 142: memcpy(chunk, state->p, 64);
  4386  006C0C  C00C  F001         	movff	calc_chunk@chunk,memcpy@d1
  4387  006C10  C00D  F002         	movff	calc_chunk@chunk+1,memcpy@d1+1
  4388  006C14  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  4389  006C18  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  4390  006C1C  CFDE F003          	movff	postinc2,memcpy@s1
  4391  006C20  CFDD F004          	movff	postdec2,memcpy@s1+1
  4392  006C24  0E00               	movlw	0
  4393  006C26  6E06               	movwf	memcpy@n+1,c
  4394  006C28  0E40               	movlw	64
  4395  006C2A  6E05               	movwf	memcpy@n,c
  4396  006C2C  EC9B  F034         	call	_memcpy	;wreg free
  4397                           
  4398                           ;main.c: 143: state->p += 64;
  4399  006C30  0E40               	movlw	64
  4400  006C32  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  4401  006C36  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  4402  006C3A  26DE               	addwf	postinc2,f,c
  4403  006C3C  0E00               	movlw	0
  4404  006C3E  22DD               	addwfc	postdec2,f,c
  4405                           
  4406                           ;main.c: 144: state->len -= 64;
  4407  006C40  EE20 F002          	lfsr	2,2
  4408  006C44  500E               	movf	calc_chunk@state,w,c
  4409  006C46  26D9               	addwf	fsr2l,f,c
  4410  006C48  500F               	movf	calc_chunk@state+1,w,c
  4411  006C4A  22DA               	addwfc	fsr2h,f,c
  4412  006C4C  0E40               	movlw	64
  4413  006C4E  5EDE               	subwf	postinc2,f,c
  4414  006C50  0E00               	movlw	0
  4415  006C52  5ADD               	subwfb	postdec2,f,c
  4416                           
  4417                           ;main.c: 145: return 1;
  4418  006C54  0E00               	movlw	0
  4419  006C56  6E0D               	movwf	?_calc_chunk+1,c
  4420  006C58  0E01               	movlw	1
  4421  006C5A  6E0C               	movwf	?_calc_chunk,c
  4422  006C5C  0012               	return	
  4423  006C5E                     l140:
  4424                           
  4425                           ;main.c: 146: }
  4426                           ;main.c: 149: memcpy(chunk, state->p, state->len);
  4427  006C5E  C00C  F001         	movff	calc_chunk@chunk,memcpy@d1
  4428  006C62  C00D  F002         	movff	calc_chunk@chunk+1,memcpy@d1+1
  4429  006C66  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  4430  006C6A  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  4431  006C6E  CFDE F003          	movff	postinc2,memcpy@s1
  4432  006C72  CFDD F004          	movff	postdec2,memcpy@s1+1
  4433  006C76  EE20 F002          	lfsr	2,2
  4434  006C7A  500E               	movf	calc_chunk@state,w,c
  4435  006C7C  26D9               	addwf	fsr2l,f,c
  4436  006C7E  500F               	movf	calc_chunk@state+1,w,c
  4437  006C80  22DA               	addwfc	fsr2h,f,c
  4438  006C82  CFDE F005          	movff	postinc2,memcpy@n
  4439  006C86  CFDD F006          	movff	postdec2,memcpy@n+1
  4440  006C8A  EC9B  F034         	call	_memcpy	;wreg free
  4441                           
  4442                           ;main.c: 150: chunk += state->len;
  4443  006C8E  EE20 F002          	lfsr	2,2
  4444  006C92  500E               	movf	calc_chunk@state,w,c
  4445  006C94  26D9               	addwf	fsr2l,f,c
  4446  006C96  500F               	movf	calc_chunk@state+1,w,c
  4447  006C98  22DA               	addwfc	fsr2h,f,c
  4448  006C9A  50DE               	movf	postinc2,w,c
  4449  006C9C  260C               	addwf	calc_chunk@chunk,f,c
  4450  006C9E  50DD               	movf	postdec2,w,c
  4451  006CA0  220D               	addwfc	calc_chunk@chunk+1,f,c
  4452                           
  4453                           ;main.c: 151: space_in_chunk = 64 - state->len;
  4454  006CA2  EE20 F002          	lfsr	2,2
  4455  006CA6  500E               	movf	calc_chunk@state,w,c
  4456  006CA8  26D9               	addwf	fsr2l,f,c
  4457  006CAA  500F               	movf	calc_chunk@state+1,w,c
  4458  006CAC  22DA               	addwfc	fsr2h,f,c
  4459  006CAE  CFDE F010          	movff	postinc2,??_calc_chunk
  4460  006CB2  CFDD F011          	movff	postdec2,??_calc_chunk+1
  4461  006CB6  1E10               	comf	??_calc_chunk,f,c
  4462  006CB8  1E11               	comf	??_calc_chunk+1,f,c
  4463  006CBA  4A10               	infsnz	??_calc_chunk,f,c
  4464  006CBC  2A11               	incf	??_calc_chunk+1,f,c
  4465  006CBE  0E40               	movlw	64
  4466  006CC0  2410               	addwf	??_calc_chunk,w,c
  4467  006CC2  6E16               	movwf	calc_chunk@space_in_chunk,c
  4468  006CC4  0E00               	movlw	0
  4469  006CC6  2011               	addwfc	??_calc_chunk+1,w,c
  4470  006CC8  6E17               	movwf	calc_chunk@space_in_chunk+1,c
  4471                           
  4472                           ;main.c: 152: state->p += state->len;
  4473  006CCA  EE20 F002          	lfsr	2,2
  4474  006CCE  500E               	movf	calc_chunk@state,w,c
  4475  006CD0  26D9               	addwf	fsr2l,f,c
  4476  006CD2  500F               	movf	calc_chunk@state+1,w,c
  4477  006CD4  22DA               	addwfc	fsr2h,f,c
  4478  006CD6  CFDE F010          	movff	postinc2,??_calc_chunk
  4479  006CDA  CFDD F011          	movff	postdec2,??_calc_chunk+1
  4480  006CDE  C00E  FFD9         	movff	calc_chunk@state,fsr2l
  4481  006CE2  C00F  FFDA         	movff	calc_chunk@state+1,fsr2h
  4482  006CE6  5010               	movf	??_calc_chunk,w,c
  4483  006CE8  26DE               	addwf	postinc2,f,c
  4484  006CEA  5011               	movf	??_calc_chunk+1,w,c
  4485  006CEC  22DD               	addwfc	postdec2,f,c
  4486                           
  4487                           ;main.c: 153: state->len = 0;
  4488  006CEE  EE20 F002          	lfsr	2,2
  4489  006CF2  500E               	movf	calc_chunk@state,w,c
  4490  006CF4  26D9               	addwf	fsr2l,f,c
  4491  006CF6  500F               	movf	calc_chunk@state+1,w,c
  4492  006CF8  22DA               	addwfc	fsr2h,f,c
  4493  006CFA  0E00               	movlw	0
  4494  006CFC  6EDE               	movwf	postinc2,c
  4495  006CFE  0E00               	movlw	0
  4496  006D00  6EDD               	movwf	postdec2,c
  4497                           
  4498                           ;main.c: 156: if (!state->single_one_delivered) {
  4499  006D02  EE20 F006          	lfsr	2,6
  4500  006D06  500E               	movf	calc_chunk@state,w,c
  4501  006D08  26D9               	addwf	fsr2l,f,c
  4502  006D0A  500F               	movf	calc_chunk@state+1,w,c
  4503  006D0C  22DA               	addwfc	fsr2h,f,c
  4504  006D0E  50DE               	movf	postinc2,w,c
  4505  006D10  10DE               	iorwf	postinc2,w,c
  4506  006D12  A4D8               	btfss	status,2,c
  4507  006D14  D015               	goto	l141
  4508                           
  4509                           ;main.c: 157: *chunk++ = 0x80;
  4510  006D16  C00C  FFD9         	movff	calc_chunk@chunk,fsr2l
  4511  006D1A  C00D  FFDA         	movff	calc_chunk@chunk+1,fsr2h
  4512  006D1E  0E80               	movlw	128
  4513  006D20  6EDF               	movwf	indf2,c
  4514  006D22  4A0C               	infsnz	calc_chunk@chunk,f,c
  4515  006D24  2A0D               	incf	calc_chunk@chunk+1,f,c
  4516                           
  4517                           ;main.c: 158: space_in_chunk -= 1;
  4518  006D26  0616               	decf	calc_chunk@space_in_chunk,f,c
  4519  006D28  A0D8               	btfss	status,0,c
  4520  006D2A  0617               	decf	calc_chunk@space_in_chunk+1,f,c
  4521                           
  4522                           ;main.c: 159: state->single_one_delivered = 1;
  4523  006D2C  EE20 F006          	lfsr	2,6
  4524  006D30  500E               	movf	calc_chunk@state,w,c
  4525  006D32  26D9               	addwf	fsr2l,f,c
  4526  006D34  500F               	movf	calc_chunk@state+1,w,c
  4527  006D36  22DA               	addwfc	fsr2h,f,c
  4528  006D38  0E01               	movlw	1
  4529  006D3A  6EDE               	movwf	postinc2,c
  4530  006D3C  0E00               	movlw	0
  4531  006D3E  6EDD               	movwf	postdec2,c
  4532  006D40                     l141:
  4533                           
  4534                           ;main.c: 160: }
  4535                           ;main.c: 167: if (space_in_chunk >= 8) {
  4536  006D40  5017               	movf	calc_chunk@space_in_chunk+1,w,c
  4537  006D42  E104               	bnz	u1240
  4538  006D44  0E08               	movlw	8
  4539  006D46  5C16               	subwf	calc_chunk@space_in_chunk,w,c
  4540  006D48  A0D8               	btfss	status,0,c
  4541  006D4A  D053               	goto	l142
  4542  006D4C                     u1240:
  4543                           
  4544                           ;main.c: 168: const size_t left = space_in_chunk - 8;
  4545  006D4C  0EF8               	movlw	248
  4546  006D4E  2416               	addwf	calc_chunk@space_in_chunk,w,c
  4547  006D50  6E12               	movwf	calc_chunk@left,c
  4548  006D52  0EFF               	movlw	255
  4549  006D54  2017               	addwfc	calc_chunk@space_in_chunk+1,w,c
  4550  006D56  6E13               	movwf	calc_chunk@left+1,c
  4551                           
  4552                           ;main.c: 169: size_t len = state->total_len;
  4553  006D58  EE20 F004          	lfsr	2,4
  4554  006D5C  500E               	movf	calc_chunk@state,w,c
  4555  006D5E  26D9               	addwf	fsr2l,f,c
  4556  006D60  500F               	movf	calc_chunk@state+1,w,c
  4557  006D62  22DA               	addwfc	fsr2h,f,c
  4558  006D64  CFDE F014          	movff	postinc2,calc_chunk@len
  4559  006D68  CFDD F015          	movff	postdec2,calc_chunk@len+1
  4560                           
  4561                           ;main.c: 170: int i;
  4562                           ;main.c: 171: memset(chunk, 0x00, left);
  4563  006D6C  C00C  F001         	movff	calc_chunk@chunk,memset@p1
  4564  006D70  C00D  F002         	movff	calc_chunk@chunk+1,memset@p1+1
  4565  006D74  0E00               	movlw	0
  4566  006D76  6E04               	movwf	memset@c+1,c
  4567  006D78  0E00               	movlw	0
  4568  006D7A  6E03               	movwf	memset@c,c
  4569  006D7C  C012  F005         	movff	calc_chunk@left,memset@n
  4570  006D80  C013  F006         	movff	calc_chunk@left+1,memset@n+1
  4571  006D84  EC30  F034         	call	_memset	;wreg free
  4572                           
  4573                           ;main.c: 172: chunk += left;
  4574  006D88  5012               	movf	calc_chunk@left,w,c
  4575  006D8A  260C               	addwf	calc_chunk@chunk,f,c
  4576  006D8C  5013               	movf	calc_chunk@left+1,w,c
  4577  006D8E  220D               	addwfc	calc_chunk@chunk+1,f,c
  4578                           
  4579                           ;main.c: 175: chunk[7] = (uint8_t) (len << 3);
  4580  006D90  EE20 F007          	lfsr	2,7
  4581  006D94  500C               	movf	calc_chunk@chunk,w,c
  4582  006D96  26D9               	addwf	fsr2l,f,c
  4583  006D98  500D               	movf	calc_chunk@chunk+1,w,c
  4584  006D9A  22DA               	addwfc	fsr2h,f,c
  4585  006D9C  3814               	swapf	calc_chunk@len,w,c
  4586  006D9E  42E8               	rrncf	wreg,f,c
  4587  006DA0  0BF8               	andlw	248
  4588  006DA2  6EDF               	movwf	indf2,c
  4589                           
  4590                           ;main.c: 176: len >>= 5;
  4591  006DA4  0E05               	movlw	5
  4592  006DA6  6E10               	movwf	??_calc_chunk& (0+255),c
  4593  006DA8                     u1255:
  4594  006DA8  90D8               	bcf	status,0,c
  4595  006DAA  3215               	rrcf	calc_chunk@len+1,f,c
  4596  006DAC  3214               	rrcf	calc_chunk@len,f,c
  4597  006DAE  2E10               	decfsz	??_calc_chunk& (0+255),f,c
  4598  006DB0  D7FB               	goto	u1255
  4599                           
  4600                           ;main.c: 177: for (i = 6; i >= 0; i--) {
  4601  006DB2  0E00               	movlw	0
  4602  006DB4  6E19               	movwf	calc_chunk@i+1,c
  4603  006DB6  0E06               	movlw	6
  4604  006DB8  6E18               	movwf	calc_chunk@i,c
  4605  006DBA                     l1752:
  4606  006DBA  BE19               	btfsc	calc_chunk@i+1,7,c
  4607  006DBC  D00F               	goto	u1270
  4608                           
  4609                           ;main.c: 178: chunk[i] = (uint8_t) len;
  4610  006DBE  5018               	movf	calc_chunk@i,w,c
  4611  006DC0  240C               	addwf	calc_chunk@chunk,w,c
  4612  006DC2  6ED9               	movwf	fsr2l,c
  4613  006DC4  5019               	movf	calc_chunk@i+1,w,c
  4614  006DC6  200D               	addwfc	calc_chunk@chunk+1,w,c
  4615  006DC8  6EDA               	movwf	fsr2h,c
  4616  006DCA  C014  FFDF         	movff	calc_chunk@len,indf2
  4617                           
  4618                           ;main.c: 179: len >>= 8;
  4619  006DCE  5015               	movf	calc_chunk@len+1,w,c
  4620  006DD0  6E14               	movwf	calc_chunk@len,c
  4621  006DD2  6A15               	clrf	calc_chunk@len+1,c
  4622  006DD4  0618               	decf	calc_chunk@i,f,c
  4623  006DD6  A0D8               	btfss	status,0,c
  4624  006DD8  0619               	decf	calc_chunk@i+1,f,c
  4625  006DDA  D7EF               	goto	l1752
  4626  006DDC                     u1270:
  4627                           
  4628                           ;main.c: 180: }
  4629                           ;main.c: 181: state->total_len_delivered = 1;
  4630  006DDC  EE20 F008          	lfsr	2,8
  4631  006DE0  500E               	movf	calc_chunk@state,w,c
  4632  006DE2  26D9               	addwf	fsr2l,f,c
  4633  006DE4  500F               	movf	calc_chunk@state+1,w,c
  4634  006DE6  22DA               	addwfc	fsr2h,f,c
  4635  006DE8  0E01               	movlw	1
  4636  006DEA  6EDE               	movwf	postinc2,c
  4637  006DEC  0E00               	movlw	0
  4638  006DEE  6EDD               	movwf	postdec2,c
  4639                           
  4640                           ;main.c: 182: } else {
  4641  006DF0  D00E               	goto	l145
  4642  006DF2                     l142:
  4643                           
  4644                           ;main.c: 184: memset(chunk, 0x00, space_in_chunk);
  4645  006DF2  C00C  F001         	movff	calc_chunk@chunk,memset@p1
  4646  006DF6  C00D  F002         	movff	calc_chunk@chunk+1,memset@p1+1
  4647  006DFA  0E00               	movlw	0
  4648  006DFC  6E04               	movwf	memset@c+1,c
  4649  006DFE  0E00               	movlw	0
  4650  006E00  6E03               	movwf	memset@c,c
  4651  006E02  C016  F005         	movff	calc_chunk@space_in_chunk,memset@n
  4652  006E06  C017  F006         	movff	calc_chunk@space_in_chunk+1,memset@n+1
  4653  006E0A  EC30  F034         	call	_memset	;wreg free
  4654  006E0E                     l145:
  4655                           
  4656                           ;main.c: 185: }
  4657                           ;main.c: 187: return 1;
  4658  006E0E  0E00               	movlw	0
  4659  006E10  6E0D               	movwf	?_calc_chunk+1,c
  4660  006E12  0E01               	movlw	1
  4661  006E14  6E0C               	movwf	?_calc_chunk,c
  4662  006E16  0012               	return	
  4663  006E18                     __end_of_calc_chunk:
  4664                           	opt stack 0
  4665                           tosu	equ	0xFFF
  4666                           tosh	equ	0xFFE
  4667                           tosl	equ	0xFFD
  4668                           pclath	equ	0xFFA
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodh	equ	0xFF4
  4674                           prodl	equ	0xFF3
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           indf1	equ	0xFE7
  4678                           postinc1	equ	0xFE6
  4679                           postdec1	equ	0xFE5
  4680                           plusw1	equ	0xFE3
  4681                           fsr1h	equ	0xFE2
  4682                           fsr1l	equ	0xFE1
  4683                           indf2	equ	0xFDF
  4684                           postinc2	equ	0xFDE
  4685                           postdec2	equ	0xFDD
  4686                           plusw2	equ	0xFDB
  4687                           fsr2h	equ	0xFDA
  4688                           fsr2l	equ	0xFD9
  4689                           status	equ	0xFD8
  4690                           
  4691 ;; *************** function _memset *****************
  4692 ;; Defined at:
  4693 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\memset.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  p1              2    0[COMRAM] PTR void 
  4696 ;;		 -> calc_sha_256@w(256), calc_sha_256@chunk(64), 
  4697 ;;  c               2    2[COMRAM] int 
  4698 ;;  n               2    4[COMRAM] unsigned int 
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;  p               2    6[COMRAM] PTR unsigned char 
  4701 ;;		 -> calc_sha_256@w(256), calc_sha_256@chunk(64), 
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  2    0[COMRAM] PTR void 
  4704 ;; Registers used:
  4705 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4711 ;;      Params:         6       0       0       0       0       0       0       0       0
  4712 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4713 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4714 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4715 ;;Total ram usage:        8 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; This function calls:
  4718 ;;		Nothing
  4719 ;; This function is called by:
  4720 ;;		_calc_chunk
  4721 ;;		_calc_sha_256
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           	psect	text14
  4726  006860                     __ptext14:
  4727                           	opt stack 0
  4728  006860                     _memset:
  4729                           	opt stack 29
  4730                           
  4731                           ;incstack = 0
  4732  006860  C001  F007         	movff	memset@p1,memset@p
  4733  006864  C002  F008         	movff	memset@p1+1,memset@p+1
  4734  006868  D008               	goto	l688
  4735  00686A                     l1496:
  4736  00686A  C007  FFD9         	movff	memset@p,fsr2l
  4737  00686E  C008  FFDA         	movff	memset@p+1,fsr2h
  4738  006872  C003  FFDF         	movff	memset@c,indf2
  4739  006876  4A07               	infsnz	memset@p,f,c
  4740  006878  2A08               	incf	memset@p+1,f,c
  4741  00687A                     l688:
  4742  00687A  0605               	decf	memset@n,f,c
  4743  00687C  A0D8               	btfss	status,0,c
  4744  00687E  0606               	decf	memset@n+1,f,c
  4745  006880  2805               	incf	memset@n,w,c
  4746  006882  E1F3               	bnz	l1496
  4747  006884  2806               	incf	memset@n+1,w,c
  4748  006886  B4D8               	btfsc	status,2,c
  4749  006888  0012               	return	
  4750  00688A  D7EF               	goto	l689
  4751  00688C                     __end_of_memset:
  4752                           	opt stack 0
  4753                           tosu	equ	0xFFF
  4754                           tosh	equ	0xFFE
  4755                           tosl	equ	0xFFD
  4756                           pclath	equ	0xFFA
  4757                           tblptru	equ	0xFF8
  4758                           tblptrh	equ	0xFF7
  4759                           tblptrl	equ	0xFF6
  4760                           tablat	equ	0xFF5
  4761                           prodh	equ	0xFF4
  4762                           prodl	equ	0xFF3
  4763                           postinc0	equ	0xFEE
  4764                           wreg	equ	0xFE8
  4765                           indf1	equ	0xFE7
  4766                           postinc1	equ	0xFE6
  4767                           postdec1	equ	0xFE5
  4768                           plusw1	equ	0xFE3
  4769                           fsr1h	equ	0xFE2
  4770                           fsr1l	equ	0xFE1
  4771                           indf2	equ	0xFDF
  4772                           postinc2	equ	0xFDE
  4773                           postdec2	equ	0xFDD
  4774                           plusw2	equ	0xFDB
  4775                           fsr2h	equ	0xFDA
  4776                           fsr2l	equ	0xFD9
  4777                           status	equ	0xFD8
  4778                           
  4779 ;; *************** function _memcpy *****************
  4780 ;; Defined at:
  4781 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.45\sources\common\memcpy.c"
  4782 ;; Parameters:    Size  Location     Type
  4783 ;;  d1              2    0[COMRAM] PTR void 
  4784 ;;		 -> calc_sha_256@chunk(64), 
  4785 ;;  s1              2    2[COMRAM] PTR const void 
  4786 ;;		 -> string(16), 
  4787 ;;  n               2    4[COMRAM] unsigned int 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  s               2    8[COMRAM] PTR const unsigned char 
  4790 ;;		 -> string(16), 
  4791 ;;  d               2    6[COMRAM] PTR unsigned char 
  4792 ;;		 -> calc_sha_256@chunk(64), 
  4793 ;;  tmp             1   10[COMRAM] unsigned char 
  4794 ;; Return value:  Size  Location     Type
  4795 ;;                  2    0[COMRAM] PTR void 
  4796 ;; Registers used:
  4797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4798 ;; Tracked objects:
  4799 ;;		On entry : 0/0
  4800 ;;		On exit  : 0/0
  4801 ;;		Unchanged: 0/0
  4802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4803 ;;      Params:         6       0       0       0       0       0       0       0       0
  4804 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4805 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4806 ;;      Totals:        11       0       0       0       0       0       0       0       0
  4807 ;;Total ram usage:       11 bytes
  4808 ;; Hardware stack levels used:    1
  4809 ;; This function calls:
  4810 ;;		Nothing
  4811 ;; This function is called by:
  4812 ;;		_calc_chunk
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           	psect	text15
  4817  006936                     __ptext15:
  4818                           	opt stack 0
  4819  006936                     _memcpy:
  4820                           	opt stack 28
  4821                           
  4822                           ;incstack = 0
  4823  006936  C003  F009         	movff	memcpy@s1,memcpy@s
  4824  00693A  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  4825  00693E  C001  F007         	movff	memcpy@d1,memcpy@d
  4826  006942  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  4827  006946  D011               	goto	l682
  4828  006948                     l1484:
  4829  006948  C009  FFF6         	movff	memcpy@s,tblptrl
  4830  00694C  C00A  FFF7         	movff	memcpy@s+1,tblptrh
  4831  006950                     	if	0	;tblptru may be non-zero
  4832  006950                     	endif
  4833  006950                     	if	0	;tblptru may be non-zero
  4834  006950                     	endif
  4835  006950  0008               	tblrd		*
  4836  006952  CFF5 F00B          	movff	tablat,memcpy@tmp
  4837  006956  4A09               	infsnz	memcpy@s,f,c
  4838  006958  2A0A               	incf	memcpy@s+1,f,c
  4839  00695A  C007  FFD9         	movff	memcpy@d,fsr2l
  4840  00695E  C008  FFDA         	movff	memcpy@d+1,fsr2h
  4841  006962  C00B  FFDF         	movff	memcpy@tmp,indf2
  4842  006966  4A07               	infsnz	memcpy@d,f,c
  4843  006968  2A08               	incf	memcpy@d+1,f,c
  4844  00696A                     l682:
  4845  00696A  0605               	decf	memcpy@n,f,c
  4846  00696C  A0D8               	btfss	status,0,c
  4847  00696E  0606               	decf	memcpy@n+1,f,c
  4848  006970  2805               	incf	memcpy@n,w,c
  4849  006972  E1EA               	bnz	l1484
  4850  006974  2806               	incf	memcpy@n+1,w,c
  4851  006976  B4D8               	btfsc	status,2,c
  4852  006978  0012               	return	
  4853  00697A  D7E6               	goto	l683
  4854  00697C                     __end_of_memcpy:
  4855                           	opt stack 0
  4856                           tosu	equ	0xFFF
  4857                           tosh	equ	0xFFE
  4858                           tosl	equ	0xFFD
  4859                           pclath	equ	0xFFA
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           postinc0	equ	0xFEE
  4867                           wreg	equ	0xFE8
  4868                           indf1	equ	0xFE7
  4869                           postinc1	equ	0xFE6
  4870                           postdec1	equ	0xFE5
  4871                           plusw1	equ	0xFE3
  4872                           fsr1h	equ	0xFE2
  4873                           fsr1l	equ	0xFE1
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           plusw2	equ	0xFDB
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function _SYSTEM_Initialize *****************
  4883 ;; Defined at:
  4884 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;		None
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;		None
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  1    wreg      void 
  4891 ;; Registers used:
  4892 ;;		wreg, status,2, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4898 ;;      Params:         0       0       0       0       0       0       0       0       0
  4899 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4901 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4902 ;;Total ram usage:        0 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    1
  4905 ;; This function calls:
  4906 ;;		_EUSART1_Initialize
  4907 ;;		_OSCILLATOR_Initialize
  4908 ;;		_PIN_MANAGER_Initialize
  4909 ;; This function is called by:
  4910 ;;		_main
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           	psect	text16
  4915  0067C6                     __ptext16:
  4916                           	opt stack 0
  4917  0067C6                     _SYSTEM_Initialize:
  4918                           	opt stack 29
  4919                           
  4920                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  4921                           
  4922                           ;incstack = 0
  4923  0067C6  EC7C  F034         	call	_PIN_MANAGER_Initialize	;wreg free
  4924                           
  4925                           ;mcc.c: 54: OSCILLATOR_Initialize();
  4926  0067CA  ECEA  F033         	call	_OSCILLATOR_Initialize	;wreg free
  4927                           
  4928                           ;mcc.c: 55: EUSART1_Initialize();
  4929  0067CE  ECF3  F033         	call	_EUSART1_Initialize	;wreg free
  4930  0067D2  0012               	return		;funcret
  4931  0067D4                     __end_of_SYSTEM_Initialize:
  4932                           	opt stack 0
  4933                           tosu	equ	0xFFF
  4934                           tosh	equ	0xFFE
  4935                           tosl	equ	0xFFD
  4936                           pclath	equ	0xFFA
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           prodh	equ	0xFF4
  4942                           prodl	equ	0xFF3
  4943                           postinc0	equ	0xFEE
  4944                           wreg	equ	0xFE8
  4945                           indf1	equ	0xFE7
  4946                           postinc1	equ	0xFE6
  4947                           postdec1	equ	0xFE5
  4948                           plusw1	equ	0xFE3
  4949                           fsr1h	equ	0xFE2
  4950                           fsr1l	equ	0xFE1
  4951                           indf2	equ	0xFDF
  4952                           postinc2	equ	0xFDE
  4953                           postdec2	equ	0xFDD
  4954                           plusw2	equ	0xFDB
  4955                           fsr2h	equ	0xFDA
  4956                           fsr2l	equ	0xFD9
  4957                           status	equ	0xFD8
  4958                           
  4959 ;; *************** function _PIN_MANAGER_Initialize *****************
  4960 ;; Defined at:
  4961 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;		None
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  1    wreg      void 
  4968 ;; Registers used:
  4969 ;;		wreg, status,2
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4975 ;;      Params:         0       0       0       0       0       0       0       0       0
  4976 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4977 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4978 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4979 ;;Total ram usage:        0 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; This function calls:
  4982 ;;		Nothing
  4983 ;; This function is called by:
  4984 ;;		_SYSTEM_Initialize
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text17
  4989  0068F8                     __ptext17:
  4990                           	opt stack 0
  4991  0068F8                     _PIN_MANAGER_Initialize:
  4992                           	opt stack 29
  4993                           
  4994                           ;pin_manager.c: 62: LATE = 0x00;
  4995                           
  4996                           ;incstack = 0
  4997  0068F8  0E00               	movlw	0
  4998  0068FA  6E8D               	movwf	3981,c	;volatile
  4999                           
  5000                           ;pin_manager.c: 63: LATD = 0x00;
  5001  0068FC  0E00               	movlw	0
  5002  0068FE  6E8C               	movwf	3980,c	;volatile
  5003                           
  5004                           ;pin_manager.c: 64: LATA = 0x00;
  5005  006900  0E00               	movlw	0
  5006  006902  6E89               	movwf	3977,c	;volatile
  5007                           
  5008                           ;pin_manager.c: 65: LATB = 0x00;
  5009  006904  0E00               	movlw	0
  5010  006906  6E8A               	movwf	3978,c	;volatile
  5011                           
  5012                           ;pin_manager.c: 66: LATC = 0x00;
  5013  006908  0E00               	movlw	0
  5014  00690A  6E8B               	movwf	3979,c	;volatile
  5015                           
  5016                           ;pin_manager.c: 71: TRISE = 0x07;
  5017  00690C  0E07               	movlw	7
  5018  00690E  6E96               	movwf	3990,c	;volatile
  5019                           
  5020                           ;pin_manager.c: 72: TRISA = 0xFF;
  5021  006910  6892               	setf	3986,c	;volatile
  5022                           
  5023                           ;pin_manager.c: 73: TRISB = 0xFF;
  5024  006912  6893               	setf	3987,c	;volatile
  5025                           
  5026                           ;pin_manager.c: 74: TRISC = 0x87;
  5027  006914  0E87               	movlw	135
  5028  006916  6E94               	movwf	3988,c	;volatile
  5029                           
  5030                           ;pin_manager.c: 75: TRISD = 0xFF;
  5031  006918  6895               	setf	3989,c	;volatile
  5032                           
  5033                           ;pin_manager.c: 80: ANSELD = 0xFF;
  5034  00691A  010F               	movlb	15	; () banked
  5035  00691C  695E               	setf	94,b	;volatile
  5036                           
  5037                           ;pin_manager.c: 81: ANSELC = 0x84;
  5038  00691E  0E84               	movlw	132
  5039  006920  6F5D               	movwf	93,b	;volatile
  5040                           
  5041                           ;pin_manager.c: 82: ANSELB = 0x3F;
  5042  006922  0E3F               	movlw	63
  5043  006924  6F5C               	movwf	92,b	;volatile
  5044                           
  5045                           ;pin_manager.c: 83: ANSELE = 0x07;
  5046  006926  0E07               	movlw	7
  5047  006928  6F5F               	movwf	95,b	;volatile
  5048                           
  5049                           ;pin_manager.c: 84: ANSELA = 0x2F;
  5050  00692A  0E2F               	movlw	47
  5051  00692C  6F5B               	movwf	91,b	;volatile
  5052                           
  5053                           ;pin_manager.c: 89: WPUB = 0x00;
  5054  00692E  0E00               	movlw	0
  5055  006930  6E85               	movwf	3973,c	;volatile
  5056                           
  5057                           ; BSR set to: 15
  5058                           ;pin_manager.c: 90: INTCON2bits.nRBPU = 1;
  5059  006932  8EF1               	bsf	intcon2,7,c	;volatile
  5060                           
  5061                           ; BSR set to: 15
  5062  006934  0012               	return		;funcret
  5063  006936                     __end_of_PIN_MANAGER_Initialize:
  5064                           	opt stack 0
  5065                           tosu	equ	0xFFF
  5066                           tosh	equ	0xFFE
  5067                           tosl	equ	0xFFD
  5068                           pclath	equ	0xFFA
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           intcon2	equ	0xFF1
  5076                           postinc0	equ	0xFEE
  5077                           wreg	equ	0xFE8
  5078                           indf1	equ	0xFE7
  5079                           postinc1	equ	0xFE6
  5080                           postdec1	equ	0xFE5
  5081                           plusw1	equ	0xFE3
  5082                           fsr1h	equ	0xFE2
  5083                           fsr1l	equ	0xFE1
  5084                           indf2	equ	0xFDF
  5085                           postinc2	equ	0xFDE
  5086                           postdec2	equ	0xFDD
  5087                           plusw2	equ	0xFDB
  5088                           fsr2h	equ	0xFDA
  5089                           fsr2l	equ	0xFD9
  5090                           status	equ	0xFD8
  5091                           
  5092 ;; *************** function _OSCILLATOR_Initialize *****************
  5093 ;; Defined at:
  5094 ;;		line 58 in file "mcc_generated_files/mcc.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;		None
  5099 ;; Return value:  Size  Location     Type
  5100 ;;                  1    wreg      void 
  5101 ;; Registers used:
  5102 ;;		wreg, status,2
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : 0/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5108 ;;      Params:         0       0       0       0       0       0       0       0       0
  5109 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5111 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5112 ;;Total ram usage:        0 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; This function calls:
  5115 ;;		Nothing
  5116 ;; This function is called by:
  5117 ;;		_SYSTEM_Initialize
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text18
  5122  0067D4                     __ptext18:
  5123                           	opt stack 0
  5124  0067D4                     _OSCILLATOR_Initialize:
  5125                           	opt stack 29
  5126                           
  5127                           ;mcc.c: 61: OSCCON = 0x60;
  5128                           
  5129                           ; BSR set to: 15
  5130                           ;incstack = 0
  5131  0067D4  0E60               	movlw	96
  5132  0067D6  6ED3               	movwf	4051,c	;volatile
  5133                           
  5134                           ;mcc.c: 63: OSCCON2 = 0x00;
  5135  0067D8  0E00               	movlw	0
  5136  0067DA  6ED2               	movwf	4050,c	;volatile
  5137                           
  5138                           ;mcc.c: 65: OSCTUNE = 0x00;
  5139  0067DC  0E00               	movlw	0
  5140  0067DE  6E9B               	movwf	3995,c	;volatile
  5141                           
  5142                           ;mcc.c: 67: ACTCON = 0x00;
  5143  0067E0  0E00               	movlw	0
  5144  0067E2  6EB5               	movwf	4021,c	;volatile
  5145  0067E4  0012               	return		;funcret
  5146  0067E6                     __end_of_OSCILLATOR_Initialize:
  5147                           	opt stack 0
  5148                           tosu	equ	0xFFF
  5149                           tosh	equ	0xFFE
  5150                           tosl	equ	0xFFD
  5151                           pclath	equ	0xFFA
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           prodh	equ	0xFF4
  5157                           prodl	equ	0xFF3
  5158                           intcon2	equ	0xFF1
  5159                           postinc0	equ	0xFEE
  5160                           wreg	equ	0xFE8
  5161                           indf1	equ	0xFE7
  5162                           postinc1	equ	0xFE6
  5163                           postdec1	equ	0xFE5
  5164                           plusw1	equ	0xFE3
  5165                           fsr1h	equ	0xFE2
  5166                           fsr1l	equ	0xFE1
  5167                           indf2	equ	0xFDF
  5168                           postinc2	equ	0xFDE
  5169                           postdec2	equ	0xFDD
  5170                           plusw2	equ	0xFDB
  5171                           fsr2h	equ	0xFDA
  5172                           fsr2l	equ	0xFD9
  5173                           status	equ	0xFD8
  5174                           
  5175 ;; *************** function _EUSART1_Initialize *****************
  5176 ;; Defined at:
  5177 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;		None
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;		None
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      void 
  5184 ;; Registers used:
  5185 ;;		wreg, status,2
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5191 ;;      Params:         0       0       0       0       0       0       0       0       0
  5192 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5193 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5194 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5195 ;;Total ram usage:        0 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; This function calls:
  5198 ;;		Nothing
  5199 ;; This function is called by:
  5200 ;;		_SYSTEM_Initialize
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           	psect	text19
  5205  0067E6                     __ptext19:
  5206                           	opt stack 0
  5207  0067E6                     _EUSART1_Initialize:
  5208                           	opt stack 29
  5209                           
  5210                           ;eusart1.c: 61: BAUDCON1 = 0x08;
  5211                           
  5212                           ;incstack = 0
  5213  0067E6  0E08               	movlw	8
  5214  0067E8  6EB8               	movwf	4024,c	;volatile
  5215                           
  5216                           ;eusart1.c: 64: RCSTA1 = 0x80;
  5217  0067EA  0E80               	movlw	128
  5218  0067EC  6EAB               	movwf	4011,c	;volatile
  5219                           
  5220                           ;eusart1.c: 67: TXSTA1 = 0x24;
  5221  0067EE  0E24               	movlw	36
  5222  0067F0  6EAC               	movwf	4012,c	;volatile
  5223                           
  5224                           ;eusart1.c: 70: SPBRG1 = 0x67;
  5225  0067F2  0E67               	movlw	103
  5226  0067F4  6EAF               	movwf	4015,c	;volatile
  5227                           
  5228                           ;eusart1.c: 73: SPBRGH1 = 0x00;
  5229  0067F6  0E00               	movlw	0
  5230  0067F8  6EB0               	movwf	4016,c	;volatile
  5231  0067FA  0012               	return		;funcret
  5232  0067FC                     __end_of_EUSART1_Initialize:
  5233                           	opt stack 0
  5234                           tosu	equ	0xFFF
  5235                           tosh	equ	0xFFE
  5236                           tosl	equ	0xFFD
  5237                           pclath	equ	0xFFA
  5238                           tblptru	equ	0xFF8
  5239                           tblptrh	equ	0xFF7
  5240                           tblptrl	equ	0xFF6
  5241                           tablat	equ	0xFF5
  5242                           prodh	equ	0xFF4
  5243                           prodl	equ	0xFF3
  5244                           intcon2	equ	0xFF1
  5245                           postinc0	equ	0xFEE
  5246                           wreg	equ	0xFE8
  5247                           indf1	equ	0xFE7
  5248                           postinc1	equ	0xFE6
  5249                           postdec1	equ	0xFE5
  5250                           plusw1	equ	0xFE3
  5251                           fsr1h	equ	0xFE2
  5252                           fsr1l	equ	0xFE1
  5253                           indf2	equ	0xFDF
  5254                           postinc2	equ	0xFDE
  5255                           postdec2	equ	0xFDD
  5256                           plusw2	equ	0xFDB
  5257                           fsr2h	equ	0xFDA
  5258                           fsr2l	equ	0xFD9
  5259                           status	equ	0xFD8
  5260                           tosu	equ	0xFFF
  5261                           tosh	equ	0xFFE
  5262                           tosl	equ	0xFFD
  5263                           pclath	equ	0xFFA
  5264                           tblptru	equ	0xFF8
  5265                           tblptrh	equ	0xFF7
  5266                           tblptrl	equ	0xFF6
  5267                           tablat	equ	0xFF5
  5268                           prodh	equ	0xFF4
  5269                           prodl	equ	0xFF3
  5270                           intcon2	equ	0xFF1
  5271                           postinc0	equ	0xFEE
  5272                           wreg	equ	0xFE8
  5273                           indf1	equ	0xFE7
  5274                           postinc1	equ	0xFE6
  5275                           postdec1	equ	0xFE5
  5276                           plusw1	equ	0xFE3
  5277                           fsr1h	equ	0xFE2
  5278                           fsr1l	equ	0xFE1
  5279                           indf2	equ	0xFDF
  5280                           postinc2	equ	0xFDE
  5281                           postdec2	equ	0xFDD
  5282                           plusw2	equ	0xFDB
  5283                           fsr2h	equ	0xFDA
  5284                           fsr2l	equ	0xFD9
  5285                           status	equ	0xFD8
  5286                           
  5287                           	psect	text20
  5288  000000                     __ptext20:
  5289                           	opt stack 0
  5290                           tosu	equ	0xFFF
  5291                           tosh	equ	0xFFE
  5292                           tosl	equ	0xFFD
  5293                           pclath	equ	0xFFA
  5294                           tblptru	equ	0xFF8
  5295                           tblptrh	equ	0xFF7
  5296                           tblptrl	equ	0xFF6
  5297                           tablat	equ	0xFF5
  5298                           prodh	equ	0xFF4
  5299                           prodl	equ	0xFF3
  5300                           intcon2	equ	0xFF1
  5301                           postinc0	equ	0xFEE
  5302                           wreg	equ	0xFE8
  5303                           indf1	equ	0xFE7
  5304                           postinc1	equ	0xFE6
  5305                           postdec1	equ	0xFE5
  5306                           plusw1	equ	0xFE3
  5307                           fsr1h	equ	0xFE2
  5308                           fsr1l	equ	0xFE1
  5309                           indf2	equ	0xFDF
  5310                           postinc2	equ	0xFDE
  5311                           postdec2	equ	0xFDD
  5312                           plusw2	equ	0xFDB
  5313                           fsr2h	equ	0xFDA
  5314                           fsr2l	equ	0xFD9
  5315                           status	equ	0xFD8
  5316                           
  5317                           	psect	rparam
  5318  0000                     tosu	equ	0xFFF
  5319                           tosh	equ	0xFFE
  5320                           tosl	equ	0xFFD
  5321                           pclath	equ	0xFFA
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           intcon2	equ	0xFF1
  5329                           postinc0	equ	0xFEE
  5330                           wreg	equ	0xFE8
  5331                           indf1	equ	0xFE7
  5332                           postinc1	equ	0xFE6
  5333                           postdec1	equ	0xFE5
  5334                           plusw1	equ	0xFE3
  5335                           fsr1h	equ	0xFE2
  5336                           fsr1l	equ	0xFE1
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           plusw2	equ	0xFDB
  5341                           fsr2h	equ	0xFDA
  5342                           fsr2l	equ	0xFD9
  5343                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    280
    Data        32
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     65      65
    BANK0           160    142     142
    BANK1           256    256     256
    BANK2           256    135     232
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 65
		 -> main@hash_string(BANK2[65]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 65
		 -> NULL(NULL[0]), main@hash_string(BANK2[65]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 65
		 -> NULL(NULL[0]), main@hash_string(BANK2[65]), 

    memset@p1	PTR void  size(2) Largest target is 256
		 -> calc_sha_256@w(BANK1[256]), calc_sha_256@chunk(BANK0[64]), 

    memset@p	PTR unsigned char  size(2) Largest target is 256
		 -> calc_sha_256@w(BANK1[256]), calc_sha_256@chunk(BANK0[64]), 

    memcpy@d1	PTR void  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    memcpy@s1	PTR const void  size(2) Largest target is 16
		 -> string(CODE[16]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), NULL(NULL[0]), STR_3(CODE[7]), 
		 -> main@hash_string(BANK2[65]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_2(CODE[17]), STR_1(CODE[5]), 

    S434__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S434__prbuf$ptr	PTR unsigned char  size(2) Largest target is 65
		 -> NULL(NULL[0]), main@hash_string(BANK2[65]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 65
		 -> NULL(NULL[0]), main@hash_string(BANK2[65]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 

    main@p_string	PTR unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    hash_to_string@hash	PTR const unsigned char  size(2) Largest target is 32
		 -> main@hash(BANK2[32]), 

    hash_to_string@string	PTR unsigned char  size(2) Largest target is 65
		 -> main@hash_string(BANK2[65]), 

    calc_sha_256@hash	PTR unsigned char  size(2) Largest target is 32
		 -> main@hash(BANK2[32]), 

    calc_sha_256@p	PTR const unsigned char  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    calc_sha_256@input	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    state.p	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    sp__memset	PTR void  size(2) Largest target is 256
		 -> calc_sha_256@w(BANK1[256]), calc_sha_256@chunk(BANK0[64]), 

    sp__memcpy	PTR void  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    calc_chunk@chunk	PTR unsigned char  size(2) Largest target is 64
		 -> calc_sha_256@chunk(BANK0[64]), 

    calc_chunk@state.p	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    calc_chunk@state	PTR struct buffer_state size(2) Largest target is 11
		 -> calc_sha_256@state(BANK0[10]), 

    S320buffer_state$p	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    init_buf_state@state.p	PTR const unsigned char  size(2) Largest target is 16
		 -> string(CODE[16]), 

    init_buf_state@input	PTR const void  size(2) Largest target is 16
		 -> string(CODE[16]), 

    init_buf_state@state	PTR struct buffer_state size(2) Largest target is 11
		 -> calc_sha_256@state(BANK0[10]), 


Critical Paths under _main in COMRAM

    _main->_calc_sha_256
    _printf->__doprnt
    _hash_to_string->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwdiv
    _putch->_EUSART1_Write
    _calc_sha_256->_calc_chunk
    _calc_chunk->_memcpy

Critical Paths under _main in BANK0

    _main->_calc_sha_256

Critical Paths under _main in BANK1

    _main->_calc_sha_256

Critical Paths under _main in BANK2

    _main->_calc_sha_256

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               105   105      0   14181
                                             63 COMRAM     2     2      0
                                             32 BANK2    103   103      0
                  _SYSTEM_Initialize
                       _calc_sha_256
                     _hash_to_string
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              10     6      4    2886
                                             31 COMRAM    10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _hash_to_string                                       7     3      4    3315
                                             45 COMRAM     7     3      4
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             14     8      6    3050
                                             31 COMRAM    14     8      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             28    22      6    2684
                                              7 COMRAM    24    18      6
                   Absolute function *
                            ___lwdiv
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Write                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calc_sha_256                                       468   462      6    7840
                                             25 COMRAM    38    32      6
                                              0 BANK0    142   142      0
                                              0 BANK1    256   256      0
                                              0 BANK2     32    32      0
                         _calc_chunk
                     _init_buf_state
                             _memset
                       _rotate_right
 ---------------------------------------------------------------------------------
 (2) _rotate_right                                        15     9      6    1608
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) _init_buf_state                                       6     0      6     404
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (2) _calc_chunk                                          14    10      4    2268
                                             11 COMRAM    14    10      4
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     780
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6     599
                                              0 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _calc_sha_256
     _calc_chunk
       _memcpy
       _memset
     _init_buf_state
     _memset
     _rotate_right
   _hash_to_string
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___wmul *
         _isdigit *
         _putch *
           _EUSART1_Write
   _printf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___wmul *
       _isdigit *
       _putch *
         _EUSART1_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100     87      E8      10       90.6%
BITBANK1           100      0       0       7        0.0%
BANK1              100    100     100       8      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8E      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     41      41       1       68.4%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2B7       6        0.0%
DATA                 0      0     2B7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 28 17:25:14 2018

                              _k 7EB9              ___wmul@multiplicand 0003  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                   __CFG_CP2$OFF 000000                     __CFG_CP3$OFF 000000  
                    __CFG_LVP$ON 000000                              l201 6ED6  
                            l210 6F7A                              l203 7106  
                            l211 6F76                              l140 6C5E  
                            l141 6D40                              l221 7046  
                            l213 6FC2                              l142 6DF2  
                            l230 71B0                              l222 70A4  
                            l151 73B8                              l231 722C  
                            l223 70F4                              l160 7CCC  
                            l152 73FC                              l240 726E  
                            l216 6FCC                              l208 6F34  
                            l145 6E0E                              l217 7006  
                            l209 6F6C                              l138 6BF2  
                            l154 751E                              l234 71F6  
                            l218 7034                              l170 69C8  
                            l163 7D76                              l156 7894  
                            l244 72B0                              l165 7EB6  
                            l245 732E                              l229 71A8  
                            l158 7906                              l246 735C  
                            l190 6E22                              l191 6E94  
                            l192 6E64                              l177 6B76  
                            l195 6EA8                              l196 6EA2  
                            l662 6A08                              l663 6A12  
                            l682 696A                              l658 69E8  
                            l683 6948                              l659 69E0  
                            l579 6812                              l688 687A  
                            l689 686A                     __CFG_CPB$OFF 000000  
                   __CFG_CPD$OFF 000000                              u810 69EC  
                            u910 6FA6                              u917 6F9C  
                            u990 709C                              u958 6FF0  
                            u878 6E4E                     _rotate_right 6ADC  
                            u988 706A                              u997 7092  
                            u989 709E                              tosl 000FFD  
                            wreg 000FE8                       _TXSTA1bits 000FAC  
                           l1436 67BC                             l1516 6E8E  
                           l1570 7046                             l1484 6948  
                           l1820 787C                             l1644 7298  
                           l1628 7220                             l1556 6FCC  
                           l1822 7884                             l1806 7502  
                           l1662 7358                             l1566 7030  
                           l1496 686A                             l1752 6DBA  
                           l1832 78EA                             l1584 70F0  
                           l1596 7158                             l1908 6984  
                           l1870 7CB4                             l1872 7CBC  
                           l1882 7D32                             STR_1 7FFA  
                           STR_2 7FE2                             STR_3 7FF3  
                           STR_4 7FD1                             u1000 70DC  
                           u1110 7234                             u1007 70D2  
                           u1200 6B28                             u1040 7184  
                           u1220 6C0C                             u1300 7502  
                           u1140 72AA                             u1205 6B1E  
                           u1310 751C                             u1240 6D4C  
                           u1400 7D32                             u1320 756C  
                           u1330 7698                             u1170 7364  
                           u1138 7258                             u1420 7D74  
                           u1340 787C                             u1180 737C  
                           u1325 7562                             _LATA 000F89  
                           u1270 6DDC                             u1190 6B04  
                           u1430 7DC0                             _LATB 000F8A  
                           u1255 6DA8                             u1335 768E  
                           _LATC 000F8B                             u1440 7E16  
                           u1360 78EA                             u1168 7318  
                           _LATD 000F8C                             u1281 7390  
                           _LATE 000F8D                             u1370 7904  
                           u1290 73FA                             u1098 71E0  
                           u1195 6AFA                             u1435 7DB6  
                           u1380 7CB4                             u1445 7E0C  
                           u1481 6B66                             u1497 6BC4  
                           _WPUB 000F85                    _EUSART1_Write 67BA  
                           _main 6B46                             fsr1h 000FE2  
                           fsr2h 000FDA                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                    __CFG_BORV$190 000000  
                           prodh 000FF4                             prodl 000FF3  
                           start 0000                    __CFG_IESO$OFF 000000  
                  __CFG_MCLRE$ON 000000                     ___param_bank 000000  
 __size_of_OSCILLATOR_Initialize 0012    __end_of_OSCILLATOR_Initialize 67E6  
                          ?_main 0001                   __CFG_DEBUG$OFF 000000  
                __end_of___lwdiv 6A1C                  __end_of__doprnt 7386  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                  __CFG_WRTB$OFF 000000                     main@p_string 0285  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 __CFG_EBTRB$OFF 000000                  __end_of_isdigit 681A  
                          _putch 67B0                            main@i 0281  
                          main@j 0283                   ?_EUSART1_Write 0001  
                          pclath 000FFA                            tablat 000FF5  
                          plusw1 000FE3                            plusw2 000FDB  
                          status 000FD8                   __CFG_T3CMX$RC0 000000  
                __end_of_sprintf 6A7A                   __CFG_ICPRT$OFF 000000  
                 __CFG_PBADEN$ON 000000            __size_of_calc_sha_256 0B32  
                __initialization 68C2       __end_of_EUSART1_Initialize 67FC  
                   __end_of_main 6BD4                   __CFG_PCLKEN$ON 000000  
                         ??_main 0040                    __activetblptr 000002  
               ??_hash_to_string 0032                   __CFG_SDOMX$RB3 000000  
                __CFG_CCP2MX$RC1 000000                           _ACTCON 000FB5  
                         _ANSELA 000F5B                           ?_putch 0001  
                         _ANSELB 000F5C                           _ANSELC 000F5D  
                         _ANSELD 000F5E                           _ANSELE 000F5F  
                 __CFG_WDTEN$OFF 000000                           _RCREG1 000FAE  
                   _calc_sha_256 7386                           _RCSTA1 000FAB  
                         _OSCCON 000FD3                           _SPBRG1 000FAF  
           hash_to_string@string 002E                           _TXREG1 000FAD  
                         _TXSTA1 000FAC                   __CFG_XINST$OFF 000000  
                         ___wmul 683A                   __CFG_STVREN$ON 000000  
                      ??___lwdiv 0005                        ??__doprnt 000E  
                         _memcpy 6936                           _memset 6860  
                         clear_0 68E8                     __doprnt@ccnt 0017  
                   __doprnt@flag 0013                           _printf 688C  
                   __doprnt@prec 0016                           _string 7FC1  
                hash_to_string@i 0033                        ??_isdigit 0001  
                   __mediumconst 7EB8                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                ??_EUSART1_Write 0001                        ??_sprintf 0026  
           __CFG_LS48MHZ$SYS24X4 000000                _SYSTEM_Initialize 67C6  
                     __accesstop 0060          __end_of__initialization 68EE  
             ?_SYSTEM_Initialize 0001                    ___rparam_used 000001  
                 __pcstackCOMRAM 0001                 __CFG_nPWRTEN$OFF 000000  
                   __pidataBANK2 681A              ??_SYSTEM_Initialize 0001  
                  __end_of_putch 67BA                       _calc_chunk 6BD4  
                     __doprnt@ap 000C                       __doprnt@cp 001B  
                     __doprnt@pb 0008        __end_of_SYSTEM_Initialize 67D4  
                        ??_putch 0002                       __pbssBANK2 0287  
              __CFG_PLLSEL$PLL4X 000000                          ?___wmul 0001  
                        ?_memcpy 0001                          ?_memset 0001  
                        ?_printf 0020                          _OSCCON2 000FD2  
                        _OSCTUNE 000F9B                          _SPBRGH1 000FB0  
       calc_chunk@space_in_chunk 0016                          __Hparam 0000  
                        __Lparam 0000          __size_of_init_buf_state 0062  
                __size_of___wmul 0026                          ___lwdiv 69CA  
                        __doprnt 6E18                          __pcinit 68C2  
                __size_of_memcpy 0046                  __size_of_memset 002C  
                        __ramtop 0800                          __ptext0 6B46  
                        __ptext1 688C                          __ptext2 697C  
                        __ptext3 6A1C                          __ptext4 6E18  
                        __ptext5 67B0                          __ptext6 67BA  
                        __ptext7 67FC                          __ptext8 683A  
                        __ptext9 69CA                  __size_of_printf 0036  
              __end_of_hexpowers 7FC1            _OSCILLATOR_Initialize 67D4  
                        _isdigit 67FC                      ?_calc_chunk 000C  
             _EUSART1_Initialize 67E6         ??_PIN_MANAGER_Initialize 0001  
     __size_of_SYSTEM_Initialize 000E                          _sprintf 6A1C  
                  __doprnt@width 001D             end_of_initialization 68EE  
            ?_EUSART1_Initialize 0001                          memcpy@d 0007  
                        memcpy@n 0005                          memcpy@s 0009  
                        memset@c 0003                          memset@n 0005  
                        memset@p 0007                    __Lmediumconst 7EB8  
                        printf@f 0020                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc1 000FE6                          postinc2 000FDE  
           ??_EUSART1_Initialize 0001              EUSART1_Write@txData 0001  
            __size_of_calc_chunk 0244                   __end_of___wmul 6860  
                 __end_of_memcpy 697C           ?_OSCILLATOR_Initialize 0001  
                 __end_of_memset 688C                    ?_rotate_right 0001  
                 __end_of_printf 68C2                   __end_of_string 7FD1  
            start_initialization 68C2  __size_of_PIN_MANAGER_Initialize 003E  
                    putch@txData 0002            __end_of_EUSART1_Write 67C6  
                __CFG_nLPBOR$OFF 000000          __size_of_hash_to_string 004E  
                 _init_buf_state 6A7A                         ??___wmul 0005  
                    __doprnt@idx 0012                      __doprnt@len 0019  
                    __doprnt@val 0014                      __pdataBANK2 02C8  
                       ??_memcpy 0007                         ??_memset 0007  
                 ??_rotate_right 0007                         ??_printf 0024  
                  __pcstackBANK0 0060                    __pcstackBANK1 0100  
                  __pcstackBANK2 0200              init_buf_state@input 0003  
            init_buf_state@state 0001                        __end_of_k 7FB9  
                      __doprnt@c 001F                        __doprnt@f 000A  
         __end_of_init_buf_state 6ADC                  main@hash_string 0220  
               ___lwdiv@dividend 0001           _PIN_MANAGER_Initialize 68F8  
                  __pmediumconst 7EB8                         ?___lwdiv 0001  
                       ?__doprnt 0008                         _BAUDCON1 000FB8  
                   ??_calc_chunk 0010                         ?_isdigit 0001  
                      _hexpowers 7FB9                 ___lwdiv@quotient 0005  
                       ?_sprintf 0020                   __size_of_putch 000A  
                  ?_calc_sha_256 001A                   ___wmul@product 0005  
                ?_init_buf_state 0001                         _PIR1bits 000F9E  
             __end_of_calc_chunk 6E18                 __CFG_WDTPS$32768 000000  
                      main@F6102 0287                      calc_chunk@i 0018  
              ___wmul@multiplier 0001                __CFG_CFGPLLEN$OFF 000000  
                    _INTCON2bits 000FF1                        copy_data0 68D6  
                 ??_calc_sha_256 0020                   _hash_to_string 697C  
           __end_of_rotate_right 6B46               hash_to_string@hash 0030  
                       __Hrparam 0000                        memcpy@tmp 000B  
                       __Lrparam 0000               __CFG_BOREN$SBORDIS 000000  
        ??_OSCILLATOR_Initialize 0001      __size_of_EUSART1_Initialize 0016  
               __size_of___lwdiv 0052                 __size_of__doprnt 056E  
              rotate_right@count 0005                      _isdigit$694 0002  
              rotate_right@value 0001                 __size_of_isdigit 001E  
                ___lwdiv@divisor 0003                  ___lwdiv@counter 0007  
                       __ptext10 7386                         __ptext11 6ADC  
                       __ptext20 0000                         __ptext12 6A7A  
                       __ptext13 6BD4                         __ptext14 6860  
                       __ptext15 6936                         __ptext16 67C6  
                       __ptext17 68F8                         __ptext18 67D4  
                       __ptext19 67E6           __end_of_hash_to_string 69CA  
               __size_of_sprintf 005E                    __size_of_main 008E  
                       main@hash 0261                         memcpy@d1 0001  
                       memcpy@s1 0003                         isdigit@c 0003  
                       memset@p1 0001                init_buf_state@len 0005  
                ?_hash_to_string 002E                        sprintf@ap 0028  
                      sprintf@pb 002A                        sprintf@wh 0020  
        ?_PIN_MANAGER_Initialize 0001                       _RCSTA1bits 000FAB  
                calc_chunk@chunk 000C                  calc_chunk@state 000E  
                       printf@ap 0024                         printf@pb 0026  
           __CFG_CPUDIV$NOCLKDIV 000000             __end_of_calc_sha_256 7EB8  
         __size_of_EUSART1_Write 000C                         sprintf@f 0022  
                 calc_chunk@left 0012                calc_sha_256@F6069 02C8  
          __size_of_rotate_right 006A               calc_sha_256@s0_409 00D0  
             calc_sha_256@s1_406 00C8                 ??_init_buf_state 0007  
             __CFG_FOSC$INTOSCIO 000000   __end_of_PIN_MANAGER_Initialize 6936  
                  calc_chunk@len 0014                calc_sha_256@chunk 0060  
               calc_sha_256@hash 001A                calc_sha_256@input 001C  
              calc_sha_256@temp1 00DC                calc_sha_256@temp2 00D8  
                 calc_sha_256@s0 00C0                   calc_sha_256@s1 00C4  
                calc_sha_256@maj 00D4                  calc_sha_256@len 001E  
                 calc_sha_256@ah 0200                   calc_sha_256@ch 00CC  
                  calc_sha_256@h 00A0                    calc_sha_256@i 00EC  
                  calc_sha_256@j 003E                    calc_sha_256@p 00E0  
                  calc_sha_256@w 0100                calc_sha_256@state 00E2  
